
Multitasking+Matrixing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000004ac  00000540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008000f6  008000f6  000005d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003c4  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001db  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000380  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d1  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000194  00000000  00000000  00001309  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	27 c0       	rjmp	.+78     	; 0x50 <__ctors_end>
   2:	41 c0       	rjmp	.+130    	; 0x86 <__bad_interrupt>
   4:	40 c0       	rjmp	.+128    	; 0x86 <__bad_interrupt>
   6:	3f c0       	rjmp	.+126    	; 0x86 <__bad_interrupt>
   8:	3e c0       	rjmp	.+124    	; 0x86 <__bad_interrupt>
   a:	3d c0       	rjmp	.+122    	; 0x86 <__bad_interrupt>
   c:	3c c0       	rjmp	.+120    	; 0x86 <__bad_interrupt>
   e:	3b c0       	rjmp	.+118    	; 0x86 <__bad_interrupt>
  10:	3a c0       	rjmp	.+116    	; 0x86 <__bad_interrupt>
  12:	39 c0       	rjmp	.+114    	; 0x86 <__bad_interrupt>
  14:	cb c1       	rjmp	.+918    	; 0x3ac <__vector_10>
  16:	37 c0       	rjmp	.+110    	; 0x86 <__bad_interrupt>
  18:	36 c0       	rjmp	.+108    	; 0x86 <__bad_interrupt>
  1a:	35 c0       	rjmp	.+106    	; 0x86 <__bad_interrupt>
  1c:	34 c0       	rjmp	.+104    	; 0x86 <__bad_interrupt>

0000001e <__trampolines_end>:
  1e:	52 58       	subi	r21, 0x82	; 130
  20:	56 3d       	cpi	r21, 0xD6	; 214
  22:	1b 48       	sbci	r17, 0x8B	; 139
  24:	44 5e       	subi	r20, 0xE4	; 228
  26:	17 07       	cpc	r17, r23
  28:	4e 2e       	mov	r4, r30
  2a:	23 2d       	mov	r18, r3
  2c:	25 2d       	mov	r18, r5
  2e:	39 52       	subi	r19, 0x29	; 41
  30:	55 0b       	sbc	r21, r21
  32:	37 3c       	cpi	r19, 0xC7	; 199
  34:	1f 1f       	adc	r17, r31
  36:	2d 1d       	adc	r18, r13
  38:	1c 50       	subi	r17, 0x0C	; 12
  3a:	39 5b       	subi	r19, 0xB9	; 185
  3c:	30 1d       	adc	r19, r0
  3e:	19 28       	or	r1, r9
  40:	0b 23       	and	r16, r27
  42:	15 1c       	adc	r1, r5
  44:	48 60       	ori	r20, 0x08	; 8
  46:	33 41       	sbci	r19, 0x13	; 19
  48:	0b 56       	subi	r16, 0x6B	; 107
  4a:	43 40       	sbci	r20, 0x03	; 3
  4c:	22 64       	ori	r18, 0x42	; 66
  4e:	5c 29       	or	r21, r12

00000050 <__ctors_end>:
  50:	11 24       	eor	r1, r1
  52:	1f be       	out	0x3f, r1	; 63
  54:	cf e5       	ldi	r28, 0x5F	; 95
  56:	d2 e0       	ldi	r29, 0x02	; 2
  58:	de bf       	out	0x3e, r29	; 62
  5a:	cd bf       	out	0x3d, r28	; 61

0000005c <__do_copy_data>:
  5c:	10 e0       	ldi	r17, 0x00	; 0
  5e:	a0 e6       	ldi	r26, 0x60	; 96
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	ec ea       	ldi	r30, 0xAC	; 172
  64:	f4 e0       	ldi	r31, 0x04	; 4
  66:	02 c0       	rjmp	.+4      	; 0x6c <__do_copy_data+0x10>
  68:	05 90       	lpm	r0, Z+
  6a:	0d 92       	st	X+, r0
  6c:	a6 3f       	cpi	r26, 0xF6	; 246
  6e:	b1 07       	cpc	r27, r17
  70:	d9 f7       	brne	.-10     	; 0x68 <__do_copy_data+0xc>

00000072 <__do_clear_bss>:
  72:	21 e0       	ldi	r18, 0x01	; 1
  74:	a6 ef       	ldi	r26, 0xF6	; 246
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	01 c0       	rjmp	.+2      	; 0x7c <.do_clear_bss_start>

0000007a <.do_clear_bss_loop>:
  7a:	1d 92       	st	X+, r1

0000007c <.do_clear_bss_start>:
  7c:	a1 31       	cpi	r26, 0x11	; 17
  7e:	b2 07       	cpc	r27, r18
  80:	e1 f7       	brne	.-8      	; 0x7a <.do_clear_bss_loop>
  82:	17 d0       	rcall	.+46     	; 0xb2 <main>
  84:	11 c2       	rjmp	.+1058   	; 0x4a8 <_exit>

00000086 <__bad_interrupt>:
  86:	bc cf       	rjmp	.-136    	; 0x0 <__vectors>

00000088 <returnRandom>:
	11,	86,	67,
	64,	34,	100,
	92,	41,
};

uint8_t returnRandom(uint8_t mod){
  88:	68 2f       	mov	r22, r24
	randPoint++;
  8a:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <__data_end>
  8e:	9f 5f       	subi	r25, 0xFF	; 255
	if(randPoint == sizeof(cheapRandom)-1) randPoint = 0;
  90:	91 33       	cpi	r25, 0x31	; 49
  92:	19 f0       	breq	.+6      	; 0x9a <returnRandom+0x12>
	64,	34,	100,
	92,	41,
};

uint8_t returnRandom(uint8_t mod){
	randPoint++;
  94:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <__data_end>
  98:	02 c0       	rjmp	.+4      	; 0x9e <returnRandom+0x16>
	if(randPoint == sizeof(cheapRandom)-1) randPoint = 0;
  9a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__data_end>
	return cheapRandom[randPoint] % mod + 1; //good enough
  9e:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <__data_end>
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	e2 5e       	subi	r30, 0xE2	; 226
  a6:	ff 4f       	sbci	r31, 0xFF	; 255
  a8:	80 81       	ld	r24, Z
  aa:	f2 d1       	rcall	.+996    	; 0x490 <__udivmodqi4>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	89 0f       	add	r24, r25
  b0:	08 95       	ret

000000b2 <main>:
volatile uint8_t LEDPower[2][animationNum] = {};
volatile uint8_t swap = 0;
volatile uint8_t queuePointer = 0; 

int main(void)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	2d 97       	sbiw	r28, 0x0d	; 13
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	f8 94       	cli
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	cd bf       	out	0x3d, r28	; 61
	//internet code, to be modified
	TCCR0A = (1 << WGM01);             //CTC mode
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = (1 << CS01);              //div8
  ca:	83 bf       	out	0x33, r24	; 51
	OCR0A = TICK_LEN;						   // 50us compare value
  cc:	84 ef       	ldi	r24, 0xF4	; 244
  ce:	89 bd       	out	0x29, r24	; 41
	TIMSK |= (1<<OCIE0A);			   // enable timer0 interrupt
  d0:	89 b7       	in	r24, 0x39	; 57
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	89 bf       	out	0x39, r24	; 57

	//set all pins to output
	DDRB = 0b011111;
  d6:	8f e1       	ldi	r24, 0x1F	; 31
  d8:	87 bb       	out	0x17, r24	; 23

	//set default LED States
	for(uint8_t i=0; i<animationNum; i++) LEDStates[i].scaleSetting = DIM_RES;
  da:	ef ef       	ldi	r30, 0xFF	; 255
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	82 e3       	ldi	r24, 0x32	; 50
  e0:	83 83       	std	Z+3, r24	; 0x03
  e2:	81 87       	std	Z+9, r24	; 0x09
  e4:	87 87       	std	Z+15, r24	; 0x0f

    while (1) 
    {
		//cli();

		uint8_t tempSwap = swap;
  e6:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <swap>
  ea:	29 87       	std	Y+9, r18	; 0x09

		//reset queue
		for (uint8_t i=0; i<animationNum; i++) LEDPower[tempSwap][i] = 0;
  ec:	82 2f       	mov	r24, r18
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	fc 01       	movw	r30, r24
  f2:	ee 0f       	add	r30, r30
  f4:	ff 1f       	adc	r31, r31
  f6:	e8 0f       	add	r30, r24
  f8:	f9 1f       	adc	r31, r25
  fa:	e7 50       	subi	r30, 0x07	; 7
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	10 82       	st	Z, r1
 100:	11 82       	std	Z+1, r1	; 0x01
 102:	12 82       	std	Z+2, r1	; 0x02
 104:	4f ef       	ldi	r20, 0xFF	; 255
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	5c 83       	std	Y+4, r21	; 0x04
 10a:	4b 83       	std	Y+3, r20	; 0x03
 10c:	0f 2e       	mov	r0, r31
 10e:	f1 e0       	ldi	r31, 0x01	; 1
 110:	6f 2e       	mov	r6, r31
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	7f 2e       	mov	r7, r31
 116:	f0 2d       	mov	r31, r0
 118:	0f 2e       	mov	r0, r31
 11a:	f2 e0       	ldi	r31, 0x02	; 2
 11c:	cf 2e       	mov	r12, r31
 11e:	f1 e0       	ldi	r31, 0x01	; 1
 120:	df 2e       	mov	r13, r31
 122:	f0 2d       	mov	r31, r0
 124:	0f 2e       	mov	r0, r31
 126:	f3 e0       	ldi	r31, 0x03	; 3
 128:	2f 2e       	mov	r2, r31
 12a:	f1 e0       	ldi	r31, 0x01	; 1
 12c:	3f 2e       	mov	r3, r31
 12e:	f0 2d       	mov	r31, r0
 130:	0f 2e       	mov	r0, r31
 132:	f4 e0       	ldi	r31, 0x04	; 4
 134:	4f 2e       	mov	r4, r31
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	5f 2e       	mov	r5, r31
 13a:	f0 2d       	mov	r31, r0
 13c:	19 82       	std	Y+1, r1	; 0x01
 13e:	1a 82       	std	Y+2, r1	; 0x02
					break;
				
			}

			//set the next frames of the animation
			LEDPower[tempSwap][i] = LEDStates[i].powerSetting * (DIM_RES / LEDStates[i].scaleSetting);
 140:	9c 01       	movw	r18, r24
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	d9 01       	movw	r26, r18
 148:	a8 0f       	add	r26, r24
 14a:	b9 1f       	adc	r27, r25
 14c:	b8 87       	std	Y+8, r27	; 0x08
 14e:	af 83       	std	Y+7, r26	; 0x07
 150:	46 01       	movw	r8, r12
		for (uint8_t i=0; i<animationNum; i++) LEDPower[tempSwap][i] = 0;

		//for every animation
		for(uint8_t i=0; i<animationNum; i++){
			//if the animation is not in the middle of delaying, process the state machine
			if(!LEDStates[i].delaySetting){
 152:	c9 80       	ldd	r12, Y+1	; 0x01
 154:	da 80       	ldd	r13, Y+2	; 0x02
 156:	eb 81       	ldd	r30, Y+3	; 0x03
 158:	fc 81       	ldd	r31, Y+4	; 0x04
 15a:	fe 83       	std	Y+6, r31	; 0x06
 15c:	ed 83       	std	Y+5, r30	; 0x05
 15e:	80 81       	ld	r24, Z
 160:	91 81       	ldd	r25, Z+1	; 0x01
 162:	89 2b       	or	r24, r25
 164:	a1 f1       	breq	.+104    	; 0x1ce <main+0x11c>
 166:	b3 c0       	rjmp	.+358    	; 0x2ce <__stack+0x6f>
				while(animationStore[i][LEDStates[i].stepCounter] != L_DELAY){
					if(animationStore[i][LEDStates[i].stepCounter] == L_SET_POWER){
 168:	22 30       	cpi	r18, 0x02	; 2
 16a:	b1 f4       	brne	.+44     	; 0x198 <main+0xe6>
						//parse special cases for numbers
						switch(animationStore[i][LEDStates[i].stepCounter + 1]){
 16c:	f5 01       	movw	r30, r10
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	81 81       	ldd	r24, Z+1	; 0x01
 174:	8e 3f       	cpi	r24, 0xFE	; 254
 176:	41 f0       	breq	.+16     	; 0x188 <main+0xd6>
 178:	8f 3f       	cpi	r24, 0xFF	; 255
 17a:	59 f4       	brne	.+22     	; 0x192 <main+0xe0>
							case N_RAND:
								LEDStates[i].powerSetting = returnRandom(LEDStates[i].scaleSetting);
 17c:	d4 01       	movw	r26, r8
 17e:	8c 91       	ld	r24, X
 180:	83 df       	rcall	.-250    	; 0x88 <returnRandom>
 182:	f3 01       	movw	r30, r6
 184:	80 83       	st	Z, r24
								break;
 186:	19 c0       	rjmp	.+50     	; 0x1ba <main+0x108>
							case N_RAND_5:
								LEDStates[i].powerSetting = returnRandom(5);
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	7e df       	rcall	.-260    	; 0x88 <returnRandom>
 18c:	d3 01       	movw	r26, r6
 18e:	8c 93       	st	X, r24
								break;
 190:	14 c0       	rjmp	.+40     	; 0x1ba <main+0x108>
							default:
								LEDStates[i].powerSetting = animationStore[i][LEDStates[i].stepCounter + 1];
 192:	f3 01       	movw	r30, r6
 194:	80 83       	st	Z, r24
 196:	11 c0       	rjmp	.+34     	; 0x1ba <main+0x108>
						}
					}

					else if(animationStore[i][LEDStates[i].stepCounter] == L_SET_DIM){
 198:	23 30       	cpi	r18, 0x03	; 3
 19a:	39 f4       	brne	.+14     	; 0x1aa <main+0xf8>
						//set the dim setting
						LEDStates[i].dimSetting = animationStore[i][LEDStates[i].stepCounter + 1];
 19c:	f5 01       	movw	r30, r10
 19e:	e8 0f       	add	r30, r24
 1a0:	f9 1f       	adc	r31, r25
 1a2:	81 81       	ldd	r24, Z+1	; 0x01
 1a4:	d1 01       	movw	r26, r2
 1a6:	8c 93       	st	X, r24
 1a8:	08 c0       	rjmp	.+16     	; 0x1ba <main+0x108>
					}

					else if(animationStore[i][LEDStates[i].stepCounter] == L_SET_SCALE){
 1aa:	21 30       	cpi	r18, 0x01	; 1
 1ac:	31 f4       	brne	.+12     	; 0x1ba <main+0x108>
						//set the scale
						LEDStates[i].scaleSetting = animationStore[i][LEDStates[i].stepCounter + 1];
 1ae:	f5 01       	movw	r30, r10
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	81 81       	ldd	r24, Z+1	; 0x01
 1b6:	f4 01       	movw	r30, r8
 1b8:	80 83       	st	Z, r24
					}

					//increment to next step
					LEDStates[i].stepCounter += 2;
 1ba:	ac 85       	ldd	r26, Y+12	; 0x0c
 1bc:	bd 85       	ldd	r27, Y+13	; 0x0d
 1be:	8c 91       	ld	r24, X
 1c0:	8e 5f       	subi	r24, 0xFE	; 254
 1c2:	8c 93       	st	X, r24
					//check to make sure the animation hasn't ended, and if it has reset it
					if(LEDStates[i].stepCounter >= sizeof(animationStore[i])) LEDStates[i].stepCounter = 0;
 1c4:	82 33       	cpi	r24, 0x32	; 50
 1c6:	e8 f0       	brcs	.+58     	; 0x202 <main+0x150>
 1c8:	f6 01       	movw	r30, r12
 1ca:	10 82       	st	Z, r1
 1cc:	1a c0       	rjmp	.+52     	; 0x202 <main+0x150>
 1ce:	5d 86       	std	Y+13, r5	; 0x0d
 1d0:	4c 86       	std	Y+12, r4	; 0x0c

		//for every animation
		for(uint8_t i=0; i<animationNum; i++){
			//if the animation is not in the middle of delaying, process the state machine
			if(!LEDStates[i].delaySetting){
				while(animationStore[i][LEDStates[i].stepCounter] != L_DELAY){
 1d2:	c6 01       	movw	r24, r12
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	8c 0d       	add	r24, r12
 1de:	9d 1d       	adc	r25, r13
 1e0:	8c 01       	movw	r16, r24
 1e2:	00 0f       	add	r16, r16
 1e4:	11 1f       	adc	r17, r17
 1e6:	00 0f       	add	r16, r16
 1e8:	11 1f       	adc	r17, r17
 1ea:	08 0f       	add	r16, r24
 1ec:	19 1f       	adc	r17, r25
 1ee:	00 0f       	add	r16, r16
 1f0:	11 1f       	adc	r17, r17
						LEDStates[i].dimSetting = animationStore[i][LEDStates[i].stepCounter + 1];
					}

					else if(animationStore[i][LEDStates[i].stepCounter] == L_SET_SCALE){
						//set the scale
						LEDStates[i].scaleSetting = animationStore[i][LEDStates[i].stepCounter + 1];
 1f2:	98 01       	movw	r18, r16
 1f4:	20 5a       	subi	r18, 0xA0	; 160
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	59 01       	movw	r10, r18
 1fa:	5b 86       	std	Y+11, r5	; 0x0b
 1fc:	4a 86       	std	Y+10, r4	; 0x0a
 1fe:	76 01       	movw	r14, r12
 200:	62 01       	movw	r12, r4
 202:	a6 01       	movw	r20, r12

		//for every animation
		for(uint8_t i=0; i<animationNum; i++){
			//if the animation is not in the middle of delaying, process the state machine
			if(!LEDStates[i].delaySetting){
				while(animationStore[i][LEDStates[i].stepCounter] != L_DELAY){
 204:	d2 01       	movw	r26, r4
 206:	8c 91       	ld	r24, X
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	f8 01       	movw	r30, r16
 20c:	e8 0f       	add	r30, r24
 20e:	f9 1f       	adc	r31, r25
 210:	e0 5a       	subi	r30, 0xA0	; 160
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	20 81       	ld	r18, Z
 216:	24 30       	cpi	r18, 0x04	; 4
 218:	09 f0       	breq	.+2      	; 0x21c <main+0x16a>
 21a:	a6 cf       	rjmp	.-180    	; 0x168 <main+0xb6>
 21c:	67 01       	movw	r12, r14
 21e:	7a 01       	movw	r14, r20
					if(LEDStates[i].stepCounter >= sizeof(animationStore[i])) LEDStates[i].stepCounter = 0;
				}

				//the next step is now guaranteed to be a delay, so process that
				//if its a ten random, do that
				if(animationStore[i][LEDStates[i].stepCounter + 1] == N_RAND) LEDStates[i].delaySetting = returnRandom(DIM_RES) * (1000 / TICK_LEN);
 220:	96 01       	movw	r18, r12
 222:	22 0f       	add	r18, r18
 224:	33 1f       	adc	r19, r19
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	2c 0d       	add	r18, r12
 22c:	3d 1d       	adc	r19, r13
 22e:	a9 01       	movw	r20, r18
 230:	44 0f       	add	r20, r20
 232:	55 1f       	adc	r21, r21
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	24 0f       	add	r18, r20
 23a:	35 1f       	adc	r19, r21
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	20 5a       	subi	r18, 0xA0	; 160
 242:	3f 4f       	sbci	r19, 0xFF	; 255
 244:	f9 01       	movw	r30, r18
 246:	e8 0f       	add	r30, r24
 248:	f9 1f       	adc	r31, r25
 24a:	81 81       	ldd	r24, Z+1	; 0x01
 24c:	8f 3f       	cpi	r24, 0xFF	; 255
 24e:	51 f4       	brne	.+20     	; 0x264 <__stack+0x5>
 250:	82 e3       	ldi	r24, 0x32	; 50
 252:	1a df       	rcall	.-460    	; 0x88 <returnRandom>
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	ed 81       	ldd	r30, Y+5	; 0x05
 25c:	fe 81       	ldd	r31, Y+6	; 0x06
 25e:	91 83       	std	Z+1, r25	; 0x01
 260:	80 83       	st	Z, r24
 262:	16 c0       	rjmp	.+44     	; 0x290 <__stack+0x31>
				//if its a random delay, set delay to random*converstion factor
				else if(animationStore[i][LEDStates[i].stepCounter + 1] == N_RAND_5) LEDStates[i].delaySetting = returnRandom(5) * 3;
 264:	8e 3f       	cpi	r24, 0xFE	; 254
 266:	69 f4       	brne	.+26     	; 0x282 <__stack+0x23>
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	0e df       	rcall	.-484    	; 0x88 <returnRandom>
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	28 0f       	add	r18, r24
 272:	31 1d       	adc	r19, r1
 274:	28 0f       	add	r18, r24
 276:	31 1d       	adc	r19, r1
 278:	ad 81       	ldd	r26, Y+5	; 0x05
 27a:	be 81       	ldd	r27, Y+6	; 0x06
 27c:	2d 93       	st	X+, r18
 27e:	3c 93       	st	X, r19
 280:	07 c0       	rjmp	.+14     	; 0x290 <__stack+0x31>
				//else set the delay to the next value times the conversion factor
				else LEDStates[i].delaySetting = animationStore[i][LEDStates[i].stepCounter + 1] * (1000 / TICK_LEN);
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	ed 81       	ldd	r30, Y+5	; 0x05
 28a:	fe 81       	ldd	r31, Y+6	; 0x06
 28c:	91 83       	std	Z+1, r25	; 0x01
 28e:	80 83       	st	Z, r24
				//increment to next step
				LEDStates[i].stepCounter += 2;
 290:	d7 01       	movw	r26, r14
 292:	8c 91       	ld	r24, X
 294:	8e 5f       	subi	r24, 0xFE	; 254
 296:	8c 93       	st	X, r24
				//check to make sure the animation hasn't ended, and if it has reset it
				if(LEDStates[i].stepCounter >= sizeof(animationStore[i]) || animationStore[i][LEDStates[i].stepCounter] == 0) LEDStates[i].stepCounter = 0;
 298:	82 33       	cpi	r24, 0x32	; 50
 29a:	b8 f4       	brcc	.+46     	; 0x2ca <__stack+0x6b>
 29c:	f6 01       	movw	r30, r12
 29e:	ee 0f       	add	r30, r30
 2a0:	ff 1f       	adc	r31, r31
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	ec 0d       	add	r30, r12
 2a8:	fd 1d       	adc	r31, r13
 2aa:	9f 01       	movw	r18, r30
 2ac:	22 0f       	add	r18, r18
 2ae:	33 1f       	adc	r19, r19
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	e2 0f       	add	r30, r18
 2b6:	f3 1f       	adc	r31, r19
 2b8:	ee 0f       	add	r30, r30
 2ba:	ff 1f       	adc	r31, r31
 2bc:	e8 0f       	add	r30, r24
 2be:	f1 1d       	adc	r31, r1
 2c0:	e0 5a       	subi	r30, 0xA0	; 160
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	80 81       	ld	r24, Z
 2c6:	81 11       	cpse	r24, r1
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <__stack+0x6f>
 2ca:	f7 01       	movw	r30, r14
 2cc:	10 82       	st	Z, r1
 2ce:	f1 01       	movw	r30, r2
			}

			//process dimming
			switch(LEDStates[i].dimSetting){
 2d0:	80 81       	ld	r24, Z
 2d2:	8b 3f       	cpi	r24, 0xFB	; 251
 2d4:	41 f1       	breq	.+80     	; 0x326 <__stack+0xc7>
 2d6:	18 f4       	brcc	.+6      	; 0x2de <__stack+0x7f>
 2d8:	8a 3f       	cpi	r24, 0xFA	; 250
 2da:	d9 f0       	breq	.+54     	; 0x312 <__stack+0xb3>
 2dc:	30 c0       	rjmp	.+96     	; 0x33e <__stack+0xdf>
 2de:	8c 3f       	cpi	r24, 0xFC	; 252
 2e0:	19 f0       	breq	.+6      	; 0x2e8 <__stack+0x89>
 2e2:	8d 3f       	cpi	r24, 0xFD	; 253
 2e4:	51 f0       	breq	.+20     	; 0x2fa <__stack+0x9b>
 2e6:	2b c0       	rjmp	.+86     	; 0x33e <__stack+0xdf>
				case D_DIM_DEC:
					//don't dec if under zero
					if(LEDStates[i].powerSetting > 0) LEDStates[i].powerSetting--;
 2e8:	d3 01       	movw	r26, r6
 2ea:	8c 91       	ld	r24, X
 2ec:	88 23       	and	r24, r24
 2ee:	19 f0       	breq	.+6      	; 0x2f6 <__stack+0x97>
 2f0:	81 50       	subi	r24, 0x01	; 1
 2f2:	8c 93       	st	X, r24
 2f4:	24 c0       	rjmp	.+72     	; 0x33e <__stack+0xdf>
					else LEDStates[i].dimSetting = 0;
 2f6:	10 82       	st	Z, r1
 2f8:	22 c0       	rjmp	.+68     	; 0x33e <__stack+0xdf>
					break;
				case D_DIM_INC:
					//dont inc if over max val
					if(LEDStates[i].powerSetting < LEDStates[i].scaleSetting) LEDStates[i].powerSetting++;
 2fa:	d3 01       	movw	r26, r6
 2fc:	8c 91       	ld	r24, X
 2fe:	d4 01       	movw	r26, r8
 300:	9c 91       	ld	r25, X
 302:	89 17       	cp	r24, r25
 304:	20 f4       	brcc	.+8      	; 0x30e <__stack+0xaf>
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	f3 01       	movw	r30, r6
 30a:	80 83       	st	Z, r24
 30c:	18 c0       	rjmp	.+48     	; 0x33e <__stack+0xdf>
					else LEDStates[i].dimSetting = 0; 
 30e:	10 82       	st	Z, r1
 310:	16 c0       	rjmp	.+44     	; 0x33e <__stack+0xdf>
					break;
				case D_DIM_CYCLE_DEC:
					//if can't dec, set to zero, then swap to inc
					if(LEDStates[i].powerSetting > 0) LEDStates[i].powerSetting--;
 312:	d3 01       	movw	r26, r6
 314:	8c 91       	ld	r24, X
 316:	88 23       	and	r24, r24
 318:	19 f0       	breq	.+6      	; 0x320 <__stack+0xc1>
 31a:	81 50       	subi	r24, 0x01	; 1
 31c:	8c 93       	st	X, r24
 31e:	0f c0       	rjmp	.+30     	; 0x33e <__stack+0xdf>
					else LEDStates[i].dimSetting = D_DIM_CYCLE_INC;
 320:	bb ef       	ldi	r27, 0xFB	; 251
 322:	b0 83       	st	Z, r27
 324:	0c c0       	rjmp	.+24     	; 0x33e <__stack+0xdf>
					break;
				case D_DIM_CYCLE_INC:
					//if can't inc, set to max, then swap to dec
					if(LEDStates[i].powerSetting < LEDStates[i].scaleSetting) LEDStates[i].powerSetting++;
 326:	d3 01       	movw	r26, r6
 328:	8c 91       	ld	r24, X
 32a:	d4 01       	movw	r26, r8
 32c:	9c 91       	ld	r25, X
 32e:	89 17       	cp	r24, r25
 330:	20 f4       	brcc	.+8      	; 0x33a <__stack+0xdb>
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	f3 01       	movw	r30, r6
 336:	80 83       	st	Z, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <__stack+0xdf>
					else LEDStates[i].dimSetting = D_DIM_CYCLE_DEC;
 33a:	2a ef       	ldi	r18, 0xFA	; 250
 33c:	20 83       	st	Z, r18
					break;
				
			}

			//set the next frames of the animation
			LEDPower[tempSwap][i] = LEDStates[i].powerSetting * (DIM_RES / LEDStates[i].scaleSetting);
 33e:	d4 01       	movw	r26, r8
 340:	6c 91       	ld	r22, X
 342:	82 e3       	ldi	r24, 0x32	; 50
 344:	a5 d0       	rcall	.+330    	; 0x490 <__udivmodqi4>
 346:	f3 01       	movw	r30, r6
 348:	60 81       	ld	r22, Z
 34a:	99 d0       	rcall	.+306    	; 0x47e <__mulqi3>
 34c:	ef 81       	ldd	r30, Y+7	; 0x07
 34e:	f8 85       	ldd	r31, Y+8	; 0x08
 350:	ec 0d       	add	r30, r12
 352:	fd 1d       	adc	r31, r13
 354:	e7 50       	subi	r30, 0x07	; 7
 356:	ff 4f       	sbci	r31, 0xFF	; 255
 358:	80 83       	st	Z, r24

			//dec. the delay
			LEDStates[i].delaySetting--;
 35a:	ad 81       	ldd	r26, Y+5	; 0x05
 35c:	be 81       	ldd	r27, Y+6	; 0x06
 35e:	8d 91       	ld	r24, X+
 360:	9c 91       	ld	r25, X
 362:	11 97       	sbiw	r26, 0x01	; 1
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	8d 93       	st	X+, r24
 368:	9c 93       	st	X, r25
 36a:	e9 81       	ldd	r30, Y+1	; 0x01
 36c:	fa 81       	ldd	r31, Y+2	; 0x02
 36e:	31 96       	adiw	r30, 0x01	; 1
 370:	fa 83       	std	Y+2, r31	; 0x02
 372:	e9 83       	std	Y+1, r30	; 0x01
 374:	2b 81       	ldd	r18, Y+3	; 0x03
 376:	3c 81       	ldd	r19, Y+4	; 0x04
 378:	2a 5f       	subi	r18, 0xFA	; 250
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	3c 83       	std	Y+4, r19	; 0x04
 37e:	2b 83       	std	Y+3, r18	; 0x03
 380:	36 e0       	ldi	r19, 0x06	; 6
 382:	63 0e       	add	r6, r19
 384:	71 1c       	adc	r7, r1
 386:	46 e0       	ldi	r20, 0x06	; 6
 388:	84 0e       	add	r8, r20
 38a:	91 1c       	adc	r9, r1
 38c:	56 e0       	ldi	r21, 0x06	; 6
 38e:	25 0e       	add	r2, r21
 390:	31 1c       	adc	r3, r1
 392:	86 e0       	ldi	r24, 0x06	; 6
 394:	48 0e       	add	r4, r24
 396:	51 1c       	adc	r5, r1

		//reset queue
		for (uint8_t i=0; i<animationNum; i++) LEDPower[tempSwap][i] = 0;

		//for every animation
		for(uint8_t i=0; i<animationNum; i++){
 398:	33 97       	sbiw	r30, 0x03	; 3
 39a:	09 f0       	breq	.+2      	; 0x39e <__stack+0x13f>
 39c:	da ce       	rjmp	.-588    	; 0x152 <main+0xa0>
			//dec. the delay
			LEDStates[i].delaySetting--;
		}

		//enable the interrupt (on the first run)
		sei(); 
 39e:	78 94       	sei
 3a0:	99 85       	ldd	r25, Y+9	; 0x09

		//wait until ISR empties queue
		while(tempSwap == swap);
 3a2:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <swap>
 3a6:	98 17       	cp	r25, r24
 3a8:	e1 f3       	breq	.-8      	; 0x3a2 <__stack+0x143>
 3aa:	9d ce       	rjmp	.-710    	; 0xe6 <main+0x34>

000003ac <__vector_10>:
    }
}

ISR(TIMER0_COMPA_vect){
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	2f 93       	push	r18
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
	PORTB = 0;
 3c0:	18 ba       	out	0x18, r1	; 24
	if(LEDPower[!swap][0] <= queuePointer) PORTB |= (1 << PB0);
 3c2:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <swap>
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	22 23       	and	r18, r18
 3cc:	11 f0       	breq	.+4      	; 0x3d2 <__vector_10+0x26>
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	fc 01       	movw	r30, r24
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	8e 0f       	add	r24, r30
 3da:	9f 1f       	adc	r25, r31
 3dc:	fc 01       	movw	r30, r24
 3de:	e7 50       	subi	r30, 0x07	; 7
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	90 81       	ld	r25, Z
 3e4:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <queuePointer>
 3e8:	89 17       	cp	r24, r25
 3ea:	08 f0       	brcs	.+2      	; 0x3ee <__vector_10+0x42>
 3ec:	c0 9a       	sbi	0x18, 0	; 24
	if(LEDPower[!swap][1] <= queuePointer) PORTB |= (1 << PB1);
 3ee:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <swap>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	22 23       	and	r18, r18
 3f8:	11 f0       	breq	.+4      	; 0x3fe <__vector_10+0x52>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	fc 01       	movw	r30, r24
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	8e 0f       	add	r24, r30
 406:	9f 1f       	adc	r25, r31
 408:	fc 01       	movw	r30, r24
 40a:	e7 50       	subi	r30, 0x07	; 7
 40c:	ff 4f       	sbci	r31, 0xFF	; 255
 40e:	91 81       	ldd	r25, Z+1	; 0x01
 410:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <queuePointer>
 414:	89 17       	cp	r24, r25
 416:	08 f0       	brcs	.+2      	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
 418:	c1 9a       	sbi	0x18, 1	; 24
	if(LEDPower[!swap][2] <= queuePointer) PORTB |= (1 << PB2);
 41a:	20 91 f8 00 	lds	r18, 0x00F8	; 0x8000f8 <swap>
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	22 23       	and	r18, r18
 424:	11 f0       	breq	.+4      	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	fc 01       	movw	r30, r24
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	8e 0f       	add	r24, r30
 432:	9f 1f       	adc	r25, r31
 434:	fc 01       	movw	r30, r24
 436:	e7 50       	subi	r30, 0x07	; 7
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	92 81       	ldd	r25, Z+2	; 0x02
 43c:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <queuePointer>
 440:	89 17       	cp	r24, r25
 442:	08 f0       	brcs	.+2      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
 444:	c2 9a       	sbi	0x18, 2	; 24

	queuePointer++;
 446:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <queuePointer>
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <queuePointer>

	if(queuePointer >= DIM_RES){
 450:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <queuePointer>
 454:	82 33       	cpi	r24, 0x32	; 50
 456:	48 f0       	brcs	.+18     	; 0x46a <__FUSE_REGION_LENGTH__+0x6a>
		queuePointer = 0;
 458:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <queuePointer>
		swap = !swap;
 45c:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <swap>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	91 11       	cpse	r25, r1
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <swap>
	}
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	2f 91       	pop	r18
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <__mulqi3>:
 47e:	00 24       	eor	r0, r0

00000480 <__mulqi3_loop>:
 480:	80 fd       	sbrc	r24, 0
 482:	06 0e       	add	r0, r22
 484:	66 0f       	add	r22, r22
 486:	11 f0       	breq	.+4      	; 0x48c <__mulqi3_exit>
 488:	86 95       	lsr	r24
 48a:	d1 f7       	brne	.-12     	; 0x480 <__mulqi3_loop>

0000048c <__mulqi3_exit>:
 48c:	80 2d       	mov	r24, r0
 48e:	08 95       	ret

00000490 <__udivmodqi4>:
 490:	99 1b       	sub	r25, r25
 492:	79 e0       	ldi	r23, 0x09	; 9
 494:	04 c0       	rjmp	.+8      	; 0x49e <__udivmodqi4_ep>

00000496 <__udivmodqi4_loop>:
 496:	99 1f       	adc	r25, r25
 498:	96 17       	cp	r25, r22
 49a:	08 f0       	brcs	.+2      	; 0x49e <__udivmodqi4_ep>
 49c:	96 1b       	sub	r25, r22

0000049e <__udivmodqi4_ep>:
 49e:	88 1f       	adc	r24, r24
 4a0:	7a 95       	dec	r23
 4a2:	c9 f7       	brne	.-14     	; 0x496 <__udivmodqi4_loop>
 4a4:	80 95       	com	r24
 4a6:	08 95       	ret

000004a8 <_exit>:
 4a8:	f8 94       	cli

000004aa <__stop_program>:
 4aa:	ff cf       	rjmp	.-2      	; 0x4aa <__stop_program>
