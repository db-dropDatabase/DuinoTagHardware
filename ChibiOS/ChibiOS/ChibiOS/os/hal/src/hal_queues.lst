   1               		.file	"hal_queues.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.iqObjectInit,"ax",@progbits
  11               	.global	iqObjectInit
  13               	iqObjectInit:
  14               	.LFB53:
  15               		.file 1 "ChibiOS/os/hal/src/hal_queues.c"
   1:ChibiOS/os/hal/src/hal_queues.c **** /*
   2:ChibiOS/os/hal/src/hal_queues.c ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:ChibiOS/os/hal/src/hal_queues.c **** 
   4:ChibiOS/os/hal/src/hal_queues.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:ChibiOS/os/hal/src/hal_queues.c ****     you may not use this file except in compliance with the License.
   6:ChibiOS/os/hal/src/hal_queues.c ****     You may obtain a copy of the License at
   7:ChibiOS/os/hal/src/hal_queues.c **** 
   8:ChibiOS/os/hal/src/hal_queues.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:ChibiOS/os/hal/src/hal_queues.c **** 
  10:ChibiOS/os/hal/src/hal_queues.c ****     Unless required by applicable law or agreed to in writing, software
  11:ChibiOS/os/hal/src/hal_queues.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:ChibiOS/os/hal/src/hal_queues.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:ChibiOS/os/hal/src/hal_queues.c ****     See the License for the specific language governing permissions and
  14:ChibiOS/os/hal/src/hal_queues.c ****     limitations under the License.
  15:ChibiOS/os/hal/src/hal_queues.c **** */
  16:ChibiOS/os/hal/src/hal_queues.c **** 
  17:ChibiOS/os/hal/src/hal_queues.c **** /**
  18:ChibiOS/os/hal/src/hal_queues.c ****  * @file    hal_queues.c
  19:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   I/O Queues code.
  20:ChibiOS/os/hal/src/hal_queues.c ****  *
  21:ChibiOS/os/hal/src/hal_queues.c ****  * @addtogroup HAL_QUEUES
  22:ChibiOS/os/hal/src/hal_queues.c ****  * @details Queues are mostly used in serial-like device drivers.
  23:ChibiOS/os/hal/src/hal_queues.c ****  *          Serial device drivers are usually designed to have a lower side
  24:ChibiOS/os/hal/src/hal_queues.c ****  *          (lower driver, it is usually an interrupt service routine) and an
  25:ChibiOS/os/hal/src/hal_queues.c ****  *          upper side (upper driver, accessed by the application threads).<br>
  26:ChibiOS/os/hal/src/hal_queues.c ****  *          There are several kind of queues:<br>
  27:ChibiOS/os/hal/src/hal_queues.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  28:ChibiOS/os/hal/src/hal_queues.c ****  *            lower side and the reader is the upper side.
  29:ChibiOS/os/hal/src/hal_queues.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  30:ChibiOS/os/hal/src/hal_queues.c ****  *            upper side and the reader is the lower side.
  31:ChibiOS/os/hal/src/hal_queues.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  32:ChibiOS/os/hal/src/hal_queues.c ****  *            are implemented by pairing an input queue and an output queue
  33:ChibiOS/os/hal/src/hal_queues.c ****  *            together.
  34:ChibiOS/os/hal/src/hal_queues.c ****  *          .
  35:ChibiOS/os/hal/src/hal_queues.c ****  * @{
  36:ChibiOS/os/hal/src/hal_queues.c ****  */
  37:ChibiOS/os/hal/src/hal_queues.c **** 
  38:ChibiOS/os/hal/src/hal_queues.c **** #include "hal.h"
  39:ChibiOS/os/hal/src/hal_queues.c **** 
  40:ChibiOS/os/hal/src/hal_queues.c **** #if !defined(_CHIBIOS_RT_) || (CH_CFG_USE_QUEUES == FALSE) ||               \
  41:ChibiOS/os/hal/src/hal_queues.c ****     defined(__DOXYGEN__)
  42:ChibiOS/os/hal/src/hal_queues.c **** 
  43:ChibiOS/os/hal/src/hal_queues.c **** /**
  44:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Initializes an input queue.
  45:ChibiOS/os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
  46:ChibiOS/os/hal/src/hal_queues.c ****  *          the bytes contained in the queue.
  47:ChibiOS/os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
  48:ChibiOS/os/hal/src/hal_queues.c ****  *
  49:ChibiOS/os/hal/src/hal_queues.c ****  * @param[out] iqp      pointer to an @p input_queue_t structure
  50:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
  51:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
  52:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] infy      pointer to a callback function that is invoked when
  53:ChibiOS/os/hal/src/hal_queues.c ****  *                      data is read from the queue. The value can be @p NULL.
  54:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
  55:ChibiOS/os/hal/src/hal_queues.c ****  *
  56:ChibiOS/os/hal/src/hal_queues.c ****  * @init
  57:ChibiOS/os/hal/src/hal_queues.c ****  */
  58:ChibiOS/os/hal/src/hal_queues.c **** void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
  59:ChibiOS/os/hal/src/hal_queues.c ****                   qnotify_t infy, void *link) {
  16               		.loc 1 59 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 0F93      		push r16
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 16, -2
  23 0002 1F93      		push r17
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 17, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 FC01      		movw r30,r24
  32               	.LVL1:
  33               	.LBB76:
  34               	.LBB77:
  35               		.file 2 "ChibiOS/os/hal/osal/nil/osal.h"
   1:ChibiOS/os/hal/osal/nil/osal.h **** /*
   2:ChibiOS/os/hal/osal/nil/osal.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:ChibiOS/os/hal/osal/nil/osal.h **** 
   4:ChibiOS/os/hal/osal/nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:ChibiOS/os/hal/osal/nil/osal.h ****     you may not use this file except in compliance with the License.
   6:ChibiOS/os/hal/osal/nil/osal.h ****     You may obtain a copy of the License at
   7:ChibiOS/os/hal/osal/nil/osal.h **** 
   8:ChibiOS/os/hal/osal/nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:ChibiOS/os/hal/osal/nil/osal.h **** 
  10:ChibiOS/os/hal/osal/nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:ChibiOS/os/hal/osal/nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:ChibiOS/os/hal/osal/nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:ChibiOS/os/hal/osal/nil/osal.h ****     See the License for the specific language governing permissions and
  14:ChibiOS/os/hal/osal/nil/osal.h ****     limitations under the License.
  15:ChibiOS/os/hal/osal/nil/osal.h **** */
  16:ChibiOS/os/hal/osal/nil/osal.h **** 
  17:ChibiOS/os/hal/osal/nil/osal.h **** /**
  18:ChibiOS/os/hal/osal/nil/osal.h ****  * @file    osal.h
  19:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   OSAL module header.
  20:ChibiOS/os/hal/osal/nil/osal.h ****  *
  21:ChibiOS/os/hal/osal/nil/osal.h ****  * @addtogroup OSAL
  22:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  23:ChibiOS/os/hal/osal/nil/osal.h ****  */
  24:ChibiOS/os/hal/osal/nil/osal.h **** 
  25:ChibiOS/os/hal/osal/nil/osal.h **** #ifndef _OSAL_H_
  26:ChibiOS/os/hal/osal/nil/osal.h **** #define _OSAL_H_
  27:ChibiOS/os/hal/osal/nil/osal.h **** 
  28:ChibiOS/os/hal/osal/nil/osal.h **** #include <stddef.h>
  29:ChibiOS/os/hal/osal/nil/osal.h **** #include <stdint.h>
  30:ChibiOS/os/hal/osal/nil/osal.h **** #include <stdbool.h>
  31:ChibiOS/os/hal/osal/nil/osal.h **** 
  32:ChibiOS/os/hal/osal/nil/osal.h **** #include "nil.h"
  33:ChibiOS/os/hal/osal/nil/osal.h **** 
  34:ChibiOS/os/hal/osal/nil/osal.h **** #if defined(__SPC5_HAL__)
  35:ChibiOS/os/hal/osal/nil/osal.h **** #include "platform.h"
  36:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  37:ChibiOS/os/hal/osal/nil/osal.h **** 
  38:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
  39:ChibiOS/os/hal/osal/nil/osal.h **** /* Module constants.                                                         */
  40:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
  41:ChibiOS/os/hal/osal/nil/osal.h **** 
  42:ChibiOS/os/hal/osal/nil/osal.h **** /**
  43:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Common constants
  44:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  45:ChibiOS/os/hal/osal/nil/osal.h ****  */
  46:ChibiOS/os/hal/osal/nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  47:ChibiOS/os/hal/osal/nil/osal.h **** #define FALSE                               0
  48:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  49:ChibiOS/os/hal/osal/nil/osal.h **** 
  50:ChibiOS/os/hal/osal/nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  51:ChibiOS/os/hal/osal/nil/osal.h **** #define TRUE                                (!FALSE)
  52:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  53:ChibiOS/os/hal/osal/nil/osal.h **** 
  54:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_SUCCESS                        FALSE
  55:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_FAILED                         TRUE
  56:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
  57:ChibiOS/os/hal/osal/nil/osal.h **** 
  58:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
  59:ChibiOS/os/hal/osal/nil/osal.h **** /**
  60:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Messages
  61:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  62:ChibiOS/os/hal/osal/nil/osal.h ****  */
  63:ChibiOS/os/hal/osal/nil/osal.h **** #define MSG_OK                              RDY_OK
  64:ChibiOS/os/hal/osal/nil/osal.h **** #define MSG_RESET                           RDY_RESET
  65:ChibiOS/os/hal/osal/nil/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  66:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
  67:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  68:ChibiOS/os/hal/osal/nil/osal.h **** 
  69:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
  70:ChibiOS/os/hal/osal/nil/osal.h **** /**
  71:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Special time constants
  72:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  73:ChibiOS/os/hal/osal/nil/osal.h ****  */
  74:ChibiOS/os/hal/osal/nil/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  75:ChibiOS/os/hal/osal/nil/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  76:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
  77:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  78:ChibiOS/os/hal/osal/nil/osal.h **** 
  79:ChibiOS/os/hal/osal/nil/osal.h **** /**
  80:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Systick modes.
  81:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  82:ChibiOS/os/hal/osal/nil/osal.h ****  */
  83:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  84:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  85:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  86:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
  87:ChibiOS/os/hal/osal/nil/osal.h **** 
  88:ChibiOS/os/hal/osal/nil/osal.h **** /**
  89:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Systick parameters.
  90:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  91:ChibiOS/os/hal/osal/nil/osal.h ****  */
  92:ChibiOS/os/hal/osal/nil/osal.h **** /**
  93:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  94:ChibiOS/os/hal/osal/nil/osal.h ****  */
  95:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_RESOLUTION                  NIL_CFG_ST_RESOLUTION
  96:ChibiOS/os/hal/osal/nil/osal.h **** 
  97:ChibiOS/os/hal/osal/nil/osal.h **** /**
  98:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Required systick frequency or resolution.
  99:ChibiOS/os/hal/osal/nil/osal.h ****  */
 100:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_FREQUENCY                   NIL_CFG_ST_FREQUENCY
 101:ChibiOS/os/hal/osal/nil/osal.h **** 
 102:ChibiOS/os/hal/osal/nil/osal.h **** /**
 103:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 104:ChibiOS/os/hal/osal/nil/osal.h ****  */
 105:ChibiOS/os/hal/osal/nil/osal.h **** #if (NIL_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 106:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 107:ChibiOS/os/hal/osal/nil/osal.h **** #else
 108:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 109:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 110:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 111:ChibiOS/os/hal/osal/nil/osal.h **** 
 112:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 113:ChibiOS/os/hal/osal/nil/osal.h **** /* Module pre-compile time settings.                                         */
 114:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 115:ChibiOS/os/hal/osal/nil/osal.h **** 
 116:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 117:ChibiOS/os/hal/osal/nil/osal.h **** /* Derived constants and error checks.                                       */
 118:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 119:ChibiOS/os/hal/osal/nil/osal.h **** 
 120:ChibiOS/os/hal/osal/nil/osal.h **** #if NIL_CFG_USE_EVENTS == FALSE
 121:ChibiOS/os/hal/osal/nil/osal.h **** #error "OSAL requires NIL_CFG_USE_EVENTS=TRUE"
 122:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 123:ChibiOS/os/hal/osal/nil/osal.h **** 
 124:ChibiOS/os/hal/osal/nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 125:ChibiOS/os/hal/osal/nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 126:ChibiOS/os/hal/osal/nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 127:ChibiOS/os/hal/osal/nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 128:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 129:ChibiOS/os/hal/osal/nil/osal.h **** 
 130:ChibiOS/os/hal/osal/nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 131:ChibiOS/os/hal/osal/nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 132:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 133:ChibiOS/os/hal/osal/nil/osal.h **** 
 134:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 135:ChibiOS/os/hal/osal/nil/osal.h **** /* Module data structures and types.                                         */
 136:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 137:ChibiOS/os/hal/osal/nil/osal.h **** 
 138:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 139:ChibiOS/os/hal/osal/nil/osal.h **** /**
 140:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a system status word.
 141:ChibiOS/os/hal/osal/nil/osal.h ****  */
 142:ChibiOS/os/hal/osal/nil/osal.h **** typedef uint32_t syssts_t;
 143:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 144:ChibiOS/os/hal/osal/nil/osal.h **** 
 145:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 146:ChibiOS/os/hal/osal/nil/osal.h **** /**
 147:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a message.
 148:ChibiOS/os/hal/osal/nil/osal.h ****  */
 149:ChibiOS/os/hal/osal/nil/osal.h **** typedef int32_t msg_t;
 150:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 151:ChibiOS/os/hal/osal/nil/osal.h **** 
 152:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 153:ChibiOS/os/hal/osal/nil/osal.h **** /**
 154:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of system time counter.
 155:ChibiOS/os/hal/osal/nil/osal.h ****  */
 156:ChibiOS/os/hal/osal/nil/osal.h **** typedef uint32_t systime_t;
 157:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 158:ChibiOS/os/hal/osal/nil/osal.h **** 
 159:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 160:ChibiOS/os/hal/osal/nil/osal.h **** /**
 161:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of realtime counter.
 162:ChibiOS/os/hal/osal/nil/osal.h ****  */
 163:ChibiOS/os/hal/osal/nil/osal.h **** typedef uint32_t rtcnt_t;
 164:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 165:ChibiOS/os/hal/osal/nil/osal.h **** 
 166:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 167:ChibiOS/os/hal/osal/nil/osal.h **** /**
 168:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a thread reference.
 169:ChibiOS/os/hal/osal/nil/osal.h ****  */
 170:ChibiOS/os/hal/osal/nil/osal.h **** typedef thread_t * thread_reference_t;
 171:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 172:ChibiOS/os/hal/osal/nil/osal.h **** 
 173:ChibiOS/os/hal/osal/nil/osal.h **** /**
 174:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of an event flags object.
 175:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:ChibiOS/os/hal/osal/nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:ChibiOS/os/hal/osal/nil/osal.h ****  *          an entirely different way.
 178:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:ChibiOS/os/hal/osal/nil/osal.h ****  *          API and are implementation-dependent.
 180:ChibiOS/os/hal/osal/nil/osal.h ****  */
 181:ChibiOS/os/hal/osal/nil/osal.h **** typedef struct event_source event_source_t;
 182:ChibiOS/os/hal/osal/nil/osal.h **** 
 183:ChibiOS/os/hal/osal/nil/osal.h **** /**
 184:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of an event source callback.
 185:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 186:ChibiOS/os/hal/osal/nil/osal.h ****  *          exclusively as an example and for convenience.
 187:ChibiOS/os/hal/osal/nil/osal.h ****  */
 188:ChibiOS/os/hal/osal/nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *p);
 189:ChibiOS/os/hal/osal/nil/osal.h **** 
 190:ChibiOS/os/hal/osal/nil/osal.h **** /**
 191:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of an event flags mask.
 192:ChibiOS/os/hal/osal/nil/osal.h ****  */
 193:ChibiOS/os/hal/osal/nil/osal.h **** typedef uint32_t eventflags_t;
 194:ChibiOS/os/hal/osal/nil/osal.h **** 
 195:ChibiOS/os/hal/osal/nil/osal.h **** /**
 196:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Events source object.
 197:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 198:ChibiOS/os/hal/osal/nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 199:ChibiOS/os/hal/osal/nil/osal.h ****  *          an entirely different way.
 200:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 201:ChibiOS/os/hal/osal/nil/osal.h ****  *          API and are implementation-dependent.
 202:ChibiOS/os/hal/osal/nil/osal.h ****  */
 203:ChibiOS/os/hal/osal/nil/osal.h **** struct event_source {
 204:ChibiOS/os/hal/osal/nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 205:ChibiOS/os/hal/osal/nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 206:ChibiOS/os/hal/osal/nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 207:ChibiOS/os/hal/osal/nil/osal.h **** };
 208:ChibiOS/os/hal/osal/nil/osal.h **** 
 209:ChibiOS/os/hal/osal/nil/osal.h **** /**
 210:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a mutex.
 211:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 212:ChibiOS/os/hal/osal/nil/osal.h ****  *          mechanism can be simulated.
 213:ChibiOS/os/hal/osal/nil/osal.h ****  */
 214:ChibiOS/os/hal/osal/nil/osal.h **** typedef semaphore_t mutex_t;
 215:ChibiOS/os/hal/osal/nil/osal.h **** 
 216:ChibiOS/os/hal/osal/nil/osal.h **** /**
 217:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a thread queue.
 218:ChibiOS/os/hal/osal/nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 219:ChibiOS/os/hal/osal/nil/osal.h ****  *          can be dequeued one at time or all together.
 220:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 221:ChibiOS/os/hal/osal/nil/osal.h ****  *          because there are no real threads.
 222:ChibiOS/os/hal/osal/nil/osal.h ****  */
 223:ChibiOS/os/hal/osal/nil/osal.h **** typedef struct {
 224:ChibiOS/os/hal/osal/nil/osal.h ****   semaphore_t   sem;
 225:ChibiOS/os/hal/osal/nil/osal.h **** } threads_queue_t;
 226:ChibiOS/os/hal/osal/nil/osal.h **** 
 227:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 228:ChibiOS/os/hal/osal/nil/osal.h **** /* Module macros.                                                            */
 229:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 230:ChibiOS/os/hal/osal/nil/osal.h **** 
 231:ChibiOS/os/hal/osal/nil/osal.h **** /**
 232:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Debug related macros
 233:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 234:ChibiOS/os/hal/osal/nil/osal.h ****  */
 235:ChibiOS/os/hal/osal/nil/osal.h **** /**
 236:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Condition assertion.
 237:ChibiOS/os/hal/osal/nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 238:ChibiOS/os/hal/osal/nil/osal.h ****  *          message and halts.
 239:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 240:ChibiOS/os/hal/osal/nil/osal.h ****  *          switch is enabled.
 241:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 242:ChibiOS/os/hal/osal/nil/osal.h ****  *          comment in the code about the assertion.
 243:ChibiOS/os/hal/osal/nil/osal.h ****  *
 244:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 245:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] remark    a remark string
 246:ChibiOS/os/hal/osal/nil/osal.h ****  *
 247:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 248:ChibiOS/os/hal/osal/nil/osal.h ****  */
 249:ChibiOS/os/hal/osal/nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 250:ChibiOS/os/hal/osal/nil/osal.h **** 
 251:ChibiOS/os/hal/osal/nil/osal.h **** /**
 252:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Function parameters check.
 253:ChibiOS/os/hal/osal/nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 254:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 255:ChibiOS/os/hal/osal/nil/osal.h ****  *          is enabled.
 256:ChibiOS/os/hal/osal/nil/osal.h ****  *
 257:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 258:ChibiOS/os/hal/osal/nil/osal.h ****  *
 259:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 260:ChibiOS/os/hal/osal/nil/osal.h ****  */
 261:ChibiOS/os/hal/osal/nil/osal.h **** #define osalDbgCheck(c) chDbgAssert(c, "parameter check")
 262:ChibiOS/os/hal/osal/nil/osal.h **** 
 263:ChibiOS/os/hal/osal/nil/osal.h **** /**
 264:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   I-Class state check.
 265:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 266:ChibiOS/os/hal/osal/nil/osal.h ****  */
 267:ChibiOS/os/hal/osal/nil/osal.h **** #define osalDbgCheckClassI() /*chDbgCheckClassI()*/
 268:ChibiOS/os/hal/osal/nil/osal.h **** 
 269:ChibiOS/os/hal/osal/nil/osal.h **** /**
 270:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   S-Class state check.
 271:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 272:ChibiOS/os/hal/osal/nil/osal.h ****  */
 273:ChibiOS/os/hal/osal/nil/osal.h **** #define osalDbgCheckClassS() /*chDbgCheckClassS()*/
 274:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 275:ChibiOS/os/hal/osal/nil/osal.h **** 
 276:ChibiOS/os/hal/osal/nil/osal.h **** /**
 277:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    IRQ service routines wrappers
 278:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 279:ChibiOS/os/hal/osal/nil/osal.h ****  */
 280:ChibiOS/os/hal/osal/nil/osal.h **** /**
 281:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Priority level verification macro.
 282:ChibiOS/os/hal/osal/nil/osal.h ****  */
 283:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 284:ChibiOS/os/hal/osal/nil/osal.h **** 
 285:ChibiOS/os/hal/osal/nil/osal.h **** /**
 286:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   IRQ prologue code.
 287:ChibiOS/os/hal/osal/nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 288:ChibiOS/os/hal/osal/nil/osal.h ****  */
 289:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 290:ChibiOS/os/hal/osal/nil/osal.h **** 
 291:ChibiOS/os/hal/osal/nil/osal.h **** /**
 292:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   IRQ epilogue code.
 293:ChibiOS/os/hal/osal/nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 294:ChibiOS/os/hal/osal/nil/osal.h ****  */
 295:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 296:ChibiOS/os/hal/osal/nil/osal.h **** 
 297:ChibiOS/os/hal/osal/nil/osal.h **** /**
 298:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   IRQ handler function declaration.
 299:ChibiOS/os/hal/osal/nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 300:ChibiOS/os/hal/osal/nil/osal.h ****  *
 301:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 302:ChibiOS/os/hal/osal/nil/osal.h ****  */
 303:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 304:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 305:ChibiOS/os/hal/osal/nil/osal.h **** 
 306:ChibiOS/os/hal/osal/nil/osal.h **** /**
 307:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Time conversion utilities
 308:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 309:ChibiOS/os/hal/osal/nil/osal.h ****  */
 310:ChibiOS/os/hal/osal/nil/osal.h **** /**
 311:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Seconds to system ticks.
 312:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from seconds to system ticks number.
 313:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 314:ChibiOS/os/hal/osal/nil/osal.h ****  *
 315:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] sec       number of seconds
 316:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of ticks.
 317:ChibiOS/os/hal/osal/nil/osal.h ****  *
 318:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 319:ChibiOS/os/hal/osal/nil/osal.h ****  */
 320:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 321:ChibiOS/os/hal/osal/nil/osal.h **** 
 322:ChibiOS/os/hal/osal/nil/osal.h **** /**
 323:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Milliseconds to system ticks.
 324:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 325:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 326:ChibiOS/os/hal/osal/nil/osal.h ****  *
 327:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msec      number of milliseconds
 328:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of ticks.
 329:ChibiOS/os/hal/osal/nil/osal.h ****  *
 330:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 331:ChibiOS/os/hal/osal/nil/osal.h ****  */
 332:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 333:ChibiOS/os/hal/osal/nil/osal.h **** 
 334:ChibiOS/os/hal/osal/nil/osal.h **** /**
 335:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Microseconds to system ticks.
 336:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 337:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 338:ChibiOS/os/hal/osal/nil/osal.h ****  *
 339:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] usec      number of microseconds
 340:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of ticks.
 341:ChibiOS/os/hal/osal/nil/osal.h ****  *
 342:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 343:ChibiOS/os/hal/osal/nil/osal.h ****  */
 344:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 345:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 346:ChibiOS/os/hal/osal/nil/osal.h **** 
 347:ChibiOS/os/hal/osal/nil/osal.h **** /**
 348:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 349:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 350:ChibiOS/os/hal/osal/nil/osal.h ****  */
 351:ChibiOS/os/hal/osal/nil/osal.h **** /**
 352:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Seconds to realtime counter.
 353:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 354:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 355:ChibiOS/os/hal/osal/nil/osal.h ****  *
 356:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 357:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] sec       number of seconds
 358:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of cycles.
 359:ChibiOS/os/hal/osal/nil/osal.h ****  *
 360:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 361:ChibiOS/os/hal/osal/nil/osal.h ****  */
 362:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 363:ChibiOS/os/hal/osal/nil/osal.h **** 
 364:ChibiOS/os/hal/osal/nil/osal.h **** /**
 365:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 366:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 367:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 368:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 369:ChibiOS/os/hal/osal/nil/osal.h ****  *
 370:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 371:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msec      number of milliseconds
 372:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of cycles.
 373:ChibiOS/os/hal/osal/nil/osal.h ****  *
 374:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 375:ChibiOS/os/hal/osal/nil/osal.h ****  */
 376:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 377:ChibiOS/os/hal/osal/nil/osal.h **** 
 378:ChibiOS/os/hal/osal/nil/osal.h **** /**
 379:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Microseconds to realtime counter.
 380:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 381:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 382:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 383:ChibiOS/os/hal/osal/nil/osal.h ****  *
 384:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 385:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] usec      number of microseconds
 386:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of cycles.
 387:ChibiOS/os/hal/osal/nil/osal.h ****  *
 388:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 389:ChibiOS/os/hal/osal/nil/osal.h ****  */
 390:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 391:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 392:ChibiOS/os/hal/osal/nil/osal.h **** 
 393:ChibiOS/os/hal/osal/nil/osal.h **** /**
 394:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Sleep macros using absolute time
 395:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 396:ChibiOS/os/hal/osal/nil/osal.h ****  */
 397:ChibiOS/os/hal/osal/nil/osal.h **** /**
 398:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 399:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 400:ChibiOS/os/hal/osal/nil/osal.h ****  *          system tick clock.
 401:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 402:ChibiOS/os/hal/osal/nil/osal.h ****  *
 403:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 404:ChibiOS/os/hal/osal/nil/osal.h ****  *
 405:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 406:ChibiOS/os/hal/osal/nil/osal.h ****  */
 407:ChibiOS/os/hal/osal/nil/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 408:ChibiOS/os/hal/osal/nil/osal.h **** 
 409:ChibiOS/os/hal/osal/nil/osal.h **** /**
 410:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 411:ChibiOS/os/hal/osal/nil/osal.h ****  *          milliseconds.
 412:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 413:ChibiOS/os/hal/osal/nil/osal.h ****  *          system tick clock.
 414:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 415:ChibiOS/os/hal/osal/nil/osal.h ****  *
 416:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 417:ChibiOS/os/hal/osal/nil/osal.h ****  *
 418:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 419:ChibiOS/os/hal/osal/nil/osal.h ****  */
 420:ChibiOS/os/hal/osal/nil/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 421:ChibiOS/os/hal/osal/nil/osal.h **** 
 422:ChibiOS/os/hal/osal/nil/osal.h **** /**
 423:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 424:ChibiOS/os/hal/osal/nil/osal.h ****  *          microseconds.
 425:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 426:ChibiOS/os/hal/osal/nil/osal.h ****  *          system tick clock.
 427:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 428:ChibiOS/os/hal/osal/nil/osal.h ****  *
 429:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 430:ChibiOS/os/hal/osal/nil/osal.h ****  *
 431:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 432:ChibiOS/os/hal/osal/nil/osal.h ****  */
 433:ChibiOS/os/hal/osal/nil/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 434:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 435:ChibiOS/os/hal/osal/nil/osal.h **** 
 436:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 437:ChibiOS/os/hal/osal/nil/osal.h **** /* External declarations.                                                    */
 438:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 439:ChibiOS/os/hal/osal/nil/osal.h **** 
 440:ChibiOS/os/hal/osal/nil/osal.h **** #ifdef __cplusplus
 441:ChibiOS/os/hal/osal/nil/osal.h **** extern "C" {
 442:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 443:ChibiOS/os/hal/osal/nil/osal.h ****   void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg);
 444:ChibiOS/os/hal/osal/nil/osal.h ****   void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg);
 445:ChibiOS/os/hal/osal/nil/osal.h **** #ifdef __cplusplus
 446:ChibiOS/os/hal/osal/nil/osal.h **** }
 447:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 448:ChibiOS/os/hal/osal/nil/osal.h **** 
 449:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 450:ChibiOS/os/hal/osal/nil/osal.h **** /* Module inline functions.                                                  */
 451:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 452:ChibiOS/os/hal/osal/nil/osal.h **** 
 453:ChibiOS/os/hal/osal/nil/osal.h **** /**
 454:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   OSAL module initialization.
 455:ChibiOS/os/hal/osal/nil/osal.h ****  *
 456:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 457:ChibiOS/os/hal/osal/nil/osal.h ****  */
 458:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalInit(void) {
 459:ChibiOS/os/hal/osal/nil/osal.h **** 
 460:ChibiOS/os/hal/osal/nil/osal.h **** }
 461:ChibiOS/os/hal/osal/nil/osal.h **** 
 462:ChibiOS/os/hal/osal/nil/osal.h **** /**
 463:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   System halt with error message.
 464:ChibiOS/os/hal/osal/nil/osal.h ****  *
 465:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] reason    the halt message pointer
 466:ChibiOS/os/hal/osal/nil/osal.h ****  *
 467:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 468:ChibiOS/os/hal/osal/nil/osal.h ****  */
 469:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 470:ChibiOS/os/hal/osal/nil/osal.h **** 
 471:ChibiOS/os/hal/osal/nil/osal.h ****   chSysHalt(reason);
 472:ChibiOS/os/hal/osal/nil/osal.h **** }
 473:ChibiOS/os/hal/osal/nil/osal.h **** 
 474:ChibiOS/os/hal/osal/nil/osal.h **** /**
 475:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Disables interrupts globally.
 476:ChibiOS/os/hal/osal/nil/osal.h ****  *
 477:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 478:ChibiOS/os/hal/osal/nil/osal.h ****  */
 479:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysDisable(void) {
 480:ChibiOS/os/hal/osal/nil/osal.h **** 
 481:ChibiOS/os/hal/osal/nil/osal.h ****   chSysDisable();
 482:ChibiOS/os/hal/osal/nil/osal.h **** }
 483:ChibiOS/os/hal/osal/nil/osal.h **** 
 484:ChibiOS/os/hal/osal/nil/osal.h **** /**
 485:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Enables interrupts globally.
 486:ChibiOS/os/hal/osal/nil/osal.h ****  *
 487:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 488:ChibiOS/os/hal/osal/nil/osal.h ****  */
 489:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysEnable(void) {
 490:ChibiOS/os/hal/osal/nil/osal.h **** 
 491:ChibiOS/os/hal/osal/nil/osal.h ****   chSysEnable();
 492:ChibiOS/os/hal/osal/nil/osal.h **** }
 493:ChibiOS/os/hal/osal/nil/osal.h **** 
 494:ChibiOS/os/hal/osal/nil/osal.h **** /**
 495:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 496:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 497:ChibiOS/os/hal/osal/nil/osal.h ****  *
 498:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 499:ChibiOS/os/hal/osal/nil/osal.h ****  */
 500:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysLock(void) {
 501:ChibiOS/os/hal/osal/nil/osal.h **** 
 502:ChibiOS/os/hal/osal/nil/osal.h ****   chSysLock();
 503:ChibiOS/os/hal/osal/nil/osal.h **** }
 504:ChibiOS/os/hal/osal/nil/osal.h **** 
 505:ChibiOS/os/hal/osal/nil/osal.h **** /**
 506:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 507:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 508:ChibiOS/os/hal/osal/nil/osal.h ****  *
 509:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 510:ChibiOS/os/hal/osal/nil/osal.h ****  */
 511:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysUnlock(void) {
 512:ChibiOS/os/hal/osal/nil/osal.h **** 
 513:ChibiOS/os/hal/osal/nil/osal.h ****   chSysUnlock();
 514:ChibiOS/os/hal/osal/nil/osal.h **** }
 515:ChibiOS/os/hal/osal/nil/osal.h **** 
 516:ChibiOS/os/hal/osal/nil/osal.h **** /**
 517:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 518:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 519:ChibiOS/os/hal/osal/nil/osal.h ****  *
 520:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 521:ChibiOS/os/hal/osal/nil/osal.h ****  */
 522:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysLockFromISR(void) {
 523:ChibiOS/os/hal/osal/nil/osal.h **** 
 524:ChibiOS/os/hal/osal/nil/osal.h ****   chSysLockFromISR();
 525:ChibiOS/os/hal/osal/nil/osal.h **** }
 526:ChibiOS/os/hal/osal/nil/osal.h **** 
 527:ChibiOS/os/hal/osal/nil/osal.h **** /**
 528:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 529:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 530:ChibiOS/os/hal/osal/nil/osal.h ****  *
 531:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 532:ChibiOS/os/hal/osal/nil/osal.h ****  */
 533:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 534:ChibiOS/os/hal/osal/nil/osal.h **** 
 535:ChibiOS/os/hal/osal/nil/osal.h ****   chSysUnlockFromISR();
 536:ChibiOS/os/hal/osal/nil/osal.h **** }
 537:ChibiOS/os/hal/osal/nil/osal.h **** 
 538:ChibiOS/os/hal/osal/nil/osal.h **** /**
 539:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 540:ChibiOS/os/hal/osal/nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 541:ChibiOS/os/hal/osal/nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 542:ChibiOS/os/hal/osal/nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 543:ChibiOS/os/hal/osal/nil/osal.h ****  *          is known.
 544:ChibiOS/os/hal/osal/nil/osal.h ****  * @post    The system is in a critical zone.
 545:ChibiOS/os/hal/osal/nil/osal.h ****  *
 546:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The previous system status, the encoding of this
 547:ChibiOS/os/hal/osal/nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 548:ChibiOS/os/hal/osal/nil/osal.h ****  *
 549:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 550:ChibiOS/os/hal/osal/nil/osal.h ****  */
 551:ChibiOS/os/hal/osal/nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 552:ChibiOS/os/hal/osal/nil/osal.h **** 
 553:ChibiOS/os/hal/osal/nil/osal.h ****   return chSysGetStatusAndLockX();
 554:ChibiOS/os/hal/osal/nil/osal.h **** }
 555:ChibiOS/os/hal/osal/nil/osal.h **** 
 556:ChibiOS/os/hal/osal/nil/osal.h **** /**
 557:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 558:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 559:ChibiOS/os/hal/osal/nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 560:ChibiOS/os/hal/osal/nil/osal.h ****  *
 561:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] sts       the system status to be restored.
 562:ChibiOS/os/hal/osal/nil/osal.h ****  *
 563:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 564:ChibiOS/os/hal/osal/nil/osal.h ****  */
 565:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 566:ChibiOS/os/hal/osal/nil/osal.h **** 
 567:ChibiOS/os/hal/osal/nil/osal.h ****   chSysRestoreStatusX(sts);
 568:ChibiOS/os/hal/osal/nil/osal.h **** }
 569:ChibiOS/os/hal/osal/nil/osal.h **** 
 570:ChibiOS/os/hal/osal/nil/osal.h **** /**
 571:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Polled delay.
 572:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 573:ChibiOS/os/hal/osal/nil/osal.h ****  *          value.
 574:ChibiOS/os/hal/osal/nil/osal.h ****  *
 575:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] cycles    number of cycles
 576:ChibiOS/os/hal/osal/nil/osal.h ****  *
 577:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 578:ChibiOS/os/hal/osal/nil/osal.h ****  */
 579:ChibiOS/os/hal/osal/nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 580:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 581:ChibiOS/os/hal/osal/nil/osal.h **** 
 582:ChibiOS/os/hal/osal/nil/osal.h ****   chSysPolledDelayX(cycles);
 583:ChibiOS/os/hal/osal/nil/osal.h **** }
 584:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 585:ChibiOS/os/hal/osal/nil/osal.h **** 
 586:ChibiOS/os/hal/osal/nil/osal.h **** /**
 587:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 588:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 589:ChibiOS/os/hal/osal/nil/osal.h ****  *          service from the HAL.
 590:ChibiOS/os/hal/osal/nil/osal.h ****  */
 591:ChibiOS/os/hal/osal/nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 592:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 593:ChibiOS/os/hal/osal/nil/osal.h **** 
 594:ChibiOS/os/hal/osal/nil/osal.h ****   chSysTimerHandlerI();
 595:ChibiOS/os/hal/osal/nil/osal.h **** }
 596:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 597:ChibiOS/os/hal/osal/nil/osal.h **** 
 598:ChibiOS/os/hal/osal/nil/osal.h **** /**
 599:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 600:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 601:ChibiOS/os/hal/osal/nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 602:ChibiOS/os/hal/osal/nil/osal.h ****  *          required in this scenario.
 603:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 604:ChibiOS/os/hal/osal/nil/osal.h ****  *
 605:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 606:ChibiOS/os/hal/osal/nil/osal.h ****  */
 607:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalOsRescheduleS(void) {
 608:ChibiOS/os/hal/osal/nil/osal.h **** 
 609:ChibiOS/os/hal/osal/nil/osal.h ****   chSchRescheduleS();
 610:ChibiOS/os/hal/osal/nil/osal.h **** }
 611:ChibiOS/os/hal/osal/nil/osal.h **** 
 612:ChibiOS/os/hal/osal/nil/osal.h **** /**
 613:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Current system time.
 614:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 615:ChibiOS/os/hal/osal/nil/osal.h ****  *          invocation.
 616:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 617:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 618:ChibiOS/os/hal/osal/nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 619:ChibiOS/os/hal/osal/nil/osal.h ****  *          @p systime_t size.
 620:ChibiOS/os/hal/osal/nil/osal.h ****  *
 621:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The system time in ticks.
 622:ChibiOS/os/hal/osal/nil/osal.h ****  *
 623:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 624:ChibiOS/os/hal/osal/nil/osal.h ****  */
 625:ChibiOS/os/hal/osal/nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 626:ChibiOS/os/hal/osal/nil/osal.h **** 
 627:ChibiOS/os/hal/osal/nil/osal.h ****   return chVTGetSystemTimeX();
 628:ChibiOS/os/hal/osal/nil/osal.h **** }
 629:ChibiOS/os/hal/osal/nil/osal.h **** 
 630:ChibiOS/os/hal/osal/nil/osal.h **** /**
 631:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 632:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    When start==end then the function returns always true because the
 633:ChibiOS/os/hal/osal/nil/osal.h ****  *          whole time range is specified.
 634:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function can be called from any context.
 635:ChibiOS/os/hal/osal/nil/osal.h ****  *
 636:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] time      the time to be verified
 637:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 638:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 639:ChibiOS/os/hal/osal/nil/osal.h ****  * @retval true         current time within the specified time window.
 640:ChibiOS/os/hal/osal/nil/osal.h ****  * @retval false        current time not within the specified time window.
 641:ChibiOS/os/hal/osal/nil/osal.h ****  *
 642:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 643:ChibiOS/os/hal/osal/nil/osal.h ****  */
 644:ChibiOS/os/hal/osal/nil/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 645:ChibiOS/os/hal/osal/nil/osal.h ****                                        systime_t start,
 646:ChibiOS/os/hal/osal/nil/osal.h ****                                        systime_t end) {
 647:ChibiOS/os/hal/osal/nil/osal.h **** 
 648:ChibiOS/os/hal/osal/nil/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 649:ChibiOS/os/hal/osal/nil/osal.h **** }
 650:ChibiOS/os/hal/osal/nil/osal.h **** 
 651:ChibiOS/os/hal/osal/nil/osal.h **** /**
 652:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 653:ChibiOS/os/hal/osal/nil/osal.h ****  *
 654:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 655:ChibiOS/os/hal/osal/nil/osal.h ****  *                      handled as follow:
 656:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 657:ChibiOS/os/hal/osal/nil/osal.h ****  *                        normal time specification.
 658:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 659:ChibiOS/os/hal/osal/nil/osal.h ****  *                      .
 660:ChibiOS/os/hal/osal/nil/osal.h ****  *
 661:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 662:ChibiOS/os/hal/osal/nil/osal.h ****  */
 663:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 664:ChibiOS/os/hal/osal/nil/osal.h **** 
 665:ChibiOS/os/hal/osal/nil/osal.h ****   chThdSleepS(time);
 666:ChibiOS/os/hal/osal/nil/osal.h **** }
 667:ChibiOS/os/hal/osal/nil/osal.h **** 
 668:ChibiOS/os/hal/osal/nil/osal.h **** /**
 669:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 670:ChibiOS/os/hal/osal/nil/osal.h ****  *
 671:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 672:ChibiOS/os/hal/osal/nil/osal.h ****  *                      handled as follow:
 673:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 674:ChibiOS/os/hal/osal/nil/osal.h ****  *                        normal time specification.
 675:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 676:ChibiOS/os/hal/osal/nil/osal.h ****  *                      .
 677:ChibiOS/os/hal/osal/nil/osal.h ****  *
 678:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 679:ChibiOS/os/hal/osal/nil/osal.h ****  */
 680:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadSleep(systime_t time) {
 681:ChibiOS/os/hal/osal/nil/osal.h **** 
 682:ChibiOS/os/hal/osal/nil/osal.h ****   chThdSleep(time);
 683:ChibiOS/os/hal/osal/nil/osal.h **** }
 684:ChibiOS/os/hal/osal/nil/osal.h **** 
 685:ChibiOS/os/hal/osal/nil/osal.h **** /**
 686:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 687:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 688:ChibiOS/os/hal/osal/nil/osal.h ****  *          context.
 689:ChibiOS/os/hal/osal/nil/osal.h ****  *
 690:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 691:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The wake up message.
 692:ChibiOS/os/hal/osal/nil/osal.h ****  *
 693:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 694:ChibiOS/os/hal/osal/nil/osal.h ****  */
 695:ChibiOS/os/hal/osal/nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 696:ChibiOS/os/hal/osal/nil/osal.h **** 
 697:ChibiOS/os/hal/osal/nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 698:ChibiOS/os/hal/osal/nil/osal.h **** }
 699:ChibiOS/os/hal/osal/nil/osal.h **** 
 700:ChibiOS/os/hal/osal/nil/osal.h **** /**
 701:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 702:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 703:ChibiOS/os/hal/osal/nil/osal.h ****  *          context.
 704:ChibiOS/os/hal/osal/nil/osal.h ****  *
 705:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 706:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 707:ChibiOS/os/hal/osal/nil/osal.h ****  *                      handled as follow:
 708:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 709:ChibiOS/os/hal/osal/nil/osal.h ****  *                        state.
 710:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 711:ChibiOS/os/hal/osal/nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 712:ChibiOS/os/hal/osal/nil/osal.h ****  *                        occurred.
 713:ChibiOS/os/hal/osal/nil/osal.h ****  *                      .
 714:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The wake up message.
 715:ChibiOS/os/hal/osal/nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 716:ChibiOS/os/hal/osal/nil/osal.h ****  *
 717:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 718:ChibiOS/os/hal/osal/nil/osal.h ****  */
 719:ChibiOS/os/hal/osal/nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 720:ChibiOS/os/hal/osal/nil/osal.h ****                                               systime_t timeout) {
 721:ChibiOS/os/hal/osal/nil/osal.h **** 
 722:ChibiOS/os/hal/osal/nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 723:ChibiOS/os/hal/osal/nil/osal.h **** }
 724:ChibiOS/os/hal/osal/nil/osal.h **** 
 725:ChibiOS/os/hal/osal/nil/osal.h **** /**
 726:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 727:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 728:ChibiOS/os/hal/osal/nil/osal.h ****  *          ISR context.
 729:ChibiOS/os/hal/osal/nil/osal.h ****  *
 730:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 731:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msg       the message code
 732:ChibiOS/os/hal/osal/nil/osal.h ****  *
 733:ChibiOS/os/hal/osal/nil/osal.h ****  * @iclass
 734:ChibiOS/os/hal/osal/nil/osal.h ****  */
 735:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 736:ChibiOS/os/hal/osal/nil/osal.h **** 
 737:ChibiOS/os/hal/osal/nil/osal.h ****   chThdResumeI(trp, msg);
 738:ChibiOS/os/hal/osal/nil/osal.h **** }
 739:ChibiOS/os/hal/osal/nil/osal.h **** 
 740:ChibiOS/os/hal/osal/nil/osal.h **** /**
 741:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 742:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 743:ChibiOS/os/hal/osal/nil/osal.h ****  *          context.
 744:ChibiOS/os/hal/osal/nil/osal.h ****  *
 745:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 746:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msg       the message code
 747:ChibiOS/os/hal/osal/nil/osal.h ****  *
 748:ChibiOS/os/hal/osal/nil/osal.h ****  * @iclass
 749:ChibiOS/os/hal/osal/nil/osal.h ****  */
 750:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 751:ChibiOS/os/hal/osal/nil/osal.h **** 
 752:ChibiOS/os/hal/osal/nil/osal.h ****   chThdResumeI(trp, msg);
 753:ChibiOS/os/hal/osal/nil/osal.h ****   chSchRescheduleS();
 754:ChibiOS/os/hal/osal/nil/osal.h **** }
 755:ChibiOS/os/hal/osal/nil/osal.h **** 
 756:ChibiOS/os/hal/osal/nil/osal.h **** /**
 757:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Initializes a threads queue object.
 758:ChibiOS/os/hal/osal/nil/osal.h ****  *
 759:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 760:ChibiOS/os/hal/osal/nil/osal.h ****  *
 761:ChibiOS/os/hal/osal/nil/osal.h ****  * @init
 762:ChibiOS/os/hal/osal/nil/osal.h ****  */
 763:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 764:ChibiOS/os/hal/osal/nil/osal.h **** 
 765:ChibiOS/os/hal/osal/nil/osal.h ****   chSemObjectInit(&tqp->sem, (cnt_t)0);
  36               		.loc 2 765 0
  37 0006 1082      		st Z,__zero_reg__
  38               	.LBE77:
  39               	.LBE76:
  60:ChibiOS/os/hal/src/hal_queues.c **** 
  61:ChibiOS/os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&iqp->q_waiting);
  62:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
  40               		.loc 1 62 0
  41 0008 1282      		std Z+2,__zero_reg__
  42 000a 1182      		std Z+1,__zero_reg__
  63:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
  43               		.loc 1 63 0
  44 000c 7483      		std Z+4,r23
  45 000e 6383      		std Z+3,r22
  64:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_rdptr   = bp;
  46               		.loc 1 64 0
  47 0010 7287      		std Z+10,r23
  48 0012 6187      		std Z+9,r22
  65:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_wrptr   = bp;
  49               		.loc 1 65 0
  50 0014 7087      		std Z+8,r23
  51 0016 6783      		std Z+7,r22
  66:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_top     = bp + size;
  52               		.loc 1 66 0
  53 0018 640F      		add r22,r20
  54 001a 751F      		adc r23,r21
  55               	.LVL2:
  56 001c 7683      		std Z+6,r23
  57 001e 6583      		std Z+5,r22
  67:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_notify  = infy;
  58               		.loc 1 67 0
  59 0020 3487      		std Z+12,r19
  60 0022 2387      		std Z+11,r18
  68:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_link    = link;
  61               		.loc 1 68 0
  62 0024 1687      		std Z+14,r17
  63 0026 0587      		std Z+13,r16
  64               	/* epilogue start */
  69:ChibiOS/os/hal/src/hal_queues.c **** }
  65               		.loc 1 69 0
  66 0028 1F91      		pop r17
  67 002a 0F91      		pop r16
  68               	.LVL3:
  69 002c 0895      		ret
  70               		.cfi_endproc
  71               	.LFE53:
  73               		.section	.text.iqResetI,"ax",@progbits
  74               	.global	iqResetI
  76               	iqResetI:
  77               	.LFB54:
  70:ChibiOS/os/hal/src/hal_queues.c **** 
  71:ChibiOS/os/hal/src/hal_queues.c **** /**
  72:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Resets an input queue.
  73:ChibiOS/os/hal/src/hal_queues.c ****  * @details All the data in the input queue is erased and lost, any waiting
  74:ChibiOS/os/hal/src/hal_queues.c ****  *          thread is resumed with status @p Q_RESET.
  75:ChibiOS/os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
  76:ChibiOS/os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
  77:ChibiOS/os/hal/src/hal_queues.c ****  *
  78:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  79:ChibiOS/os/hal/src/hal_queues.c ****  *
  80:ChibiOS/os/hal/src/hal_queues.c ****  * @iclass
  81:ChibiOS/os/hal/src/hal_queues.c ****  */
  82:ChibiOS/os/hal/src/hal_queues.c **** void iqResetI(input_queue_t *iqp) {
  78               		.loc 1 82 0
  79               		.cfi_startproc
  80               	.LVL4:
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  83               	/* stack size = 0 */
  84               	.L__stack_usage = 0
  83:ChibiOS/os/hal/src/hal_queues.c **** 
  84:ChibiOS/os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
  85:ChibiOS/os/hal/src/hal_queues.c **** 
  86:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_rdptr = iqp->q_buffer;
  85               		.loc 1 86 0
  86 0000 FC01      		movw r30,r24
  87 0002 2381      		ldd r18,Z+3
  88 0004 3481      		ldd r19,Z+4
  89 0006 3287      		std Z+10,r19
  90 0008 2187      		std Z+9,r18
  87:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_wrptr = iqp->q_buffer;
  91               		.loc 1 87 0
  92 000a 3087      		std Z+8,r19
  93 000c 2783      		std Z+7,r18
  88:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
  94               		.loc 1 88 0
  95 000e 1282      		std Z+2,__zero_reg__
  96 0010 1182      		std Z+1,__zero_reg__
  89:ChibiOS/os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&iqp->q_waiting, Q_RESET);
  97               		.loc 1 89 0
  98 0012 6EEF      		ldi r22,lo8(-2)
  99 0014 7FEF      		ldi r23,lo8(-1)
 100 0016 0C94 0000 		jmp osalThreadDequeueAllI
 101               	.LVL5:
 102               		.cfi_endproc
 103               	.LFE54:
 105               		.section	.text.iqPutI,"ax",@progbits
 106               	.global	iqPutI
 108               	iqPutI:
 109               	.LFB55:
  90:ChibiOS/os/hal/src/hal_queues.c **** }
  91:ChibiOS/os/hal/src/hal_queues.c **** 
  92:ChibiOS/os/hal/src/hal_queues.c **** /**
  93:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Input queue write.
  94:ChibiOS/os/hal/src/hal_queues.c ****  * @details A byte value is written into the low end of an input queue.
  95:ChibiOS/os/hal/src/hal_queues.c ****  *
  96:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  97:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
  98:ChibiOS/os/hal/src/hal_queues.c ****  * @return              The operation status.
  99:ChibiOS/os/hal/src/hal_queues.c ****  * @retval Q_OK         if the operation has been completed with success.
 100:ChibiOS/os/hal/src/hal_queues.c ****  * @retval Q_FULL       if the queue is full and the operation cannot be
 101:ChibiOS/os/hal/src/hal_queues.c ****  *                      completed.
 102:ChibiOS/os/hal/src/hal_queues.c ****  *
 103:ChibiOS/os/hal/src/hal_queues.c ****  * @iclass
 104:ChibiOS/os/hal/src/hal_queues.c ****  */
 105:ChibiOS/os/hal/src/hal_queues.c **** msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 110               		.loc 1 105 0
 111               		.cfi_startproc
 112               	.LVL6:
 113               	/* prologue: function */
 114               	/* frame size = 0 */
 115               	/* stack size = 0 */
 116               	.L__stack_usage = 0
 117 0000 FC01      		movw r30,r24
 106:ChibiOS/os/hal/src/hal_queues.c **** 
 107:ChibiOS/os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 108:ChibiOS/os/hal/src/hal_queues.c **** 
 109:ChibiOS/os/hal/src/hal_queues.c ****   if (iqIsFullI(iqp)) {
 118               		.loc 1 109 0
 119 0002 A781      		ldd r26,Z+7
 120 0004 B085      		ldd r27,Z+8
 121 0006 8185      		ldd r24,Z+9
 122 0008 9285      		ldd r25,Z+10
 123               	.LVL7:
 124 000a A817      		cp r26,r24
 125 000c B907      		cpc r27,r25
 126 000e 01F0      		breq .L11
 127               	.L4:
 110:ChibiOS/os/hal/src/hal_queues.c ****     return Q_FULL;
 111:ChibiOS/os/hal/src/hal_queues.c ****   }
 112:ChibiOS/os/hal/src/hal_queues.c **** 
 113:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_counter++;
 128               		.loc 1 113 0
 129 0010 8181      		ldd r24,Z+1
 130 0012 9281      		ldd r25,Z+2
 131 0014 0196      		adiw r24,1
 132 0016 9283      		std Z+2,r25
 133 0018 8183      		std Z+1,r24
 114:ChibiOS/os/hal/src/hal_queues.c ****   *iqp->q_wrptr++ = b;
 134               		.loc 1 114 0
 135 001a CD01      		movw r24,r26
 136 001c 0196      		adiw r24,1
 137 001e 9087      		std Z+8,r25
 138 0020 8783      		std Z+7,r24
 139 0022 6C93      		st X,r22
 115:ChibiOS/os/hal/src/hal_queues.c ****   if (iqp->q_wrptr >= iqp->q_top) {
 140               		.loc 1 115 0
 141 0024 2781      		ldd r18,Z+7
 142 0026 3085      		ldd r19,Z+8
 143 0028 8581      		ldd r24,Z+5
 144 002a 9681      		ldd r25,Z+6
 145 002c 2817      		cp r18,r24
 146 002e 3907      		cpc r19,r25
 147 0030 00F0      		brlo .L7
 116:ChibiOS/os/hal/src/hal_queues.c ****     iqp->q_wrptr = iqp->q_buffer;
 148               		.loc 1 116 0
 149 0032 8381      		ldd r24,Z+3
 150 0034 9481      		ldd r25,Z+4
 151 0036 9087      		std Z+8,r25
 152 0038 8783      		std Z+7,r24
 153               	.L7:
 154 003a CF01      		movw r24,r30
 117:ChibiOS/os/hal/src/hal_queues.c ****   }
 118:ChibiOS/os/hal/src/hal_queues.c **** 
 119:ChibiOS/os/hal/src/hal_queues.c ****   osalThreadDequeueNextI(&iqp->q_waiting, Q_OK);
 155               		.loc 1 119 0
 156 003c 60E0      		ldi r22,0
 157 003e 70E0      		ldi r23,0
 158               	.LVL8:
 159 0040 0E94 0000 		call osalThreadDequeueNextI
 160               	.LVL9:
 120:ChibiOS/os/hal/src/hal_queues.c **** 
 121:ChibiOS/os/hal/src/hal_queues.c ****   return Q_OK;
 161               		.loc 1 121 0
 162 0044 80E0      		ldi r24,0
 163 0046 90E0      		ldi r25,0
 164 0048 0895      		ret
 165               	.LVL10:
 166               	.L11:
 109:ChibiOS/os/hal/src/hal_queues.c ****     return Q_FULL;
 167               		.loc 1 109 0 discriminator 1
 168 004a 8181      		ldd r24,Z+1
 169 004c 9281      		ldd r25,Z+2
 170 004e 892B      		or r24,r25
 171 0050 01F0      		breq .L4
 110:ChibiOS/os/hal/src/hal_queues.c ****   }
 172               		.loc 1 110 0
 173 0052 8CEF      		ldi r24,lo8(-4)
 174 0054 9FEF      		ldi r25,lo8(-1)
 175 0056 0895      		ret
 176               		.cfi_endproc
 177               	.LFE55:
 179               		.section	.text.iqGetTimeout,"ax",@progbits
 180               	.global	iqGetTimeout
 182               	iqGetTimeout:
 183               	.LFB56:
 122:ChibiOS/os/hal/src/hal_queues.c **** }
 123:ChibiOS/os/hal/src/hal_queues.c **** 
 124:ChibiOS/os/hal/src/hal_queues.c **** /**
 125:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 126:ChibiOS/os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. If the queue
 127:ChibiOS/os/hal/src/hal_queues.c ****  *          is empty then the calling thread is suspended until a byte arrives
 128:ChibiOS/os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 129:ChibiOS/os/hal/src/hal_queues.c ****  * @note    The callback is invoked before reading the character from the
 130:ChibiOS/os/hal/src/hal_queues.c ****  *          buffer or before entering the state @p THD_STATE_WTQUEUE.
 131:ChibiOS/os/hal/src/hal_queues.c ****  *
 132:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 133:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 134:ChibiOS/os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 135:ChibiOS/os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 136:ChibiOS/os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 137:ChibiOS/os/hal/src/hal_queues.c ****  *                      .
 138:ChibiOS/os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 139:ChibiOS/os/hal/src/hal_queues.c ****  * @retval Q_TIMEOUT    if the specified time expired.
 140:ChibiOS/os/hal/src/hal_queues.c ****  * @retval Q_RESET      if the queue has been reset.
 141:ChibiOS/os/hal/src/hal_queues.c ****  *
 142:ChibiOS/os/hal/src/hal_queues.c ****  * @api
 143:ChibiOS/os/hal/src/hal_queues.c ****  */
 144:ChibiOS/os/hal/src/hal_queues.c **** msg_t iqGetTimeout(input_queue_t *iqp, systime_t timeout) {
 184               		.loc 1 144 0
 185               		.cfi_startproc
 186               	.LVL11:
 187 0000 0F93      		push r16
 188               	.LCFI2:
 189               		.cfi_def_cfa_offset 3
 190               		.cfi_offset 16, -2
 191 0002 1F93      		push r17
 192               	.LCFI3:
 193               		.cfi_def_cfa_offset 4
 194               		.cfi_offset 17, -3
 195 0004 CF93      		push r28
 196               	.LCFI4:
 197               		.cfi_def_cfa_offset 5
 198               		.cfi_offset 28, -4
 199 0006 DF93      		push r29
 200               	.LCFI5:
 201               		.cfi_def_cfa_offset 6
 202               		.cfi_offset 29, -5
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               	/* stack size = 4 */
 206               	.L__stack_usage = 4
 207 0008 EC01      		movw r28,r24
 208 000a 8B01      		movw r16,r22
 209               	.LBB78:
 210               	.LBB79:
 211               	.LBB80:
 212               		.file 3 "ChibiOS/os/nil/ports/AVR/nilcore.h"
   1:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*
   2:ChibiOS/os/nil/ports/AVR/nilcore.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
   4:ChibiOS/os/nil/ports/AVR/nilcore.h ****     This file is part of ChibiOS.
   5:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
   6:ChibiOS/os/nil/ports/AVR/nilcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:ChibiOS/os/nil/ports/AVR/nilcore.h ****     it under the terms of the GNU General Public License as published by
   8:ChibiOS/os/nil/ports/AVR/nilcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (at your option) any later version.
  10:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  11:ChibiOS/os/nil/ports/AVR/nilcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:ChibiOS/os/nil/ports/AVR/nilcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:ChibiOS/os/nil/ports/AVR/nilcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:ChibiOS/os/nil/ports/AVR/nilcore.h ****     GNU General Public License for more details.
  15:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  16:ChibiOS/os/nil/ports/AVR/nilcore.h ****     You should have received a copy of the GNU General Public License
  17:ChibiOS/os/nil/ports/AVR/nilcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:ChibiOS/os/nil/ports/AVR/nilcore.h **** */
  19:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  20:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  21:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @file    AVR/nilcore.h
  22:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   AVR port macros and structures.
  23:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
  24:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @addtogroup AVR_CORE
  25:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @{
  26:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  27:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  28:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifndef _NILCORE_H_
  29:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define _NILCORE_H_
  30:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  31:ChibiOS/os/nil/ports/AVR/nilcore.h **** #include <avr/io.h>
  32:ChibiOS/os/nil/ports/AVR/nilcore.h **** #include <avr/interrupt.h>
  33:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  34:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
  35:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module constants.                                                         */
  36:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
  37:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  38:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  39:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @name    Architecture and Compiler
  40:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @{
  41:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  42:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  43:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Macro defining the port architecture.
  44:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  45:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_ARCHITECTURE_AVR
  46:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  47:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  48:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Name of the implemented architecture.
  49:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  50:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  51:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  52:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  53:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Name of the architecture variant.
  54:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  55:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  56:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  57:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  58:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Compiler name and version.
  59:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  60:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  61:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  62:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  63:ChibiOS/os/nil/ports/AVR/nilcore.h **** #else
  64:ChibiOS/os/nil/ports/AVR/nilcore.h **** #error "unsupported compiler"
  65:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
  66:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  67:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  68:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Port-specific information string.
  69:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  70:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_INFO                       "16 bits code addressing"
  71:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  72:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  73:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   This port supports a realtime counter.
  74:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  75:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_SUPPORTS_RT                FALSE
  76:ChibiOS/os/nil/ports/AVR/nilcore.h **** /** @} */
  77:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  78:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
  79:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module pre-compile time settings.                                         */
  80:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
  81:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  82:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  83:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Stack size for the system idle thread.
  84:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This size depends on the idle thread implementation, usually
  85:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          the idle thread should take no more space than those reserved
  86:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
  87:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    In this port it is set to 8.
  88:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  89:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
  90:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
  91:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
  92:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  93:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  94:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
  95:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This constant is used in the calculation of the correct working
  96:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          area size.
  97:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    In this port the default is 32 bytes per thread.
  98:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  99:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 100:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_INT_REQUIRED_STACK         32
 101:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 102:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 103:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 104:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Enables an alternative timer implementation.
 105:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details Usually the port uses a timer interface defined in the file
 106:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          @p nilcore_timer.h, if this option is enabled then the file
 107:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          @p nilcore_timer_alt.h is included instead.
 108:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 109:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(PORT_USE_ALT_TIMER)
 110:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 111:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 112:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 113:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 114:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Derived constants and error checks.                                       */
 115:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 116:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 117:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 118:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module data structures and types.                                         */
 119:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 120:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 121:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* The following code is not processed when the file is included from an
 122:ChibiOS/os/nil/ports/AVR/nilcore.h ****    asm module.*/
 123:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(_FROM_ASM_)
 124:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 125:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 126:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 127:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 128:ChibiOS/os/nil/ports/AVR/nilcore.h **** typedef uint8_t stkalign_t;
 129:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 130:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 131:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   System saved context.
 132:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This structure represents the inner stack frame during a context
 133:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          switching.
 134:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 135:ChibiOS/os/nil/ports/AVR/nilcore.h **** struct port_intctx {
 136:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       _next;
 137:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r29;
 138:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r28;
 139:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r17;
 140:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r16;
 141:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r15;
 142:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r14;
 143:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r13;
 144:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r12;
 145:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r11;
 146:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r10;
 147:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r9;
 148:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r8;
 149:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r7;
 150:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r6;
 151:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r5;
 152:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r4;
 153:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r3;
 154:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r2;
 155:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifdef __AVR_3_BYTE_PC__
 156:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       pcx;
 157:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 158:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       pcl;
 159:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       pch;
 160:ChibiOS/os/nil/ports/AVR/nilcore.h **** };
 161:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 162:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif /* !defined(_FROM_ASM_) */
 163:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 164:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 165:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module macros.                                                            */
 166:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 167:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 168:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 169:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Platform dependent thread stack setup.
 170:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This code usually setup the context switching frame represented
 171:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          by an @p port_intctx structure.
 172:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 173:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifdef __AVR_3_BYTE_PC__
 174:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_SETUP_CONTEXT(tp, wend, pf, arg) {                             \
 175:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp = (struct port_intctx*)(((uint8_t *)(wend)) -                \
 176:ChibiOS/os/nil/ports/AVR/nilcore.h ****                                          sizeof(struct port_intctx));       \
 177:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r2  = (int)pf;                                              \
 178:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r3  = (int)pf >> 8;                                         \
 179:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r4  = (int)arg;                                             \
 180:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r5  = (int)arg >> 8;                                        \
 181:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pcx = (int)0;                                               \
 182:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pcl = (int)_port_thread_start >> 8;                         \
 183:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pch = (int)_port_thread_start;                              \
 184:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 185:ChibiOS/os/nil/ports/AVR/nilcore.h **** #else /* __AVR_3_BYTE_PC__ */
 186:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_SETUP_CONTEXT(tp, wend, pf, arg) {                             \
 187:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp = (struct port_intctx*)(((uint8_t *)(wend)) -                \
 188:ChibiOS/os/nil/ports/AVR/nilcore.h ****                                          sizeof(struct port_intctx));       \
 189:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r2  = (int)pf;                                              \
 190:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r3  = (int)pf >> 8;                                         \
 191:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r4  = (int)arg;                                             \
 192:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r5  = (int)arg >> 8;                                        \
 193:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pcl = (int)_port_thread_start >> 8;                         \
 194:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pch = (int)_port_thread_start;                              \
 195:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 196:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif /* __AVR_3_BYTE_PC__ */
 197:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 198:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Computes the thread working area global size.
 199:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    There is no need to perform alignments in this macro.
 200:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 201:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                 \
 202:ChibiOS/os/nil/ports/AVR/nilcore.h ****                          (n) + (PORT_INT_REQUIRED_STACK))
 203:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 204:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 205:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   IRQ prologue code.
 206:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 207:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          enabled to invoke system APIs.
 208:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 209:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          by "touching" them.
 210:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 211:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 212:ChibiOS/os/nil/ports/AVR/nilcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 213:ChibiOS/os/nil/ports/AVR/nilcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 214:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 215:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 216:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 217:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   IRQ epilogue code.
 218:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 219:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          enabled to invoke system APIs.
 220:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 221:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_IRQ_EPILOGUE() chSchRescheduleS()
 222:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 223:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 224:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   IRQ handler function declaration.
 225:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 226:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          port implementation.
 227:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 228:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 229:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 230:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 231:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Fast IRQ handler function declaration.
 232:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 233:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          port implementation.
 234:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 235:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 236:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 237:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 238:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Performs a context switch between two threads.
 239:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This is the most critical code in any port, this function
 240:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          is responsible for the context switch between 2 threads.
 241:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 242:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          switch performance so optimize here as much as you can.
 243:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 244:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @param[in] ntp       the thread to be switched in
 245:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @param[in] otp       the thread to be switched out
 246:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 247:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 248:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 249:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 250:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* External declarations.                                                    */
 251:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 252:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 253:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* The following code is not processed when the file is included from an
 254:ChibiOS/os/nil/ports/AVR/nilcore.h ****    asm module.*/
 255:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(_FROM_ASM_)
 256:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 257:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifdef __cplusplus
 258:ChibiOS/os/nil/ports/AVR/nilcore.h **** extern "C" {
 259:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 260:ChibiOS/os/nil/ports/AVR/nilcore.h ****   void _port_irq_epilogue(void);
 261:ChibiOS/os/nil/ports/AVR/nilcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 262:ChibiOS/os/nil/ports/AVR/nilcore.h ****   void _port_thread_start(void);
 263:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifdef __cplusplus
 264:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 265:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 266:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 267:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif /* !defined(_FROM_ASM_) */
 268:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 269:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 270:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module inline functions.                                                  */
 271:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 272:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 273:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* The following code is not processed when the file is included from an
 274:ChibiOS/os/nil/ports/AVR/nilcore.h ****    asm module.*/
 275:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(_FROM_ASM_)
 276:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 277:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 278:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Port-related initialization code.
 279:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 280:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline void port_init(void) {
 281:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 282:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 283:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 284:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 285:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 286:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 287:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @return              The interrupts status.
 288:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 289:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline syssts_t port_get_irq_status(void) {
 290:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 291:ChibiOS/os/nil/ports/AVR/nilcore.h ****   return 0;
 292:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 293:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 294:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 295:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Checks the interrupt status.
 296:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 297:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @param[in] sts       the interrupt status word
 298:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 299:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @return              The interrupt status.
 300:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @retvel false        the word specified a disabled interrupts status.
 301:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @retvel true         the word specified an enabled interrupts status.
 302:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 303:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 304:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 305:ChibiOS/os/nil/ports/AVR/nilcore.h ****   return false;
 306:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 307:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 308:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 309:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Determines the current execution context.
 310:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 311:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @return              The execution context.
 312:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @retval false        not running in ISR mode.
 313:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @retval true         running in ISR mode.
 314:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 315:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline bool port_is_isr_context(void) {
 316:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 317:ChibiOS/os/nil/ports/AVR/nilcore.h ****   return false;
 318:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 319:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 320:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 321:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Kernel-lock action.
 322:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 323:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline void port_lock(void) {
 324:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 325:ChibiOS/os/nil/ports/AVR/nilcore.h ****   asm volatile ("cli" : : : "memory");
 213               		.loc 3 325 0
 214               	/* #APP */
 215               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 216 000c F894      		cli
 217               	 ;  0 "" 2
 218               	/* #NOAPP */
 219               	.LBE80:
 220               	.LBE79:
 221               	.LBE78:
 145:ChibiOS/os/hal/src/hal_queues.c ****   uint8_t b;
 146:ChibiOS/os/hal/src/hal_queues.c **** 
 147:ChibiOS/os/hal/src/hal_queues.c ****   osalSysLock();
 148:ChibiOS/os/hal/src/hal_queues.c ****   if (iqp->q_notify != NULL) {
 222               		.loc 1 148 0
 223 000e EB85      		ldd r30,Y+11
 224 0010 FC85      		ldd r31,Y+12
 225 0012 3097      		sbiw r30,0
 226 0014 01F0      		breq .L14
 149:ChibiOS/os/hal/src/hal_queues.c ****     iqp->q_notify(iqp);
 227               		.loc 1 149 0
 228 0016 0995      		icall
 229               	.LVL12:
 230 0018 00C0      		rjmp .L14
 231               	.L16:
 232               	.LVL13:
 233               	.LBB81:
 234               	.LBB82:
 235               	.LBB83:
 766:ChibiOS/os/hal/osal/nil/osal.h **** }
 767:ChibiOS/os/hal/osal/nil/osal.h **** 
 768:ChibiOS/os/hal/osal/nil/osal.h **** /**
 769:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Enqueues the caller thread.
 770:ChibiOS/os/hal/osal/nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 771:ChibiOS/os/hal/osal/nil/osal.h ****  *          dequeued or the specified timeouts expires.
 772:ChibiOS/os/hal/osal/nil/osal.h ****  *
 773:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 774:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 775:ChibiOS/os/hal/osal/nil/osal.h ****  *                      handled as follow:
 776:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 777:ChibiOS/os/hal/osal/nil/osal.h ****  *                        state.
 778:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 779:ChibiOS/os/hal/osal/nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 780:ChibiOS/os/hal/osal/nil/osal.h ****  *                        occurred.
 781:ChibiOS/os/hal/osal/nil/osal.h ****  *                      .
 782:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 783:ChibiOS/os/hal/osal/nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 784:ChibiOS/os/hal/osal/nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 785:ChibiOS/os/hal/osal/nil/osal.h ****  *                      specified timeout or if the function has been
 786:ChibiOS/os/hal/osal/nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 787:ChibiOS/os/hal/osal/nil/osal.h ****  *                      specification.
 788:ChibiOS/os/hal/osal/nil/osal.h ****  *
 789:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 790:ChibiOS/os/hal/osal/nil/osal.h ****  */
 791:ChibiOS/os/hal/osal/nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 792:ChibiOS/os/hal/osal/nil/osal.h ****                                               systime_t time) {
 793:ChibiOS/os/hal/osal/nil/osal.h **** 
 794:ChibiOS/os/hal/osal/nil/osal.h ****   return chSemWaitTimeoutS(&tqp->sem, time);
 236               		.loc 2 794 0
 237 001a B801      		movw r22,r16
 238 001c CE01      		movw r24,r28
 239 001e 0E94 0000 		call chSemWaitTimeoutS
 240               	.LVL14:
 241               	.LBE83:
 242               	.LBE82:
 150:ChibiOS/os/hal/src/hal_queues.c ****   }
 151:ChibiOS/os/hal/src/hal_queues.c **** 
 152:ChibiOS/os/hal/src/hal_queues.c ****   while (iqIsEmptyI(iqp)) {
 153:ChibiOS/os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 154:ChibiOS/os/hal/src/hal_queues.c ****     if (msg < Q_OK) {
 243               		.loc 1 154 0
 244 0022 97FD      		sbrc r25,7
 245 0024 00C0      		rjmp .L22
 246               	.LVL15:
 247               	.L14:
 248               	.LBE81:
 152:ChibiOS/os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 249               		.loc 1 152 0
 250 0026 8981      		ldd r24,Y+1
 251 0028 9A81      		ldd r25,Y+2
 252 002a 892B      		or r24,r25
 253 002c 01F0      		breq .L16
 155:ChibiOS/os/hal/src/hal_queues.c ****       osalSysUnlock();
 156:ChibiOS/os/hal/src/hal_queues.c ****       return msg;
 157:ChibiOS/os/hal/src/hal_queues.c ****     }
 158:ChibiOS/os/hal/src/hal_queues.c ****   }
 159:ChibiOS/os/hal/src/hal_queues.c **** 
 160:ChibiOS/os/hal/src/hal_queues.c ****   iqp->q_counter--;
 254               		.loc 1 160 0
 255 002e 8981      		ldd r24,Y+1
 256 0030 9A81      		ldd r25,Y+2
 257 0032 0197      		sbiw r24,1
 258 0034 9A83      		std Y+2,r25
 259 0036 8983      		std Y+1,r24
 161:ChibiOS/os/hal/src/hal_queues.c ****   b = *iqp->q_rdptr++;
 260               		.loc 1 161 0
 261 0038 E985      		ldd r30,Y+9
 262 003a FA85      		ldd r31,Y+10
 263 003c 9F01      		movw r18,r30
 264 003e 2F5F      		subi r18,-1
 265 0040 3F4F      		sbci r19,-1
 266 0042 3A87      		std Y+10,r19
 267 0044 2987      		std Y+9,r18
 268 0046 8081      		ld r24,Z
 269               	.LVL16:
 162:ChibiOS/os/hal/src/hal_queues.c ****   if (iqp->q_rdptr >= iqp->q_top) {
 270               		.loc 1 162 0
 271 0048 4D81      		ldd r20,Y+5
 272 004a 5E81      		ldd r21,Y+6
 273 004c 2417      		cp r18,r20
 274 004e 3507      		cpc r19,r21
 275 0050 00F4      		brsh .L23
 276               	.L17:
 277               	.LBB87:
 278               	.LBB88:
 279               	.LBB89:
 326:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 327:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 328:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 329:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Kernel-unlock action.
 330:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 331:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline void port_unlock(void) {
 332:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 333:ChibiOS/os/nil/ports/AVR/nilcore.h ****   asm volatile ("sei" : : : "memory");
 280               		.loc 3 333 0
 281               	/* #APP */
 282               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 283 0052 7894      		sei
 284               	 ;  0 "" 2
 285               	/* #NOAPP */
 286               	.LBE89:
 287               	.LBE88:
 288               	.LBE87:
 163:ChibiOS/os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
 164:ChibiOS/os/hal/src/hal_queues.c ****   }
 165:ChibiOS/os/hal/src/hal_queues.c ****   osalSysUnlock();
 166:ChibiOS/os/hal/src/hal_queues.c **** 
 167:ChibiOS/os/hal/src/hal_queues.c ****   return (msg_t)b;
 289               		.loc 1 167 0
 290 0054 90E0      		ldi r25,0
 291               	/* epilogue start */
 168:ChibiOS/os/hal/src/hal_queues.c **** }
 292               		.loc 1 168 0
 293 0056 DF91      		pop r29
 294 0058 CF91      		pop r28
 295               	.LVL17:
 296 005a 1F91      		pop r17
 297 005c 0F91      		pop r16
 298               	.LVL18:
 299 005e 0895      		ret
 300               	.LVL19:
 301               	.L23:
 163:ChibiOS/os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
 302               		.loc 1 163 0
 303 0060 2B81      		ldd r18,Y+3
 304 0062 3C81      		ldd r19,Y+4
 305 0064 3A87      		std Y+10,r19
 306 0066 2987      		std Y+9,r18
 307 0068 00C0      		rjmp .L17
 308               	.LVL20:
 309               	.L22:
 310               	.LBB90:
 311               	.LBB84:
 312               	.LBB85:
 313               	.LBB86:
 314               		.loc 3 333 0
 315               	/* #APP */
 316               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 317 006a 7894      		sei
 318               	 ;  0 "" 2
 319               	/* epilogue start */
 320               	/* #NOAPP */
 321               	.LBE86:
 322               	.LBE85:
 323               	.LBE84:
 324               	.LBE90:
 325               		.loc 1 168 0
 326 006c DF91      		pop r29
 327 006e CF91      		pop r28
 328               	.LVL21:
 329 0070 1F91      		pop r17
 330 0072 0F91      		pop r16
 331               	.LVL22:
 332 0074 0895      		ret
 333               		.cfi_endproc
 334               	.LFE56:
 336               		.section	.text.iqReadTimeout,"ax",@progbits
 337               	.global	iqReadTimeout
 339               	iqReadTimeout:
 340               	.LFB57:
 169:ChibiOS/os/hal/src/hal_queues.c **** 
 170:ChibiOS/os/hal/src/hal_queues.c **** /**
 171:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 172:ChibiOS/os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 173:ChibiOS/os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 174:ChibiOS/os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 175:ChibiOS/os/hal/src/hal_queues.c ****  *          been reset.
 176:ChibiOS/os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 177:ChibiOS/os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 178:ChibiOS/os/hal/src/hal_queues.c ****  * @note    The callback is invoked before reading each character from the
 179:ChibiOS/os/hal/src/hal_queues.c ****  *          buffer or before entering the state @p THD_STATE_WTQUEUE.
 180:ChibiOS/os/hal/src/hal_queues.c ****  *
 181:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 182:ChibiOS/os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 183:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 184:ChibiOS/os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 185:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 186:ChibiOS/os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 187:ChibiOS/os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 188:ChibiOS/os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 189:ChibiOS/os/hal/src/hal_queues.c ****  *                      .
 190:ChibiOS/os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 191:ChibiOS/os/hal/src/hal_queues.c ****  *
 192:ChibiOS/os/hal/src/hal_queues.c ****  * @api
 193:ChibiOS/os/hal/src/hal_queues.c ****  */
 194:ChibiOS/os/hal/src/hal_queues.c **** size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
 195:ChibiOS/os/hal/src/hal_queues.c ****                      size_t n, systime_t timeout) {
 341               		.loc 1 195 0
 342               		.cfi_startproc
 343               	.LVL23:
 344 0000 8F92      		push r8
 345               	.LCFI6:
 346               		.cfi_def_cfa_offset 3
 347               		.cfi_offset 8, -2
 348 0002 9F92      		push r9
 349               	.LCFI7:
 350               		.cfi_def_cfa_offset 4
 351               		.cfi_offset 9, -3
 352 0004 AF92      		push r10
 353               	.LCFI8:
 354               		.cfi_def_cfa_offset 5
 355               		.cfi_offset 10, -4
 356 0006 BF92      		push r11
 357               	.LCFI9:
 358               		.cfi_def_cfa_offset 6
 359               		.cfi_offset 11, -5
 360 0008 CF92      		push r12
 361               	.LCFI10:
 362               		.cfi_def_cfa_offset 7
 363               		.cfi_offset 12, -6
 364 000a DF92      		push r13
 365               	.LCFI11:
 366               		.cfi_def_cfa_offset 8
 367               		.cfi_offset 13, -7
 368 000c EF92      		push r14
 369               	.LCFI12:
 370               		.cfi_def_cfa_offset 9
 371               		.cfi_offset 14, -8
 372 000e FF92      		push r15
 373               	.LCFI13:
 374               		.cfi_def_cfa_offset 10
 375               		.cfi_offset 15, -9
 376 0010 0F93      		push r16
 377               	.LCFI14:
 378               		.cfi_def_cfa_offset 11
 379               		.cfi_offset 16, -10
 380 0012 1F93      		push r17
 381               	.LCFI15:
 382               		.cfi_def_cfa_offset 12
 383               		.cfi_offset 17, -11
 384 0014 CF93      		push r28
 385               	.LCFI16:
 386               		.cfi_def_cfa_offset 13
 387               		.cfi_offset 28, -12
 388 0016 DF93      		push r29
 389               	.LCFI17:
 390               		.cfi_def_cfa_offset 14
 391               		.cfi_offset 29, -13
 392               	/* prologue: function */
 393               	/* frame size = 0 */
 394               	/* stack size = 12 */
 395               	.L__stack_usage = 12
 396 0018 EC01      		movw r28,r24
 397 001a 4A01      		movw r8,r20
 398 001c 8901      		movw r16,r18
 196:ChibiOS/os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 399               		.loc 1 196 0
 400 001e AB84      		ldd r10,Y+11
 401 0020 BC84      		ldd r11,Y+12
 402               	.LVL24:
 403               	.LBB91:
 404               	.LBB92:
 405               	.LBB93:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 406               		.loc 3 325 0
 407               	/* #APP */
 408               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 409 0022 F894      		cli
 410               	 ;  0 "" 2
 411               	/* #NOAPP */
 412 0024 6B01      		movw r12,r22
 413               	.LBE93:
 414               	.LBE92:
 415               	.LBE91:
 197:ChibiOS/os/hal/src/hal_queues.c ****   size_t r = 0;
 416               		.loc 1 197 0
 417 0026 E12C      		mov r14,__zero_reg__
 418 0028 F12C      		mov r15,__zero_reg__
 419               	.LVL25:
 420               	.L30:
 198:ChibiOS/os/hal/src/hal_queues.c **** 
 199:ChibiOS/os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 200:ChibiOS/os/hal/src/hal_queues.c **** 
 201:ChibiOS/os/hal/src/hal_queues.c ****   osalSysLock();
 202:ChibiOS/os/hal/src/hal_queues.c ****   while (true) {
 203:ChibiOS/os/hal/src/hal_queues.c ****     if (nfy != NULL) {
 421               		.loc 1 203 0
 422 002a A114      		cp r10,__zero_reg__
 423 002c B104      		cpc r11,__zero_reg__
 424 002e 01F0      		breq .L26
 204:ChibiOS/os/hal/src/hal_queues.c ****       nfy(iqp);
 425               		.loc 1 204 0
 426 0030 CE01      		movw r24,r28
 427 0032 F501      		movw r30,r10
 428 0034 0995      		icall
 429               	.LVL26:
 430 0036 00C0      		rjmp .L26
 431               	.L28:
 432               	.LVL27:
 433               	.LBB94:
 434               	.LBB95:
 435               		.loc 2 794 0
 436 0038 B801      		movw r22,r16
 437 003a CE01      		movw r24,r28
 438 003c 0E94 0000 		call chSemWaitTimeoutS
 439               	.LVL28:
 440               	.LBE95:
 441               	.LBE94:
 205:ChibiOS/os/hal/src/hal_queues.c ****     }
 206:ChibiOS/os/hal/src/hal_queues.c **** 
 207:ChibiOS/os/hal/src/hal_queues.c ****     while (iqIsEmptyI(iqp)) {
 208:ChibiOS/os/hal/src/hal_queues.c ****       if (osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 442               		.loc 1 208 0
 443 0040 892B      		or r24,r25
 444 0042 01F4      		brne .L36
 445               	.LVL29:
 446               	.L26:
 207:ChibiOS/os/hal/src/hal_queues.c ****       if (osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 447               		.loc 1 207 0
 448 0044 8981      		ldd r24,Y+1
 449 0046 9A81      		ldd r25,Y+2
 450 0048 892B      		or r24,r25
 451 004a 01F0      		breq .L28
 209:ChibiOS/os/hal/src/hal_queues.c ****         osalSysUnlock();
 210:ChibiOS/os/hal/src/hal_queues.c ****         return r;
 211:ChibiOS/os/hal/src/hal_queues.c ****       }
 212:ChibiOS/os/hal/src/hal_queues.c ****     }
 213:ChibiOS/os/hal/src/hal_queues.c **** 
 214:ChibiOS/os/hal/src/hal_queues.c ****     iqp->q_counter--;
 452               		.loc 1 214 0
 453 004c 8981      		ldd r24,Y+1
 454 004e 9A81      		ldd r25,Y+2
 455 0050 0197      		sbiw r24,1
 456 0052 9A83      		std Y+2,r25
 457 0054 8983      		std Y+1,r24
 458               	.LVL30:
 215:ChibiOS/os/hal/src/hal_queues.c ****     *bp++ = *iqp->q_rdptr++;
 459               		.loc 1 215 0
 460 0056 E985      		ldd r30,Y+9
 461 0058 FA85      		ldd r31,Y+10
 462 005a CF01      		movw r24,r30
 463 005c 0196      		adiw r24,1
 464 005e 9A87      		std Y+10,r25
 465 0060 8987      		std Y+9,r24
 466 0062 8081      		ld r24,Z
 467 0064 F601      		movw r30,r12
 468 0066 8193      		st Z+,r24
 469 0068 6F01      		movw r12,r30
 216:ChibiOS/os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 470               		.loc 1 216 0
 471 006a 2985      		ldd r18,Y+9
 472 006c 3A85      		ldd r19,Y+10
 473 006e 8D81      		ldd r24,Y+5
 474 0070 9E81      		ldd r25,Y+6
 475 0072 2817      		cp r18,r24
 476 0074 3907      		cpc r19,r25
 477 0076 00F0      		brlo .L29
 217:ChibiOS/os/hal/src/hal_queues.c ****       iqp->q_rdptr = iqp->q_buffer;
 478               		.loc 1 217 0
 479 0078 8B81      		ldd r24,Y+3
 480 007a 9C81      		ldd r25,Y+4
 481 007c 9A87      		std Y+10,r25
 482 007e 8987      		std Y+9,r24
 483               	.L29:
 484               	.LBB96:
 485               	.LBB97:
 486               	.LBB98:
 487               		.loc 3 333 0
 488               	/* #APP */
 489               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 490 0080 7894      		sei
 491               	 ;  0 "" 2
 492               	/* #NOAPP */
 493               	.LBE98:
 494               	.LBE97:
 495               	.LBE96:
 218:ChibiOS/os/hal/src/hal_queues.c ****     }
 219:ChibiOS/os/hal/src/hal_queues.c ****     osalSysUnlock(); /* Gives a preemption chance in a controlled point.*/
 220:ChibiOS/os/hal/src/hal_queues.c **** 
 221:ChibiOS/os/hal/src/hal_queues.c ****     r++;
 496               		.loc 1 221 0
 497 0082 FFEF      		ldi r31,-1
 498 0084 EF1A      		sub r14,r31
 499 0086 FF0A      		sbc r15,r31
 500               	.LVL31:
 222:ChibiOS/os/hal/src/hal_queues.c ****     if (--n == 0U) {
 501               		.loc 1 222 0
 502 0088 8E14      		cp r8,r14
 503 008a 9F04      		cpc r9,r15
 504 008c 01F0      		breq .L27
 505               	.LBB99:
 506               	.LBB100:
 507               	.LBB101:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 508               		.loc 3 325 0
 509               	/* #APP */
 510               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 511 008e F894      		cli
 512               	 ;  0 "" 2
 513               	/* #NOAPP */
 514 0090 00C0      		rjmp .L30
 515               	.LVL32:
 516               	.L36:
 517               	.LBE101:
 518               	.LBE100:
 519               	.LBE99:
 520               	.LBB102:
 521               	.LBB103:
 522               	.LBB104:
 523               		.loc 3 333 0
 524               	/* #APP */
 525               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 526 0092 7894      		sei
 527               	 ;  0 "" 2
 528               	.LVL33:
 529               	/* #NOAPP */
 530               	.L27:
 531               	.LBE104:
 532               	.LBE103:
 533               	.LBE102:
 223:ChibiOS/os/hal/src/hal_queues.c ****       return r;
 224:ChibiOS/os/hal/src/hal_queues.c ****     }
 225:ChibiOS/os/hal/src/hal_queues.c **** 
 226:ChibiOS/os/hal/src/hal_queues.c ****     osalSysLock();
 227:ChibiOS/os/hal/src/hal_queues.c ****   }
 228:ChibiOS/os/hal/src/hal_queues.c **** }
 534               		.loc 1 228 0
 535 0094 C701      		movw r24,r14
 536               	/* epilogue start */
 537 0096 DF91      		pop r29
 538 0098 CF91      		pop r28
 539               	.LVL34:
 540 009a 1F91      		pop r17
 541 009c 0F91      		pop r16
 542               	.LVL35:
 543 009e FF90      		pop r15
 544 00a0 EF90      		pop r14
 545               	.LVL36:
 546 00a2 DF90      		pop r13
 547 00a4 CF90      		pop r12
 548 00a6 BF90      		pop r11
 549 00a8 AF90      		pop r10
 550               	.LVL37:
 551 00aa 9F90      		pop r9
 552 00ac 8F90      		pop r8
 553 00ae 0895      		ret
 554               		.cfi_endproc
 555               	.LFE57:
 557               		.section	.text.oqObjectInit,"ax",@progbits
 558               	.global	oqObjectInit
 560               	oqObjectInit:
 561               	.LFB58:
 229:ChibiOS/os/hal/src/hal_queues.c **** 
 230:ChibiOS/os/hal/src/hal_queues.c **** /**
 231:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Initializes an output queue.
 232:ChibiOS/os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 233:ChibiOS/os/hal/src/hal_queues.c ****  *          the free bytes in the queue.
 234:ChibiOS/os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 235:ChibiOS/os/hal/src/hal_queues.c ****  *
 236:ChibiOS/os/hal/src/hal_queues.c ****  * @param[out] oqp      pointer to an @p output_queue_t structure
 237:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 238:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 239:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] onfy      pointer to a callback function that is invoked when
 240:ChibiOS/os/hal/src/hal_queues.c ****  *                      data is written to the queue. The value can be @p NULL.
 241:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 242:ChibiOS/os/hal/src/hal_queues.c ****  *
 243:ChibiOS/os/hal/src/hal_queues.c ****  * @init
 244:ChibiOS/os/hal/src/hal_queues.c ****  */
 245:ChibiOS/os/hal/src/hal_queues.c **** void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
 246:ChibiOS/os/hal/src/hal_queues.c ****                   qnotify_t onfy, void *link) {
 562               		.loc 1 246 0
 563               		.cfi_startproc
 564               	.LVL38:
 565 0000 0F93      		push r16
 566               	.LCFI18:
 567               		.cfi_def_cfa_offset 3
 568               		.cfi_offset 16, -2
 569 0002 1F93      		push r17
 570               	.LCFI19:
 571               		.cfi_def_cfa_offset 4
 572               		.cfi_offset 17, -3
 573               	/* prologue: function */
 574               	/* frame size = 0 */
 575               	/* stack size = 2 */
 576               	.L__stack_usage = 2
 577 0004 FC01      		movw r30,r24
 578               	.LVL39:
 579               	.LBB105:
 580               	.LBB106:
 765:ChibiOS/os/hal/osal/nil/osal.h **** }
 581               		.loc 2 765 0
 582 0006 1082      		st Z,__zero_reg__
 583               	.LBE106:
 584               	.LBE105:
 247:ChibiOS/os/hal/src/hal_queues.c **** 
 248:ChibiOS/os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&oqp->q_waiting);
 249:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_counter = size;
 585               		.loc 1 249 0
 586 0008 5283      		std Z+2,r21
 587 000a 4183      		std Z+1,r20
 250:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_buffer  = bp;
 588               		.loc 1 250 0
 589 000c 7483      		std Z+4,r23
 590 000e 6383      		std Z+3,r22
 251:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_rdptr   = bp;
 591               		.loc 1 251 0
 592 0010 7287      		std Z+10,r23
 593 0012 6187      		std Z+9,r22
 252:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_wrptr   = bp;
 594               		.loc 1 252 0
 595 0014 7087      		std Z+8,r23
 596 0016 6783      		std Z+7,r22
 253:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 597               		.loc 1 253 0
 598 0018 460F      		add r20,r22
 599 001a 571F      		adc r21,r23
 600               	.LVL40:
 601 001c 5683      		std Z+6,r21
 602 001e 4583      		std Z+5,r20
 254:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_notify  = onfy;
 603               		.loc 1 254 0
 604 0020 3487      		std Z+12,r19
 605 0022 2387      		std Z+11,r18
 255:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_link    = link;
 606               		.loc 1 255 0
 607 0024 1687      		std Z+14,r17
 608 0026 0587      		std Z+13,r16
 609               	/* epilogue start */
 256:ChibiOS/os/hal/src/hal_queues.c **** }
 610               		.loc 1 256 0
 611 0028 1F91      		pop r17
 612 002a 0F91      		pop r16
 613               	.LVL41:
 614 002c 0895      		ret
 615               		.cfi_endproc
 616               	.LFE58:
 618               		.section	.text.oqResetI,"ax",@progbits
 619               	.global	oqResetI
 621               	oqResetI:
 622               	.LFB59:
 257:ChibiOS/os/hal/src/hal_queues.c **** 
 258:ChibiOS/os/hal/src/hal_queues.c **** /**
 259:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Resets an output queue.
 260:ChibiOS/os/hal/src/hal_queues.c ****  * @details All the data in the output queue is erased and lost, any waiting
 261:ChibiOS/os/hal/src/hal_queues.c ****  *          thread is resumed with status @p Q_RESET.
 262:ChibiOS/os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 263:ChibiOS/os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 264:ChibiOS/os/hal/src/hal_queues.c ****  *
 265:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 266:ChibiOS/os/hal/src/hal_queues.c ****  *
 267:ChibiOS/os/hal/src/hal_queues.c ****  * @iclass
 268:ChibiOS/os/hal/src/hal_queues.c ****  */
 269:ChibiOS/os/hal/src/hal_queues.c **** void oqResetI(output_queue_t *oqp) {
 623               		.loc 1 269 0
 624               		.cfi_startproc
 625               	.LVL42:
 626               	/* prologue: function */
 627               	/* frame size = 0 */
 628               	/* stack size = 0 */
 629               	.L__stack_usage = 0
 630 0000 FC01      		movw r30,r24
 270:ChibiOS/os/hal/src/hal_queues.c **** 
 271:ChibiOS/os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 272:ChibiOS/os/hal/src/hal_queues.c **** 
 273:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_rdptr = oqp->q_buffer;
 631               		.loc 1 273 0
 632 0002 2381      		ldd r18,Z+3
 633 0004 3481      		ldd r19,Z+4
 634 0006 3287      		std Z+10,r19
 635 0008 2187      		std Z+9,r18
 274:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_wrptr = oqp->q_buffer;
 636               		.loc 1 274 0
 637 000a 3087      		std Z+8,r19
 638 000c 2783      		std Z+7,r18
 275:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_counter = qSizeX(oqp);
 639               		.loc 1 275 0
 640 000e 8581      		ldd r24,Z+5
 641 0010 9681      		ldd r25,Z+6
 642               	.LVL43:
 643 0012 821B      		sub r24,r18
 644 0014 930B      		sbc r25,r19
 645 0016 9283      		std Z+2,r25
 646 0018 8183      		std Z+1,r24
 276:ChibiOS/os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&oqp->q_waiting, Q_RESET);
 647               		.loc 1 276 0
 648 001a 6EEF      		ldi r22,lo8(-2)
 649 001c 7FEF      		ldi r23,lo8(-1)
 650 001e CF01      		movw r24,r30
 651 0020 0C94 0000 		jmp osalThreadDequeueAllI
 652               	.LVL44:
 653               		.cfi_endproc
 654               	.LFE59:
 656               		.section	.text.oqPutTimeout,"ax",@progbits
 657               	.global	oqPutTimeout
 659               	oqPutTimeout:
 660               	.LFB60:
 277:ChibiOS/os/hal/src/hal_queues.c **** }
 278:ChibiOS/os/hal/src/hal_queues.c **** 
 279:ChibiOS/os/hal/src/hal_queues.c **** /**
 280:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 281:ChibiOS/os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. If the queue
 282:ChibiOS/os/hal/src/hal_queues.c ****  *          is full then the calling thread is suspended until there is space
 283:ChibiOS/os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 284:ChibiOS/os/hal/src/hal_queues.c ****  * @note    The callback is invoked after writing the character into the
 285:ChibiOS/os/hal/src/hal_queues.c ****  *          buffer.
 286:ChibiOS/os/hal/src/hal_queues.c ****  *
 287:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 288:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 289:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 290:ChibiOS/os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 291:ChibiOS/os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 292:ChibiOS/os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 293:ChibiOS/os/hal/src/hal_queues.c ****  *                      .
 294:ChibiOS/os/hal/src/hal_queues.c ****  * @return              The operation status.
 295:ChibiOS/os/hal/src/hal_queues.c ****  * @retval Q_OK         if the operation succeeded.
 296:ChibiOS/os/hal/src/hal_queues.c ****  * @retval Q_TIMEOUT    if the specified time expired.
 297:ChibiOS/os/hal/src/hal_queues.c ****  * @retval Q_RESET      if the queue has been reset.
 298:ChibiOS/os/hal/src/hal_queues.c ****  *
 299:ChibiOS/os/hal/src/hal_queues.c ****  * @api
 300:ChibiOS/os/hal/src/hal_queues.c ****  */
 301:ChibiOS/os/hal/src/hal_queues.c **** msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 661               		.loc 1 301 0
 662               		.cfi_startproc
 663               	.LVL45:
 664 0000 FF92      		push r15
 665               	.LCFI20:
 666               		.cfi_def_cfa_offset 3
 667               		.cfi_offset 15, -2
 668 0002 0F93      		push r16
 669               	.LCFI21:
 670               		.cfi_def_cfa_offset 4
 671               		.cfi_offset 16, -3
 672 0004 1F93      		push r17
 673               	.LCFI22:
 674               		.cfi_def_cfa_offset 5
 675               		.cfi_offset 17, -4
 676 0006 CF93      		push r28
 677               	.LCFI23:
 678               		.cfi_def_cfa_offset 6
 679               		.cfi_offset 28, -5
 680 0008 DF93      		push r29
 681               	.LCFI24:
 682               		.cfi_def_cfa_offset 7
 683               		.cfi_offset 29, -6
 684               	/* prologue: function */
 685               	/* frame size = 0 */
 686               	/* stack size = 5 */
 687               	.L__stack_usage = 5
 688 000a EC01      		movw r28,r24
 689 000c F62E      		mov r15,r22
 690 000e 8A01      		movw r16,r20
 691               	.LBB107:
 692               	.LBB108:
 693               	.LBB109:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 694               		.loc 3 325 0
 695               	/* #APP */
 696               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 697 0010 F894      		cli
 698               	 ;  0 "" 2
 699               	/* #NOAPP */
 700 0012 00C0      		rjmp .L40
 701               	.LVL46:
 702               	.L42:
 703               	.LBE109:
 704               	.LBE108:
 705               	.LBE107:
 706               	.LBB110:
 707               	.LBB111:
 708               	.LBB112:
 709               		.loc 2 794 0
 710 0014 B801      		movw r22,r16
 711 0016 CE01      		movw r24,r28
 712 0018 0E94 0000 		call chSemWaitTimeoutS
 713               	.LVL47:
 714               	.LBE112:
 715               	.LBE111:
 302:ChibiOS/os/hal/src/hal_queues.c **** 
 303:ChibiOS/os/hal/src/hal_queues.c ****   osalSysLock();
 304:ChibiOS/os/hal/src/hal_queues.c ****   while (oqIsFullI(oqp)) {
 305:ChibiOS/os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 306:ChibiOS/os/hal/src/hal_queues.c ****     if (msg < Q_OK) {
 716               		.loc 1 306 0
 717 001c 97FD      		sbrc r25,7
 718 001e 00C0      		rjmp .L49
 719               	.LVL48:
 720               	.L40:
 721               	.LBE110:
 304:ChibiOS/os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 722               		.loc 1 304 0
 723 0020 8981      		ldd r24,Y+1
 724 0022 9A81      		ldd r25,Y+2
 725 0024 892B      		or r24,r25
 726 0026 01F0      		breq .L42
 307:ChibiOS/os/hal/src/hal_queues.c ****       osalSysUnlock();
 308:ChibiOS/os/hal/src/hal_queues.c ****       return msg;
 309:ChibiOS/os/hal/src/hal_queues.c ****     }
 310:ChibiOS/os/hal/src/hal_queues.c ****   }
 311:ChibiOS/os/hal/src/hal_queues.c **** 
 312:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_counter--;
 727               		.loc 1 312 0
 728 0028 8981      		ldd r24,Y+1
 729 002a 9A81      		ldd r25,Y+2
 730 002c 0197      		sbiw r24,1
 731 002e 9A83      		std Y+2,r25
 732 0030 8983      		std Y+1,r24
 313:ChibiOS/os/hal/src/hal_queues.c ****   *oqp->q_wrptr++ = b;
 733               		.loc 1 313 0
 734 0032 EF81      		ldd r30,Y+7
 735 0034 F885      		ldd r31,Y+8
 736 0036 CF01      		movw r24,r30
 737 0038 0196      		adiw r24,1
 738 003a 9887      		std Y+8,r25
 739 003c 8F83      		std Y+7,r24
 740 003e F082      		st Z,r15
 314:ChibiOS/os/hal/src/hal_queues.c ****   if (oqp->q_wrptr >= oqp->q_top) {
 741               		.loc 1 314 0
 742 0040 2F81      		ldd r18,Y+7
 743 0042 3885      		ldd r19,Y+8
 744 0044 8D81      		ldd r24,Y+5
 745 0046 9E81      		ldd r25,Y+6
 746 0048 2817      		cp r18,r24
 747 004a 3907      		cpc r19,r25
 748 004c 00F0      		brlo .L43
 315:ChibiOS/os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 749               		.loc 1 315 0
 750 004e 8B81      		ldd r24,Y+3
 751 0050 9C81      		ldd r25,Y+4
 752 0052 9887      		std Y+8,r25
 753 0054 8F83      		std Y+7,r24
 754               	.L43:
 316:ChibiOS/os/hal/src/hal_queues.c ****   }
 317:ChibiOS/os/hal/src/hal_queues.c **** 
 318:ChibiOS/os/hal/src/hal_queues.c ****   if (oqp->q_notify != NULL) {
 755               		.loc 1 318 0
 756 0056 EB85      		ldd r30,Y+11
 757 0058 FC85      		ldd r31,Y+12
 758 005a 3097      		sbiw r30,0
 759 005c 01F0      		breq .L44
 319:ChibiOS/os/hal/src/hal_queues.c ****     oqp->q_notify(oqp);
 760               		.loc 1 319 0
 761 005e CE01      		movw r24,r28
 762 0060 0995      		icall
 763               	.LVL49:
 764               	.L44:
 765               	.LBB116:
 766               	.LBB117:
 767               	.LBB118:
 768               		.loc 3 333 0
 769               	/* #APP */
 770               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 771 0062 7894      		sei
 772               	 ;  0 "" 2
 773               	/* #NOAPP */
 774               	.LBE118:
 775               	.LBE117:
 776               	.LBE116:
 320:ChibiOS/os/hal/src/hal_queues.c ****   }
 321:ChibiOS/os/hal/src/hal_queues.c ****   osalSysUnlock();
 322:ChibiOS/os/hal/src/hal_queues.c **** 
 323:ChibiOS/os/hal/src/hal_queues.c ****   return Q_OK;
 777               		.loc 1 323 0
 778 0064 80E0      		ldi r24,0
 779 0066 90E0      		ldi r25,0
 780               	/* epilogue start */
 324:ChibiOS/os/hal/src/hal_queues.c **** }
 781               		.loc 1 324 0
 782 0068 DF91      		pop r29
 783 006a CF91      		pop r28
 784               	.LVL50:
 785 006c 1F91      		pop r17
 786 006e 0F91      		pop r16
 787               	.LVL51:
 788 0070 FF90      		pop r15
 789               	.LVL52:
 790 0072 0895      		ret
 791               	.LVL53:
 792               	.L49:
 793               	.LBB119:
 794               	.LBB113:
 795               	.LBB114:
 796               	.LBB115:
 797               		.loc 3 333 0
 798               	/* #APP */
 799               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 800 0074 7894      		sei
 801               	 ;  0 "" 2
 802               	/* epilogue start */
 803               	/* #NOAPP */
 804               	.LBE115:
 805               	.LBE114:
 806               	.LBE113:
 807               	.LBE119:
 808               		.loc 1 324 0
 809 0076 DF91      		pop r29
 810 0078 CF91      		pop r28
 811               	.LVL54:
 812 007a 1F91      		pop r17
 813 007c 0F91      		pop r16
 814               	.LVL55:
 815 007e FF90      		pop r15
 816               	.LVL56:
 817 0080 0895      		ret
 818               		.cfi_endproc
 819               	.LFE60:
 821               		.section	.text.oqGetI,"ax",@progbits
 822               	.global	oqGetI
 824               	oqGetI:
 825               	.LFB61:
 325:ChibiOS/os/hal/src/hal_queues.c **** 
 326:ChibiOS/os/hal/src/hal_queues.c **** /**
 327:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Output queue read.
 328:ChibiOS/os/hal/src/hal_queues.c ****  * @details A byte value is read from the low end of an output queue.
 329:ChibiOS/os/hal/src/hal_queues.c ****  *
 330:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 331:ChibiOS/os/hal/src/hal_queues.c ****  * @return              The byte value from the queue.
 332:ChibiOS/os/hal/src/hal_queues.c ****  * @retval Q_EMPTY      if the queue is empty.
 333:ChibiOS/os/hal/src/hal_queues.c ****  *
 334:ChibiOS/os/hal/src/hal_queues.c ****  * @iclass
 335:ChibiOS/os/hal/src/hal_queues.c ****  */
 336:ChibiOS/os/hal/src/hal_queues.c **** msg_t oqGetI(output_queue_t *oqp) {
 826               		.loc 1 336 0
 827               		.cfi_startproc
 828               	.LVL57:
 829 0000 CF93      		push r28
 830               	.LCFI25:
 831               		.cfi_def_cfa_offset 3
 832               		.cfi_offset 28, -2
 833               	/* prologue: function */
 834               	/* frame size = 0 */
 835               	/* stack size = 1 */
 836               	.L__stack_usage = 1
 837 0002 FC01      		movw r30,r24
 337:ChibiOS/os/hal/src/hal_queues.c ****   uint8_t b;
 338:ChibiOS/os/hal/src/hal_queues.c **** 
 339:ChibiOS/os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 340:ChibiOS/os/hal/src/hal_queues.c **** 
 341:ChibiOS/os/hal/src/hal_queues.c ****   if (oqIsEmptyI(oqp)) {
 838               		.loc 1 341 0
 839 0004 A185      		ldd r26,Z+9
 840 0006 B285      		ldd r27,Z+10
 841 0008 8781      		ldd r24,Z+7
 842 000a 9085      		ldd r25,Z+8
 843               	.LVL58:
 844 000c 8A17      		cp r24,r26
 845 000e 9B07      		cpc r25,r27
 846 0010 01F0      		breq .L57
 847               	.L51:
 342:ChibiOS/os/hal/src/hal_queues.c ****     return Q_EMPTY;
 343:ChibiOS/os/hal/src/hal_queues.c ****   }
 344:ChibiOS/os/hal/src/hal_queues.c **** 
 345:ChibiOS/os/hal/src/hal_queues.c ****   oqp->q_counter++;
 848               		.loc 1 345 0
 849 0012 8181      		ldd r24,Z+1
 850 0014 9281      		ldd r25,Z+2
 851 0016 0196      		adiw r24,1
 852 0018 9283      		std Z+2,r25
 853 001a 8183      		std Z+1,r24
 346:ChibiOS/os/hal/src/hal_queues.c ****   b = *oqp->q_rdptr++;
 854               		.loc 1 346 0
 855 001c CD01      		movw r24,r26
 856 001e 0196      		adiw r24,1
 857 0020 9287      		std Z+10,r25
 858 0022 8187      		std Z+9,r24
 859 0024 CC91      		ld r28,X
 860               	.LVL59:
 347:ChibiOS/os/hal/src/hal_queues.c ****   if (oqp->q_rdptr >= oqp->q_top) {
 861               		.loc 1 347 0
 862 0026 2581      		ldd r18,Z+5
 863 0028 3681      		ldd r19,Z+6
 864 002a 8217      		cp r24,r18
 865 002c 9307      		cpc r25,r19
 866 002e 00F4      		brsh .L53
 867               	.L54:
 868 0030 CF01      		movw r24,r30
 348:ChibiOS/os/hal/src/hal_queues.c ****     oqp->q_rdptr = oqp->q_buffer;
 349:ChibiOS/os/hal/src/hal_queues.c ****   }
 350:ChibiOS/os/hal/src/hal_queues.c **** 
 351:ChibiOS/os/hal/src/hal_queues.c ****   osalThreadDequeueNextI(&oqp->q_waiting, Q_OK);
 869               		.loc 1 351 0
 870 0032 60E0      		ldi r22,0
 871 0034 70E0      		ldi r23,0
 872 0036 0E94 0000 		call osalThreadDequeueNextI
 873               	.LVL60:
 352:ChibiOS/os/hal/src/hal_queues.c **** 
 353:ChibiOS/os/hal/src/hal_queues.c ****   return (msg_t)b;
 874               		.loc 1 353 0
 875 003a 8C2F      		mov r24,r28
 876 003c 90E0      		ldi r25,0
 877               	.LVL61:
 878               	.L56:
 879               	/* epilogue start */
 354:ChibiOS/os/hal/src/hal_queues.c **** }
 880               		.loc 1 354 0
 881 003e CF91      		pop r28
 882 0040 0895      		ret
 883               	.LVL62:
 884               	.L53:
 348:ChibiOS/os/hal/src/hal_queues.c ****     oqp->q_rdptr = oqp->q_buffer;
 885               		.loc 1 348 0
 886 0042 8381      		ldd r24,Z+3
 887 0044 9481      		ldd r25,Z+4
 888 0046 9287      		std Z+10,r25
 889 0048 8187      		std Z+9,r24
 890 004a 00C0      		rjmp .L54
 891               	.LVL63:
 892               	.L57:
 341:ChibiOS/os/hal/src/hal_queues.c ****     return Q_EMPTY;
 893               		.loc 1 341 0 discriminator 1
 894 004c 8181      		ldd r24,Z+1
 895 004e 9281      		ldd r25,Z+2
 896 0050 892B      		or r24,r25
 897 0052 01F0      		breq .L51
 342:ChibiOS/os/hal/src/hal_queues.c ****   }
 898               		.loc 1 342 0
 899 0054 8DEF      		ldi r24,lo8(-3)
 900 0056 9FEF      		ldi r25,lo8(-1)
 901 0058 00C0      		rjmp .L56
 902               		.cfi_endproc
 903               	.LFE61:
 905               		.section	.text.oqWriteTimeout,"ax",@progbits
 906               	.global	oqWriteTimeout
 908               	oqWriteTimeout:
 909               	.LFB62:
 355:ChibiOS/os/hal/src/hal_queues.c **** 
 356:ChibiOS/os/hal/src/hal_queues.c **** /**
 357:ChibiOS/os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 358:ChibiOS/os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 359:ChibiOS/os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 360:ChibiOS/os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 361:ChibiOS/os/hal/src/hal_queues.c ****  *          been reset.
 362:ChibiOS/os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 363:ChibiOS/os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 364:ChibiOS/os/hal/src/hal_queues.c ****  * @note    The callback is invoked after writing each character into the
 365:ChibiOS/os/hal/src/hal_queues.c ****  *          buffer.
 366:ChibiOS/os/hal/src/hal_queues.c ****  *
 367:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 368:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 369:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 370:ChibiOS/os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 371:ChibiOS/os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 372:ChibiOS/os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 373:ChibiOS/os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 374:ChibiOS/os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 375:ChibiOS/os/hal/src/hal_queues.c ****  *                      .
 376:ChibiOS/os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 377:ChibiOS/os/hal/src/hal_queues.c ****  *
 378:ChibiOS/os/hal/src/hal_queues.c ****  * @api
 379:ChibiOS/os/hal/src/hal_queues.c ****  */
 380:ChibiOS/os/hal/src/hal_queues.c **** size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
 381:ChibiOS/os/hal/src/hal_queues.c ****                       size_t n, systime_t timeout) {
 910               		.loc 1 381 0
 911               		.cfi_startproc
 912               	.LVL64:
 913 0000 6F92      		push r6
 914               	.LCFI26:
 915               		.cfi_def_cfa_offset 3
 916               		.cfi_offset 6, -2
 917 0002 7F92      		push r7
 918               	.LCFI27:
 919               		.cfi_def_cfa_offset 4
 920               		.cfi_offset 7, -3
 921 0004 8F92      		push r8
 922               	.LCFI28:
 923               		.cfi_def_cfa_offset 5
 924               		.cfi_offset 8, -4
 925 0006 9F92      		push r9
 926               	.LCFI29:
 927               		.cfi_def_cfa_offset 6
 928               		.cfi_offset 9, -5
 929 0008 AF92      		push r10
 930               	.LCFI30:
 931               		.cfi_def_cfa_offset 7
 932               		.cfi_offset 10, -6
 933 000a BF92      		push r11
 934               	.LCFI31:
 935               		.cfi_def_cfa_offset 8
 936               		.cfi_offset 11, -7
 937 000c CF92      		push r12
 938               	.LCFI32:
 939               		.cfi_def_cfa_offset 9
 940               		.cfi_offset 12, -8
 941 000e DF92      		push r13
 942               	.LCFI33:
 943               		.cfi_def_cfa_offset 10
 944               		.cfi_offset 13, -9
 945 0010 EF92      		push r14
 946               	.LCFI34:
 947               		.cfi_def_cfa_offset 11
 948               		.cfi_offset 14, -10
 949 0012 FF92      		push r15
 950               	.LCFI35:
 951               		.cfi_def_cfa_offset 12
 952               		.cfi_offset 15, -11
 953 0014 0F93      		push r16
 954               	.LCFI36:
 955               		.cfi_def_cfa_offset 13
 956               		.cfi_offset 16, -12
 957 0016 1F93      		push r17
 958               	.LCFI37:
 959               		.cfi_def_cfa_offset 14
 960               		.cfi_offset 17, -13
 961 0018 CF93      		push r28
 962               	.LCFI38:
 963               		.cfi_def_cfa_offset 15
 964               		.cfi_offset 28, -14
 965 001a DF93      		push r29
 966               	.LCFI39:
 967               		.cfi_def_cfa_offset 16
 968               		.cfi_offset 29, -15
 969               	/* prologue: function */
 970               	/* frame size = 0 */
 971               	/* stack size = 14 */
 972               	.L__stack_usage = 14
 973 001c EC01      		movw r28,r24
 974 001e 8B01      		movw r16,r22
 975 0020 4A01      		movw r8,r20
 976 0022 5901      		movw r10,r18
 382:ChibiOS/os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 977               		.loc 1 382 0
 978 0024 CB84      		ldd r12,Y+11
 979 0026 DC84      		ldd r13,Y+12
 980               	.LVL65:
 981               	.LBB120:
 982               	.LBB121:
 983               	.LBB122:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 984               		.loc 3 325 0
 985               	/* #APP */
 986               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 987 0028 F894      		cli
 988               	 ;  0 "" 2
 989               	/* #NOAPP */
 990               	.LBE122:
 991               	.LBE121:
 992               	.LBE120:
 383:ChibiOS/os/hal/src/hal_queues.c ****   size_t w = 0;
 993               		.loc 1 383 0
 994 002a E12C      		mov r14,__zero_reg__
 995 002c F12C      		mov r15,__zero_reg__
 996               	.LVL66:
 997               	.L59:
 384:ChibiOS/os/hal/src/hal_queues.c **** 
 385:ChibiOS/os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 386:ChibiOS/os/hal/src/hal_queues.c **** 
 387:ChibiOS/os/hal/src/hal_queues.c ****   osalSysLock();
 388:ChibiOS/os/hal/src/hal_queues.c ****   while (true) {
 389:ChibiOS/os/hal/src/hal_queues.c ****     while (oqIsFullI(oqp)) {
 998               		.loc 1 389 0
 999 002e 8981      		ldd r24,Y+1
 1000 0030 9A81      		ldd r25,Y+2
 1001 0032 892B      		or r24,r25
 1002 0034 01F0      		breq .L62
 1003               	.L74:
 390:ChibiOS/os/hal/src/hal_queues.c ****       if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 391:ChibiOS/os/hal/src/hal_queues.c ****         osalSysUnlock();
 392:ChibiOS/os/hal/src/hal_queues.c ****         return w;
 393:ChibiOS/os/hal/src/hal_queues.c ****       }
 394:ChibiOS/os/hal/src/hal_queues.c ****     }
 395:ChibiOS/os/hal/src/hal_queues.c ****     oqp->q_counter--;
 1004               		.loc 1 395 0
 1005 0036 A981      		ldd r26,Y+1
 1006 0038 BA81      		ldd r27,Y+2
 1007 003a 1197      		sbiw r26,1
 1008 003c BA83      		std Y+2,r27
 1009 003e A983      		std Y+1,r26
 396:ChibiOS/os/hal/src/hal_queues.c ****     *oqp->q_wrptr++ = *bp++;
 1010               		.loc 1 396 0
 1011 0040 EF81      		ldd r30,Y+7
 1012 0042 F885      		ldd r31,Y+8
 1013 0044 CF01      		movw r24,r30
 1014 0046 0196      		adiw r24,1
 1015 0048 9887      		std Y+8,r25
 1016 004a 8F83      		std Y+7,r24
 1017 004c 3801      		movw r6,r16
 1018 004e 8FEF      		ldi r24,-1
 1019 0050 681A      		sub r6,r24
 1020 0052 780A      		sbc r7,r24
 1021               	.LVL67:
 1022 0054 D801      		movw r26,r16
 1023 0056 8C91      		ld r24,X
 1024 0058 8083      		st Z,r24
 397:ChibiOS/os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1025               		.loc 1 397 0
 1026 005a 2F81      		ldd r18,Y+7
 1027 005c 3885      		ldd r19,Y+8
 1028 005e 8D81      		ldd r24,Y+5
 1029 0060 9E81      		ldd r25,Y+6
 1030 0062 2817      		cp r18,r24
 1031 0064 3907      		cpc r19,r25
 1032 0066 00F0      		brlo .L63
 398:ChibiOS/os/hal/src/hal_queues.c ****       oqp->q_wrptr = oqp->q_buffer;
 1033               		.loc 1 398 0
 1034 0068 8B81      		ldd r24,Y+3
 1035 006a 9C81      		ldd r25,Y+4
 1036 006c 9887      		std Y+8,r25
 1037 006e 8F83      		std Y+7,r24
 1038               	.L63:
 399:ChibiOS/os/hal/src/hal_queues.c ****     }
 400:ChibiOS/os/hal/src/hal_queues.c **** 
 401:ChibiOS/os/hal/src/hal_queues.c ****     if (nfy != NULL) {
 1039               		.loc 1 401 0
 1040 0070 C114      		cp r12,__zero_reg__
 1041 0072 D104      		cpc r13,__zero_reg__
 1042 0074 01F0      		breq .L64
 402:ChibiOS/os/hal/src/hal_queues.c ****       nfy(oqp);
 1043               		.loc 1 402 0
 1044 0076 CE01      		movw r24,r28
 1045 0078 F601      		movw r30,r12
 1046 007a 0995      		icall
 1047               	.LVL68:
 1048               	.L64:
 1049               	.LBB123:
 1050               	.LBB124:
 1051               	.LBB125:
 1052               		.loc 3 333 0
 1053               	/* #APP */
 1054               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1055 007c 7894      		sei
 1056               	 ;  0 "" 2
 1057               	/* #NOAPP */
 1058               	.LBE125:
 1059               	.LBE124:
 1060               	.LBE123:
 403:ChibiOS/os/hal/src/hal_queues.c ****     }
 404:ChibiOS/os/hal/src/hal_queues.c ****     osalSysUnlock(); /* Gives a preemption chance in a controlled point.*/
 405:ChibiOS/os/hal/src/hal_queues.c **** 
 406:ChibiOS/os/hal/src/hal_queues.c ****     w++;
 1061               		.loc 1 406 0
 1062 007e FFEF      		ldi r31,-1
 1063 0080 EF1A      		sub r14,r31
 1064 0082 FF0A      		sbc r15,r31
 1065               	.LVL69:
 407:ChibiOS/os/hal/src/hal_queues.c ****     if (--n == 0U) {
 1066               		.loc 1 407 0
 1067 0084 81E0      		ldi r24,1
 1068 0086 881A      		sub r8,r24
 1069 0088 9108      		sbc r9,__zero_reg__
 1070               	.LVL70:
 1071 008a 01F0      		breq .L61
 1072               	.LBB126:
 1073               	.LBB127:
 1074               	.LBB128:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 1075               		.loc 3 325 0
 1076               	/* #APP */
 1077               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1078 008c F894      		cli
 1079               	 ;  0 "" 2
 1080               	/* #NOAPP */
 1081               	.LBE128:
 1082               	.LBE127:
 1083               	.LBE126:
 396:ChibiOS/os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1084               		.loc 1 396 0
 1085 008e 8301      		movw r16,r6
 1086               	.LVL71:
 389:ChibiOS/os/hal/src/hal_queues.c ****       if (osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 1087               		.loc 1 389 0
 1088 0090 8981      		ldd r24,Y+1
 1089 0092 9A81      		ldd r25,Y+2
 1090 0094 892B      		or r24,r25
 1091 0096 01F4      		brne .L74
 1092               	.L62:
 1093               	.LVL72:
 1094               	.LBB129:
 1095               	.LBB130:
 1096               		.loc 2 794 0
 1097 0098 B501      		movw r22,r10
 1098 009a CE01      		movw r24,r28
 1099 009c 0E94 0000 		call chSemWaitTimeoutS
 1100               	.LVL73:
 1101               	.LBE130:
 1102               	.LBE129:
 390:ChibiOS/os/hal/src/hal_queues.c ****         osalSysUnlock();
 1103               		.loc 1 390 0
 1104 00a0 892B      		or r24,r25
 1105 00a2 01F0      		breq .L59
 1106               	.LBB131:
 1107               	.LBB132:
 1108               	.LBB133:
 1109               		.loc 3 333 0
 1110               	/* #APP */
 1111               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1112 00a4 7894      		sei
 1113               	 ;  0 "" 2
 1114               	.LVL74:
 1115               	/* #NOAPP */
 1116               	.L61:
 1117               	.LBE133:
 1118               	.LBE132:
 1119               	.LBE131:
 408:ChibiOS/os/hal/src/hal_queues.c ****       return w;
 409:ChibiOS/os/hal/src/hal_queues.c ****     }
 410:ChibiOS/os/hal/src/hal_queues.c **** 
 411:ChibiOS/os/hal/src/hal_queues.c ****     osalSysLock();
 412:ChibiOS/os/hal/src/hal_queues.c ****   }
 413:ChibiOS/os/hal/src/hal_queues.c **** }
 1120               		.loc 1 413 0
 1121 00a6 C701      		movw r24,r14
 1122               	/* epilogue start */
 1123 00a8 DF91      		pop r29
 1124 00aa CF91      		pop r28
 1125               	.LVL75:
 1126 00ac 1F91      		pop r17
 1127 00ae 0F91      		pop r16
 1128 00b0 FF90      		pop r15
 1129 00b2 EF90      		pop r14
 1130               	.LVL76:
 1131 00b4 DF90      		pop r13
 1132 00b6 CF90      		pop r12
 1133               	.LVL77:
 1134 00b8 BF90      		pop r11
 1135 00ba AF90      		pop r10
 1136               	.LVL78:
 1137 00bc 9F90      		pop r9
 1138 00be 8F90      		pop r8
 1139               	.LVL79:
 1140 00c0 7F90      		pop r7
 1141 00c2 6F90      		pop r6
 1142 00c4 0895      		ret
 1143               		.cfi_endproc
 1144               	.LFE62:
 1146               		.text
 1147               	.Letext0:
 1148               		.file 4 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gc
 1149               		.file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 1150               		.file 6 "ChibiOS/os/nil/ports/AVR/compilers/GCC/niltypes.h"
 1151               		.file 7 "ChibiOS/os/nil/include/nil.h"
 1152               		.file 8 "ChibiOS/os/hal/include/hal_queues.h"
DEFINED SYMBOLS
                            *ABS*:00000000 hal_queues.c
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:2      *ABS*:0000003e __SP_H__
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:3      *ABS*:0000003d __SP_L__
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:4      *ABS*:0000003f __SREG__
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:13     .text.iqObjectInit:00000000 iqObjectInit
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:76     .text.iqResetI:00000000 iqResetI
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:108    .text.iqPutI:00000000 iqPutI
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:182    .text.iqGetTimeout:00000000 iqGetTimeout
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:339    .text.iqReadTimeout:00000000 iqReadTimeout
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:560    .text.oqObjectInit:00000000 oqObjectInit
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:621    .text.oqResetI:00000000 oqResetI
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:659    .text.oqPutTimeout:00000000 oqPutTimeout
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:824    .text.oqGetI:00000000 oqGetI
C:\Users\Noah\AppData\Local\Temp\ccMPuUwp.s:908    .text.oqWriteTimeout:00000000 oqWriteTimeout

UNDEFINED SYMBOLS
osalThreadDequeueAllI
osalThreadDequeueNextI
chSemWaitTimeoutS
