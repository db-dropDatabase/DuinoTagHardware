   1               		.file	"pal.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.palReadBus,"ax",@progbits
  11               	.global	palReadBus
  13               	palReadBus:
  14               	.LFB136:
  15               		.file 1 "ChibiOS/os/hal/src/pal.c"
   1:ChibiOS/os/hal/src/pal.c **** /*
   2:ChibiOS/os/hal/src/pal.c ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:ChibiOS/os/hal/src/pal.c **** 
   4:ChibiOS/os/hal/src/pal.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:ChibiOS/os/hal/src/pal.c ****     you may not use this file except in compliance with the License.
   6:ChibiOS/os/hal/src/pal.c ****     You may obtain a copy of the License at
   7:ChibiOS/os/hal/src/pal.c **** 
   8:ChibiOS/os/hal/src/pal.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:ChibiOS/os/hal/src/pal.c **** 
  10:ChibiOS/os/hal/src/pal.c ****     Unless required by applicable law or agreed to in writing, software
  11:ChibiOS/os/hal/src/pal.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:ChibiOS/os/hal/src/pal.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:ChibiOS/os/hal/src/pal.c ****     See the License for the specific language governing permissions and
  14:ChibiOS/os/hal/src/pal.c ****     limitations under the License.
  15:ChibiOS/os/hal/src/pal.c **** */
  16:ChibiOS/os/hal/src/pal.c **** 
  17:ChibiOS/os/hal/src/pal.c **** /**
  18:ChibiOS/os/hal/src/pal.c ****  * @file    pal.c
  19:ChibiOS/os/hal/src/pal.c ****  * @brief   I/O Ports Abstraction Layer code.
  20:ChibiOS/os/hal/src/pal.c ****  *
  21:ChibiOS/os/hal/src/pal.c ****  * @addtogroup PAL
  22:ChibiOS/os/hal/src/pal.c ****  * @{
  23:ChibiOS/os/hal/src/pal.c ****  */
  24:ChibiOS/os/hal/src/pal.c **** 
  25:ChibiOS/os/hal/src/pal.c **** #include "hal.h"
  26:ChibiOS/os/hal/src/pal.c **** 
  27:ChibiOS/os/hal/src/pal.c **** #if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  28:ChibiOS/os/hal/src/pal.c **** 
  29:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  30:ChibiOS/os/hal/src/pal.c **** /* Driver local definitions.                                                 */
  31:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  32:ChibiOS/os/hal/src/pal.c **** 
  33:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  34:ChibiOS/os/hal/src/pal.c **** /* Driver exported variables.                                                */
  35:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  36:ChibiOS/os/hal/src/pal.c **** 
  37:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  38:ChibiOS/os/hal/src/pal.c **** /* Driver local variables and types.                                         */
  39:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  40:ChibiOS/os/hal/src/pal.c **** 
  41:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  42:ChibiOS/os/hal/src/pal.c **** /* Driver local functions.                                                   */
  43:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  44:ChibiOS/os/hal/src/pal.c **** 
  45:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  46:ChibiOS/os/hal/src/pal.c **** /* Driver exported functions.                                                */
  47:ChibiOS/os/hal/src/pal.c **** /*===========================================================================*/
  48:ChibiOS/os/hal/src/pal.c **** 
  49:ChibiOS/os/hal/src/pal.c **** /**
  50:ChibiOS/os/hal/src/pal.c ****  * @brief   Read from an I/O bus.
  51:ChibiOS/os/hal/src/pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
  52:ChibiOS/os/hal/src/pal.c ****  *          architectures, for atomicity and/or portability reasons you may
  53:ChibiOS/os/hal/src/pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
  54:ChibiOS/os/hal/src/pal.c ****  *          @p osalSysUnlock().
  55:ChibiOS/os/hal/src/pal.c ****  * @note    The function internally uses the @p palReadGroup() macro. The use
  56:ChibiOS/os/hal/src/pal.c ****  *          of this function is preferred when you value code size, readability
  57:ChibiOS/os/hal/src/pal.c ****  *          and error checking over speed.
  58:ChibiOS/os/hal/src/pal.c ****  * @note    The function can be called from any context.
  59:ChibiOS/os/hal/src/pal.c ****  *
  60:ChibiOS/os/hal/src/pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
  61:ChibiOS/os/hal/src/pal.c ****  * @return              The bus logical states.
  62:ChibiOS/os/hal/src/pal.c ****  *
  63:ChibiOS/os/hal/src/pal.c ****  * @special
  64:ChibiOS/os/hal/src/pal.c ****  */
  65:ChibiOS/os/hal/src/pal.c **** ioportmask_t palReadBus(IOBus *bus) {
  16               		.loc 1 65 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
  66:ChibiOS/os/hal/src/pal.c **** 
  67:ChibiOS/os/hal/src/pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
  68:ChibiOS/os/hal/src/pal.c **** 
  69:ChibiOS/os/hal/src/pal.c ****   return palReadGroup(bus->portid, bus->mask, bus->offset);
  24               		.loc 1 69 0
  25 0002 A081      		ld r26,Z
  26 0004 B181      		ldd r27,Z+1
  27 0006 2C91      		ld r18,X
  28 0008 30E0      		ldi r19,0
  29 000a 0380      		ldd r0,Z+3
  30 000c 00C0      		rjmp 2f
  31               		1:
  32 000e 3595      		asr r19
  33 0010 2795      		ror r18
  34               		2:
  35 0012 0A94      		dec r0
  36 0014 02F4      		brpl 1b
  37 0016 8281      		ldd r24,Z+2
  38               	.LVL1:
  70:ChibiOS/os/hal/src/pal.c **** }
  39               		.loc 1 70 0
  40 0018 8223      		and r24,r18
  41 001a 0895      		ret
  42               		.cfi_endproc
  43               	.LFE136:
  45               		.section	.text.palWriteBus,"ax",@progbits
  46               	.global	palWriteBus
  48               	palWriteBus:
  49               	.LFB137:
  71:ChibiOS/os/hal/src/pal.c **** 
  72:ChibiOS/os/hal/src/pal.c **** /**
  73:ChibiOS/os/hal/src/pal.c ****  * @brief   Write to an I/O bus.
  74:ChibiOS/os/hal/src/pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
  75:ChibiOS/os/hal/src/pal.c ****  *          architectures, for atomicity and/or portability reasons you may
  76:ChibiOS/os/hal/src/pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
  77:ChibiOS/os/hal/src/pal.c ****  *          @p osalSysUnlock().
  78:ChibiOS/os/hal/src/pal.c ****  * @note    The default implementation is non atomic and not necessarily
  79:ChibiOS/os/hal/src/pal.c ****  *          optimal. Low level drivers may  optimize the function by using
  80:ChibiOS/os/hal/src/pal.c ****  *          specific hardware or coding.
  81:ChibiOS/os/hal/src/pal.c ****  * @note    The function can be called from any context.
  82:ChibiOS/os/hal/src/pal.c ****  *
  83:ChibiOS/os/hal/src/pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
  84:ChibiOS/os/hal/src/pal.c ****  * @param[in] bits      the bits to be written on the I/O bus. Values exceeding
  85:ChibiOS/os/hal/src/pal.c ****  *                      the bus width are masked so most significant bits are
  86:ChibiOS/os/hal/src/pal.c ****  *                      lost.
  87:ChibiOS/os/hal/src/pal.c ****  *
  88:ChibiOS/os/hal/src/pal.c ****  * @special
  89:ChibiOS/os/hal/src/pal.c ****  */
  90:ChibiOS/os/hal/src/pal.c **** void palWriteBus(IOBus *bus, ioportmask_t bits) {
  50               		.loc 1 90 0
  51               		.cfi_startproc
  52               	.LVL2:
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  57 0000 DC01      		movw r26,r24
  91:ChibiOS/os/hal/src/pal.c **** 
  92:ChibiOS/os/hal/src/pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
  93:ChibiOS/os/hal/src/pal.c **** 
  94:ChibiOS/os/hal/src/pal.c ****   palWriteGroup(bus->portid, bus->mask, bus->offset, bits);
  58               		.loc 1 94 0
  59 0002 ED91      		ld r30,X+
  60 0004 FC91      		ld r31,X
  61 0006 1197      		sbiw r26,1
  62 0008 2281      		ldd r18,Z+2
  63 000a 1296      		adiw r26,2
  64 000c 9C91      		ld r25,X
  65 000e 1297      		sbiw r26,2
  66 0010 1396      		adiw r26,3
  67 0012 3C91      		ld r19,X
  68 0014 862F      		mov r24,r22
  69               	.LVL3:
  70 0016 8923      		and r24,r25
  71 0018 682F      		mov r22,r24
  72               	.LVL4:
  73 001a 032E      		mov r0,r19
  74 001c 00C0      		rjmp 2f
  75               		1:
  76 001e 660F      		lsl r22
  77               		2:
  78 0020 0A94      		dec r0
  79 0022 02F4      		brpl 1b
  80 0024 892F      		mov r24,r25
  81 0026 00C0      		rjmp 2f
  82               		1:
  83 0028 880F      		lsl r24
  84               		2:
  85 002a 3A95      		dec r19
  86 002c 02F4      		brpl 1b
  87 002e 8095      		com r24
  88 0030 8223      		and r24,r18
  89 0032 682B      		or r22,r24
  90 0034 6283      		std Z+2,r22
  91 0036 0895      		ret
  92               		.cfi_endproc
  93               	.LFE137:
  95               		.section	.text.palSetBusMode,"ax",@progbits
  96               	.global	palSetBusMode
  98               	palSetBusMode:
  99               	.LFB138:
  95:ChibiOS/os/hal/src/pal.c **** }
  96:ChibiOS/os/hal/src/pal.c **** 
  97:ChibiOS/os/hal/src/pal.c **** /**
  98:ChibiOS/os/hal/src/pal.c ****  * @brief   Programs a bus with the specified mode.
  99:ChibiOS/os/hal/src/pal.c ****  * @note    The operation is not guaranteed to be atomic on all the
 100:ChibiOS/os/hal/src/pal.c ****  *          architectures, for atomicity and/or portability reasons you may
 101:ChibiOS/os/hal/src/pal.c ****  *          need to enclose port I/O operations between @p osalSysLock() and
 102:ChibiOS/os/hal/src/pal.c ****  *          @p osalSysUnlock().
 103:ChibiOS/os/hal/src/pal.c ****  * @note    The default implementation is non atomic and not necessarily
 104:ChibiOS/os/hal/src/pal.c ****  *          optimal. Low level drivers may  optimize the function by using
 105:ChibiOS/os/hal/src/pal.c ****  *          specific hardware or coding.
 106:ChibiOS/os/hal/src/pal.c ****  * @note    The function can be called from any context.
 107:ChibiOS/os/hal/src/pal.c ****  *
 108:ChibiOS/os/hal/src/pal.c ****  * @param[in] bus       the I/O bus, pointer to a @p IOBus structure
 109:ChibiOS/os/hal/src/pal.c ****  * @param[in] mode      the mode
 110:ChibiOS/os/hal/src/pal.c ****  *
 111:ChibiOS/os/hal/src/pal.c ****  * @special
 112:ChibiOS/os/hal/src/pal.c ****  */
 113:ChibiOS/os/hal/src/pal.c **** void palSetBusMode(IOBus *bus, iomode_t mode) {
 100               		.loc 1 113 0
 101               		.cfi_startproc
 102               	.LVL5:
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	/* stack size = 0 */
 106               	.L__stack_usage = 0
 107 0000 FC01      		movw r30,r24
 108 0002 462F      		mov r20,r22
 114:ChibiOS/os/hal/src/pal.c **** 
 115:ChibiOS/os/hal/src/pal.c ****   osalDbgCheck((bus != NULL) && (bus->offset < PAL_IOPORTS_WIDTH));
 116:ChibiOS/os/hal/src/pal.c **** 
 117:ChibiOS/os/hal/src/pal.c ****   palSetGroupMode(bus->portid, bus->mask, bus->offset, mode);
 109               		.loc 1 117 0
 110 0004 2281      		ldd r18,Z+2
 111 0006 30E0      		ldi r19,0
 112 0008 B901      		movw r22,r18
 113               	.LVL6:
 114 000a 0380      		ldd r0,Z+3
 115 000c 00C0      		rjmp 2f
 116               		1:
 117 000e 660F      		lsl r22
 118 0010 771F      		rol r23
 119               		2:
 120 0012 0A94      		dec r0
 121 0014 02F4      		brpl 1b
 122 0016 8081      		ld r24,Z
 123 0018 9181      		ldd r25,Z+1
 124               	.LVL7:
 125 001a 0C94 0000 		jmp _pal_lld_setgroupmode
 126               	.LVL8:
 127               		.cfi_endproc
 128               	.LFE138:
 130               		.text
 131               	.Letext0:
 132               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 133               		.file 3 "./ChibiOS/os/rt/ports/AVR/compilers/GCC/chtypes.h"
 134               		.file 4 "./ChibiOS/os/rt/include/chsystypes.h"
 135               		.file 5 "./ChibiOS/os/rt/include/chschd.h"
 136               		.file 6 "./ChibiOS/os/rt/ports/AVR/chcore.h"
 137               		.file 7 "./ChibiOS/os/rt/include/chsem.h"
 138               		.file 8 "./ChibiOS/os/rt/include/chmtx.h"
 139               		.file 9 "./ChibiOS/os/hal/ports/AVR/pal_lld.h"
 140               		.file 10 "./ChibiOS/os/hal/include/pal.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pal.c
C:\Users\Noah\AppData\Local\Temp\ccNgotV5.s:2      *ABS*:0000003e __SP_H__
C:\Users\Noah\AppData\Local\Temp\ccNgotV5.s:3      *ABS*:0000003d __SP_L__
C:\Users\Noah\AppData\Local\Temp\ccNgotV5.s:4      *ABS*:0000003f __SREG__
C:\Users\Noah\AppData\Local\Temp\ccNgotV5.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Noah\AppData\Local\Temp\ccNgotV5.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Noah\AppData\Local\Temp\ccNgotV5.s:13     .text.palReadBus:00000000 palReadBus
C:\Users\Noah\AppData\Local\Temp\ccNgotV5.s:48     .text.palWriteBus:00000000 palWriteBus
C:\Users\Noah\AppData\Local\Temp\ccNgotV5.s:98     .text.palSetBusMode:00000000 palSetBusMode

UNDEFINED SYMBOLS
_pal_lld_setgroupmode
