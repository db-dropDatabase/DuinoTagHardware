   1               		.file	"serial.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.readt,"ax",@progbits
  12               	readt:
  13               	.LFB143:
  14               		.file 1 "ChibiOS/os/hal/src/serial.c"
   1:ChibiOS/os/hal/src/serial.c **** /*
   2:ChibiOS/os/hal/src/serial.c ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:ChibiOS/os/hal/src/serial.c **** 
   4:ChibiOS/os/hal/src/serial.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:ChibiOS/os/hal/src/serial.c ****     you may not use this file except in compliance with the License.
   6:ChibiOS/os/hal/src/serial.c ****     You may obtain a copy of the License at
   7:ChibiOS/os/hal/src/serial.c **** 
   8:ChibiOS/os/hal/src/serial.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:ChibiOS/os/hal/src/serial.c **** 
  10:ChibiOS/os/hal/src/serial.c ****     Unless required by applicable law or agreed to in writing, software
  11:ChibiOS/os/hal/src/serial.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:ChibiOS/os/hal/src/serial.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:ChibiOS/os/hal/src/serial.c ****     See the License for the specific language governing permissions and
  14:ChibiOS/os/hal/src/serial.c ****     limitations under the License.
  15:ChibiOS/os/hal/src/serial.c **** */
  16:ChibiOS/os/hal/src/serial.c **** 
  17:ChibiOS/os/hal/src/serial.c **** /**
  18:ChibiOS/os/hal/src/serial.c ****  * @file    serial.c
  19:ChibiOS/os/hal/src/serial.c ****  * @brief   Serial Driver code.
  20:ChibiOS/os/hal/src/serial.c ****  *
  21:ChibiOS/os/hal/src/serial.c ****  * @addtogroup SERIAL
  22:ChibiOS/os/hal/src/serial.c ****  * @{
  23:ChibiOS/os/hal/src/serial.c ****  */
  24:ChibiOS/os/hal/src/serial.c **** 
  25:ChibiOS/os/hal/src/serial.c **** #include "hal.h"
  26:ChibiOS/os/hal/src/serial.c **** 
  27:ChibiOS/os/hal/src/serial.c **** #if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  28:ChibiOS/os/hal/src/serial.c **** 
  29:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  30:ChibiOS/os/hal/src/serial.c **** /* Driver local definitions.                                                 */
  31:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  32:ChibiOS/os/hal/src/serial.c **** 
  33:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  34:ChibiOS/os/hal/src/serial.c **** /* Driver exported variables.                                                */
  35:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  36:ChibiOS/os/hal/src/serial.c **** 
  37:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  38:ChibiOS/os/hal/src/serial.c **** /* Driver local variables and types.                                         */
  39:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  40:ChibiOS/os/hal/src/serial.c **** 
  41:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  42:ChibiOS/os/hal/src/serial.c **** /* Driver local functions.                                                   */
  43:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  44:ChibiOS/os/hal/src/serial.c **** 
  45:ChibiOS/os/hal/src/serial.c **** /*
  46:ChibiOS/os/hal/src/serial.c ****  * Interface implementation, the following functions just invoke the equivalent
  47:ChibiOS/os/hal/src/serial.c ****  * queue-level function or macro.
  48:ChibiOS/os/hal/src/serial.c ****  */
  49:ChibiOS/os/hal/src/serial.c **** 
  50:ChibiOS/os/hal/src/serial.c **** static size_t write(void *ip, const uint8_t *bp, size_t n) {
  51:ChibiOS/os/hal/src/serial.c **** 
  52:ChibiOS/os/hal/src/serial.c ****   return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  53:ChibiOS/os/hal/src/serial.c ****                         n, TIME_INFINITE);
  54:ChibiOS/os/hal/src/serial.c **** }
  55:ChibiOS/os/hal/src/serial.c **** 
  56:ChibiOS/os/hal/src/serial.c **** static size_t read(void *ip, uint8_t *bp, size_t n) {
  57:ChibiOS/os/hal/src/serial.c **** 
  58:ChibiOS/os/hal/src/serial.c ****   return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  59:ChibiOS/os/hal/src/serial.c ****                        n, TIME_INFINITE);
  60:ChibiOS/os/hal/src/serial.c **** }
  61:ChibiOS/os/hal/src/serial.c **** 
  62:ChibiOS/os/hal/src/serial.c **** static msg_t put(void *ip, uint8_t b) {
  63:ChibiOS/os/hal/src/serial.c **** 
  64:ChibiOS/os/hal/src/serial.c ****   return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  65:ChibiOS/os/hal/src/serial.c **** }
  66:ChibiOS/os/hal/src/serial.c **** 
  67:ChibiOS/os/hal/src/serial.c **** static msg_t get(void *ip) {
  68:ChibiOS/os/hal/src/serial.c **** 
  69:ChibiOS/os/hal/src/serial.c ****   return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  70:ChibiOS/os/hal/src/serial.c **** }
  71:ChibiOS/os/hal/src/serial.c **** 
  72:ChibiOS/os/hal/src/serial.c **** static msg_t putt(void *ip, uint8_t b, systime_t timeout) {
  73:ChibiOS/os/hal/src/serial.c **** 
  74:ChibiOS/os/hal/src/serial.c ****   return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  75:ChibiOS/os/hal/src/serial.c **** }
  76:ChibiOS/os/hal/src/serial.c **** 
  77:ChibiOS/os/hal/src/serial.c **** static msg_t gett(void *ip, systime_t timeout) {
  78:ChibiOS/os/hal/src/serial.c **** 
  79:ChibiOS/os/hal/src/serial.c ****   return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  80:ChibiOS/os/hal/src/serial.c **** }
  81:ChibiOS/os/hal/src/serial.c **** 
  82:ChibiOS/os/hal/src/serial.c **** static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
  83:ChibiOS/os/hal/src/serial.c **** 
  84:ChibiOS/os/hal/src/serial.c ****   return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  85:ChibiOS/os/hal/src/serial.c **** }
  86:ChibiOS/os/hal/src/serial.c **** 
  87:ChibiOS/os/hal/src/serial.c **** static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
  15               		.loc 1 87 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  88:ChibiOS/os/hal/src/serial.c **** 
  89:ChibiOS/os/hal/src/serial.c ****   return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  22               		.loc 1 89 0
  23 0000 0596      		adiw r24,5
  24               	.LVL1:
  25 0002 0C94 0000 		jmp chIQReadTimeout
  26               	.LVL2:
  27               		.cfi_endproc
  28               	.LFE143:
  30               		.section	.text.read,"ax",@progbits
  32               	read:
  33               	.LFB137:
  56:ChibiOS/os/hal/src/serial.c **** 
  34               		.loc 1 56 0
  35               		.cfi_startproc
  36               	.LVL3:
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* stack size = 0 */
  40               	.L__stack_usage = 0
  58:ChibiOS/os/hal/src/serial.c ****                        n, TIME_INFINITE);
  41               		.loc 1 58 0
  42 0000 2FEF      		ldi r18,lo8(-1)
  43 0002 3FEF      		ldi r19,lo8(-1)
  44 0004 0596      		adiw r24,5
  45               	.LVL4:
  46 0006 0C94 0000 		jmp chIQReadTimeout
  47               	.LVL5:
  48               		.cfi_endproc
  49               	.LFE137:
  51               		.section	.text.writet,"ax",@progbits
  53               	writet:
  54               	.LFB142:
  82:ChibiOS/os/hal/src/serial.c **** 
  55               		.loc 1 82 0
  56               		.cfi_startproc
  57               	.LVL6:
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 0 */
  61               	.L__stack_usage = 0
  84:ChibiOS/os/hal/src/serial.c **** }
  62               		.loc 1 84 0
  63 0000 4796      		adiw r24,23
  64               	.LVL7:
  65 0002 0C94 0000 		jmp chOQWriteTimeout
  66               	.LVL8:
  67               		.cfi_endproc
  68               	.LFE142:
  70               		.section	.text.write,"ax",@progbits
  72               	write:
  73               	.LFB136:
  50:ChibiOS/os/hal/src/serial.c **** 
  74               		.loc 1 50 0
  75               		.cfi_startproc
  76               	.LVL9:
  77               	/* prologue: function */
  78               	/* frame size = 0 */
  79               	/* stack size = 0 */
  80               	.L__stack_usage = 0
  52:ChibiOS/os/hal/src/serial.c ****                         n, TIME_INFINITE);
  81               		.loc 1 52 0
  82 0000 2FEF      		ldi r18,lo8(-1)
  83 0002 3FEF      		ldi r19,lo8(-1)
  84 0004 4796      		adiw r24,23
  85               	.LVL10:
  86 0006 0C94 0000 		jmp chOQWriteTimeout
  87               	.LVL11:
  88               		.cfi_endproc
  89               	.LFE136:
  91               		.section	.text.gett,"ax",@progbits
  93               	gett:
  94               	.LFB141:
  77:ChibiOS/os/hal/src/serial.c **** 
  95               		.loc 1 77 0
  96               		.cfi_startproc
  97               	.LVL12:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
  79:ChibiOS/os/hal/src/serial.c **** }
 102               		.loc 1 79 0
 103 0000 0596      		adiw r24,5
 104               	.LVL13:
 105 0002 0C94 0000 		jmp chIQGetTimeout
 106               	.LVL14:
 107               		.cfi_endproc
 108               	.LFE141:
 110               		.section	.text.get,"ax",@progbits
 112               	get:
 113               	.LFB139:
  67:ChibiOS/os/hal/src/serial.c **** 
 114               		.loc 1 67 0
 115               		.cfi_startproc
 116               	.LVL15:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
  69:ChibiOS/os/hal/src/serial.c **** }
 121               		.loc 1 69 0
 122 0000 6FEF      		ldi r22,lo8(-1)
 123 0002 7FEF      		ldi r23,lo8(-1)
 124 0004 0596      		adiw r24,5
 125               	.LVL16:
 126 0006 0C94 0000 		jmp chIQGetTimeout
 127               	.LVL17:
 128               		.cfi_endproc
 129               	.LFE139:
 131               		.section	.text.putt,"ax",@progbits
 133               	putt:
 134               	.LFB140:
  72:ChibiOS/os/hal/src/serial.c **** 
 135               		.loc 1 72 0
 136               		.cfi_startproc
 137               	.LVL18:
 138               	/* prologue: function */
 139               	/* frame size = 0 */
 140               	/* stack size = 0 */
 141               	.L__stack_usage = 0
  74:ChibiOS/os/hal/src/serial.c **** }
 142               		.loc 1 74 0
 143 0000 4796      		adiw r24,23
 144               	.LVL19:
 145 0002 0C94 0000 		jmp chOQPutTimeout
 146               	.LVL20:
 147               		.cfi_endproc
 148               	.LFE140:
 150               		.section	.text.put,"ax",@progbits
 152               	put:
 153               	.LFB138:
  62:ChibiOS/os/hal/src/serial.c **** 
 154               		.loc 1 62 0
 155               		.cfi_startproc
 156               	.LVL21:
 157               	/* prologue: function */
 158               	/* frame size = 0 */
 159               	/* stack size = 0 */
 160               	.L__stack_usage = 0
  64:ChibiOS/os/hal/src/serial.c **** }
 161               		.loc 1 64 0
 162 0000 4FEF      		ldi r20,lo8(-1)
 163 0002 5FEF      		ldi r21,lo8(-1)
 164 0004 4796      		adiw r24,23
 165               	.LVL22:
 166 0006 0C94 0000 		jmp chOQPutTimeout
 167               	.LVL23:
 168               		.cfi_endproc
 169               	.LFE138:
 171               		.section	.text.sdInit,"ax",@progbits
 172               	.global	sdInit
 174               	sdInit:
 175               	.LFB144:
  90:ChibiOS/os/hal/src/serial.c **** }
  91:ChibiOS/os/hal/src/serial.c **** 
  92:ChibiOS/os/hal/src/serial.c **** static const struct SerialDriverVMT vmt = {
  93:ChibiOS/os/hal/src/serial.c ****   write, read, put, get,
  94:ChibiOS/os/hal/src/serial.c ****   putt, gett, writet, readt
  95:ChibiOS/os/hal/src/serial.c **** };
  96:ChibiOS/os/hal/src/serial.c **** 
  97:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
  98:ChibiOS/os/hal/src/serial.c **** /* Driver exported functions.                                                */
  99:ChibiOS/os/hal/src/serial.c **** /*===========================================================================*/
 100:ChibiOS/os/hal/src/serial.c **** 
 101:ChibiOS/os/hal/src/serial.c **** /**
 102:ChibiOS/os/hal/src/serial.c ****  * @brief   Serial Driver initialization.
 103:ChibiOS/os/hal/src/serial.c ****  * @note    This function is implicitly invoked by @p halInit(), there is
 104:ChibiOS/os/hal/src/serial.c ****  *          no need to explicitly initialize the driver.
 105:ChibiOS/os/hal/src/serial.c ****  *
 106:ChibiOS/os/hal/src/serial.c ****  * @init
 107:ChibiOS/os/hal/src/serial.c ****  */
 108:ChibiOS/os/hal/src/serial.c **** void sdInit(void) {
 176               		.loc 1 108 0
 177               		.cfi_startproc
 178               	/* prologue: function */
 179               	/* frame size = 0 */
 180               	/* stack size = 0 */
 181               	.L__stack_usage = 0
 109:ChibiOS/os/hal/src/serial.c **** 
 110:ChibiOS/os/hal/src/serial.c ****   sd_lld_init();
 182               		.loc 1 110 0
 183 0000 0C94 0000 		jmp sd_lld_init
 184               	.LVL24:
 185               		.cfi_endproc
 186               	.LFE144:
 188               		.section	.text.sdObjectInit,"ax",@progbits
 189               	.global	sdObjectInit
 191               	sdObjectInit:
 192               	.LFB145:
 111:ChibiOS/os/hal/src/serial.c **** }
 112:ChibiOS/os/hal/src/serial.c **** 
 113:ChibiOS/os/hal/src/serial.c **** /**
 114:ChibiOS/os/hal/src/serial.c ****  * @brief   Initializes a generic full duplex driver object.
 115:ChibiOS/os/hal/src/serial.c ****  * @details The HW dependent part of the initialization has to be performed
 116:ChibiOS/os/hal/src/serial.c ****  *          outside, usually in the hardware initialization code.
 117:ChibiOS/os/hal/src/serial.c ****  *
 118:ChibiOS/os/hal/src/serial.c ****  * @param[out] sdp      pointer to a @p SerialDriver structure
 119:ChibiOS/os/hal/src/serial.c ****  * @param[in] inotify   pointer to a callback function that is invoked when
 120:ChibiOS/os/hal/src/serial.c ****  *                      some data is read from the Queue. The value can be
 121:ChibiOS/os/hal/src/serial.c ****  *                      @p NULL.
 122:ChibiOS/os/hal/src/serial.c ****  * @param[in] onotify   pointer to a callback function that is invoked when
 123:ChibiOS/os/hal/src/serial.c ****  *                      some data is written in the Queue. The value can be
 124:ChibiOS/os/hal/src/serial.c ****  *                      @p NULL.
 125:ChibiOS/os/hal/src/serial.c ****  *
 126:ChibiOS/os/hal/src/serial.c ****  * @init
 127:ChibiOS/os/hal/src/serial.c ****  */
 128:ChibiOS/os/hal/src/serial.c **** void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 193               		.loc 1 128 0
 194               		.cfi_startproc
 195               	.LVL25:
 196 0000 EF92      		push r14
 197               	.LCFI0:
 198               		.cfi_def_cfa_offset 3
 199               		.cfi_offset 14, -2
 200 0002 FF92      		push r15
 201               	.LCFI1:
 202               		.cfi_def_cfa_offset 4
 203               		.cfi_offset 15, -3
 204 0004 0F93      		push r16
 205               	.LCFI2:
 206               		.cfi_def_cfa_offset 5
 207               		.cfi_offset 16, -4
 208 0006 1F93      		push r17
 209               	.LCFI3:
 210               		.cfi_def_cfa_offset 6
 211               		.cfi_offset 17, -5
 212 0008 CF93      		push r28
 213               	.LCFI4:
 214               		.cfi_def_cfa_offset 7
 215               		.cfi_offset 28, -6
 216 000a DF93      		push r29
 217               	.LCFI5:
 218               		.cfi_def_cfa_offset 8
 219               		.cfi_offset 29, -7
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 6 */
 223               	.L__stack_usage = 6
 224 000c EC01      		movw r28,r24
 225 000e 9B01      		movw r18,r22
 226 0010 7A01      		movw r14,r20
 129:ChibiOS/os/hal/src/serial.c **** 
 130:ChibiOS/os/hal/src/serial.c ****   sdp->vmt = &vmt;
 227               		.loc 1 130 0
 228 0012 FC01      		movw r30,r24
 229 0014 80E0      		ldi r24,lo8(vmt)
 230 0016 90E0      		ldi r25,hi8(vmt)
 231               	.LVL26:
 232 0018 8193      		st Z+,r24
 233 001a 9193      		st Z+,r25
 234               	.LVL27:
 235               	.LBB58:
 236               	.LBB59:
 237               	.LBB60:
 238               		.file 2 "./ChibiOS/os/rt/include/chevents.h"
   1:./ChibiOS/os/rt/include/chevents.h **** /*
   2:./ChibiOS/os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3:./ChibiOS/os/rt/include/chevents.h **** 
   4:./ChibiOS/os/rt/include/chevents.h ****     This file is part of ChibiOS.
   5:./ChibiOS/os/rt/include/chevents.h **** 
   6:./ChibiOS/os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./ChibiOS/os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   8:./ChibiOS/os/rt/include/chevents.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./ChibiOS/os/rt/include/chevents.h ****     (at your option) any later version.
  10:./ChibiOS/os/rt/include/chevents.h **** 
  11:./ChibiOS/os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./ChibiOS/os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./ChibiOS/os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./ChibiOS/os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:./ChibiOS/os/rt/include/chevents.h **** 
  16:./ChibiOS/os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:./ChibiOS/os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./ChibiOS/os/rt/include/chevents.h **** */
  19:./ChibiOS/os/rt/include/chevents.h **** /*
  20:./ChibiOS/os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:./ChibiOS/os/rt/include/chevents.h ****  */
  22:./ChibiOS/os/rt/include/chevents.h **** 
  23:./ChibiOS/os/rt/include/chevents.h **** /**
  24:./ChibiOS/os/rt/include/chevents.h ****  * @file    chevents.h
  25:./ChibiOS/os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:./ChibiOS/os/rt/include/chevents.h ****  *
  27:./ChibiOS/os/rt/include/chevents.h ****  * @addtogroup events
  28:./ChibiOS/os/rt/include/chevents.h ****  * @{
  29:./ChibiOS/os/rt/include/chevents.h ****  */
  30:./ChibiOS/os/rt/include/chevents.h **** 
  31:./ChibiOS/os/rt/include/chevents.h **** #ifndef _CHEVENTS_H_
  32:./ChibiOS/os/rt/include/chevents.h **** #define _CHEVENTS_H_
  33:./ChibiOS/os/rt/include/chevents.h **** 
  34:./ChibiOS/os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:./ChibiOS/os/rt/include/chevents.h **** 
  36:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  37:./ChibiOS/os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  39:./ChibiOS/os/rt/include/chevents.h **** 
  40:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  41:./ChibiOS/os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  43:./ChibiOS/os/rt/include/chevents.h **** 
  44:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  45:./ChibiOS/os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  47:./ChibiOS/os/rt/include/chevents.h **** 
  48:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  49:./ChibiOS/os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  51:./ChibiOS/os/rt/include/chevents.h **** 
  52:./ChibiOS/os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  53:./ChibiOS/os/rt/include/chevents.h **** 
  54:./ChibiOS/os/rt/include/chevents.h **** /**
  55:./ChibiOS/os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  56:./ChibiOS/os/rt/include/chevents.h ****  */
  57:./ChibiOS/os/rt/include/chevents.h **** struct event_listener {
  58:./ChibiOS/os/rt/include/chevents.h ****   event_listener_t      *el_next;       /**< @brief Next Event Listener
  59:./ChibiOS/os/rt/include/chevents.h ****                                                     registered on the event
  60:./ChibiOS/os/rt/include/chevents.h ****                                                     source.                 */
  61:./ChibiOS/os/rt/include/chevents.h ****   thread_t              *el_listener;   /**< @brief Thread interested in the
  62:./ChibiOS/os/rt/include/chevents.h ****                                                     event source.           */
  63:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t           el_events;      /**< @brief Events to be set in
  64:./ChibiOS/os/rt/include/chevents.h ****                                                     the listening thread.   */
  65:./ChibiOS/os/rt/include/chevents.h ****   eventflags_t          el_flags;       /**< @brief Flags added to the listener
  66:./ChibiOS/os/rt/include/chevents.h ****                                                     by the event source.    */
  67:./ChibiOS/os/rt/include/chevents.h ****   eventflags_t          el_wflags;      /**< @brief Flags that this listener
  68:./ChibiOS/os/rt/include/chevents.h ****                                                     interested in.          */
  69:./ChibiOS/os/rt/include/chevents.h **** };
  70:./ChibiOS/os/rt/include/chevents.h **** 
  71:./ChibiOS/os/rt/include/chevents.h **** /**
  72:./ChibiOS/os/rt/include/chevents.h ****  * @brief   Event Source structure.
  73:./ChibiOS/os/rt/include/chevents.h ****  */
  74:./ChibiOS/os/rt/include/chevents.h **** typedef struct event_source {
  75:./ChibiOS/os/rt/include/chevents.h ****   event_listener_t      *es_next;       /**< @brief First Event Listener
  76:./ChibiOS/os/rt/include/chevents.h ****                                                     registered on the Event
  77:./ChibiOS/os/rt/include/chevents.h ****                                                     Source.                 */
  78:./ChibiOS/os/rt/include/chevents.h **** } event_source_t;
  79:./ChibiOS/os/rt/include/chevents.h **** 
  80:./ChibiOS/os/rt/include/chevents.h **** /**
  81:./ChibiOS/os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  82:./ChibiOS/os/rt/include/chevents.h ****  */
  83:./ChibiOS/os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  84:./ChibiOS/os/rt/include/chevents.h **** 
  85:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  86:./ChibiOS/os/rt/include/chevents.h **** /* Module macros.                                                            */
  87:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
  88:./ChibiOS/os/rt/include/chevents.h **** 
  89:./ChibiOS/os/rt/include/chevents.h **** /**
  90:./ChibiOS/os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  91:./ChibiOS/os/rt/include/chevents.h ****  */
  92:./ChibiOS/os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  93:./ChibiOS/os/rt/include/chevents.h **** 
  94:./ChibiOS/os/rt/include/chevents.h **** /**
  95:./ChibiOS/os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  96:./ChibiOS/os/rt/include/chevents.h ****  */
  97:./ChibiOS/os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
  98:./ChibiOS/os/rt/include/chevents.h **** 
  99:./ChibiOS/os/rt/include/chevents.h **** /**
 100:./ChibiOS/os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 101:./ChibiOS/os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 102:./ChibiOS/os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 103:./ChibiOS/os/rt/include/chevents.h ****  * @param name the name of the event source variable
 104:./ChibiOS/os/rt/include/chevents.h ****  */
 105:./ChibiOS/os/rt/include/chevents.h **** #define _EVENTSOURCE_DATA(name) {(void *)(&name)}
 106:./ChibiOS/os/rt/include/chevents.h **** 
 107:./ChibiOS/os/rt/include/chevents.h **** /**
 108:./ChibiOS/os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 109:./ChibiOS/os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 110:./ChibiOS/os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 111:./ChibiOS/os/rt/include/chevents.h ****  *
 112:./ChibiOS/os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 113:./ChibiOS/os/rt/include/chevents.h ****  */
 114:./ChibiOS/os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = _EVENTSOURCE_DATA(name)
 115:./ChibiOS/os/rt/include/chevents.h **** 
 116:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
 117:./ChibiOS/os/rt/include/chevents.h **** /* External declarations.                                                    */
 118:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
 119:./ChibiOS/os/rt/include/chevents.h **** 
 120:./ChibiOS/os/rt/include/chevents.h **** #ifdef __cplusplus
 121:./ChibiOS/os/rt/include/chevents.h **** extern "C" {
 122:./ChibiOS/os/rt/include/chevents.h **** #endif
 123:./ChibiOS/os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 124:./ChibiOS/os/rt/include/chevents.h ****                                   event_listener_t *elp,
 125:./ChibiOS/os/rt/include/chevents.h ****                                   eventmask_t events,
 126:./ChibiOS/os/rt/include/chevents.h ****                                   eventflags_t wflags);
 127:./ChibiOS/os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 128:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 129:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 130:./ChibiOS/os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 131:./ChibiOS/os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 132:./ChibiOS/os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 133:./ChibiOS/os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 134:./ChibiOS/os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 135:./ChibiOS/os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 136:./ChibiOS/os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 137:./ChibiOS/os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 138:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 139:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 140:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 141:./ChibiOS/os/rt/include/chevents.h **** #endif
 142:./ChibiOS/os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 143:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time);
 144:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, systime_t time);
 145:./ChibiOS/os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, systime_t time);
 146:./ChibiOS/os/rt/include/chevents.h **** #endif
 147:./ChibiOS/os/rt/include/chevents.h **** #ifdef __cplusplus
 148:./ChibiOS/os/rt/include/chevents.h **** }
 149:./ChibiOS/os/rt/include/chevents.h **** #endif
 150:./ChibiOS/os/rt/include/chevents.h **** 
 151:./ChibiOS/os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 152:./ChibiOS/os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 153:./ChibiOS/os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 154:./ChibiOS/os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 155:./ChibiOS/os/rt/include/chevents.h **** #endif
 156:./ChibiOS/os/rt/include/chevents.h **** 
 157:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
 158:./ChibiOS/os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 159:./ChibiOS/os/rt/include/chevents.h **** /*===========================================================================*/
 160:./ChibiOS/os/rt/include/chevents.h **** 
 161:./ChibiOS/os/rt/include/chevents.h **** /**
 162:./ChibiOS/os/rt/include/chevents.h ****  * @brief   Initializes an Event Source.
 163:./ChibiOS/os/rt/include/chevents.h ****  * @note    This function can be invoked before the kernel is initialized
 164:./ChibiOS/os/rt/include/chevents.h ****  *          because it just prepares a @p event_source_t structure.
 165:./ChibiOS/os/rt/include/chevents.h ****  *
 166:./ChibiOS/os/rt/include/chevents.h ****  * @param[in] esp       pointer to the @p event_source_t structure
 167:./ChibiOS/os/rt/include/chevents.h ****  *
 168:./ChibiOS/os/rt/include/chevents.h ****  * @init
 169:./ChibiOS/os/rt/include/chevents.h ****  */
 170:./ChibiOS/os/rt/include/chevents.h **** static inline void chEvtObjectInit(event_source_t *esp) {
 171:./ChibiOS/os/rt/include/chevents.h **** 
 172:./ChibiOS/os/rt/include/chevents.h ****   esp->es_next = (event_listener_t *)esp;
 239               		.loc 2 172 0
 240 001c FB83      		std Y+3,r31
 241 001e EA83      		std Y+2,r30
 242               	.LBE60:
 243               	.LBE59:
 244               	.LBE58:
 131:ChibiOS/os/hal/src/serial.c ****   osalEventObjectInit(&sdp->event);
 132:ChibiOS/os/hal/src/serial.c ****   sdp->state = SD_STOP;
 245               		.loc 1 132 0
 246 0020 81E0      		ldi r24,lo8(1)
 247 0022 8C83      		std Y+4,r24
 133:ChibiOS/os/hal/src/serial.c ****   iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 248               		.loc 1 133 0
 249 0024 BE01      		movw r22,r28
 250               	.LVL28:
 251 0026 675D      		subi r22,-41
 252 0028 7F4F      		sbci r23,-1
 253 002a 8E01      		movw r16,r28
 254 002c 40E1      		ldi r20,lo8(16)
 255 002e 50E0      		ldi r21,0
 256               	.LVL29:
 257 0030 CE01      		movw r24,r28
 258 0032 0596      		adiw r24,5
 259 0034 0E94 0000 		call chIQObjectInit
 260               	.LVL30:
 134:ChibiOS/os/hal/src/serial.c ****   oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 261               		.loc 1 134 0
 262 0038 BE01      		movw r22,r28
 263 003a 675C      		subi r22,-57
 264 003c 7F4F      		sbci r23,-1
 265 003e 9701      		movw r18,r14
 266 0040 40E1      		ldi r20,lo8(16)
 267 0042 50E0      		ldi r21,0
 268 0044 CE01      		movw r24,r28
 269 0046 4796      		adiw r24,23
 270 0048 0E94 0000 		call chOQObjectInit
 271               	.LVL31:
 272               	/* epilogue start */
 135:ChibiOS/os/hal/src/serial.c **** }
 273               		.loc 1 135 0
 274 004c DF91      		pop r29
 275 004e CF91      		pop r28
 276               	.LVL32:
 277 0050 1F91      		pop r17
 278 0052 0F91      		pop r16
 279               	.LVL33:
 280 0054 FF90      		pop r15
 281 0056 EF90      		pop r14
 282               	.LVL34:
 283 0058 0895      		ret
 284               		.cfi_endproc
 285               	.LFE145:
 287               		.section	.text.sdStart,"ax",@progbits
 288               	.global	sdStart
 290               	sdStart:
 291               	.LFB146:
 136:ChibiOS/os/hal/src/serial.c **** 
 137:ChibiOS/os/hal/src/serial.c **** /**
 138:ChibiOS/os/hal/src/serial.c ****  * @brief   Configures and starts the driver.
 139:ChibiOS/os/hal/src/serial.c ****  *
 140:ChibiOS/os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 141:ChibiOS/os/hal/src/serial.c ****  * @param[in] config    the architecture-dependent serial driver configuration.
 142:ChibiOS/os/hal/src/serial.c ****  *                      If this parameter is set to @p NULL then a default
 143:ChibiOS/os/hal/src/serial.c ****  *                      configuration is used.
 144:ChibiOS/os/hal/src/serial.c ****  *
 145:ChibiOS/os/hal/src/serial.c ****  * @api
 146:ChibiOS/os/hal/src/serial.c ****  */
 147:ChibiOS/os/hal/src/serial.c **** void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 292               		.loc 1 147 0
 293               		.cfi_startproc
 294               	.LVL35:
 295 0000 CF93      		push r28
 296               	.LCFI6:
 297               		.cfi_def_cfa_offset 3
 298               		.cfi_offset 28, -2
 299 0002 DF93      		push r29
 300               	.LCFI7:
 301               		.cfi_def_cfa_offset 4
 302               		.cfi_offset 29, -3
 303               	/* prologue: function */
 304               	/* frame size = 0 */
 305               	/* stack size = 2 */
 306               	.L__stack_usage = 2
 307 0004 EC01      		movw r28,r24
 308               	.LBB61:
 309               	.LBB62:
 310               	.LBB63:
 311               		.file 3 "./ChibiOS/os/rt/include/chsys.h"
   1:./ChibiOS/os/rt/include/chsys.h **** /*
   2:./ChibiOS/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3:./ChibiOS/os/rt/include/chsys.h **** 
   4:./ChibiOS/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./ChibiOS/os/rt/include/chsys.h **** 
   6:./ChibiOS/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./ChibiOS/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./ChibiOS/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./ChibiOS/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./ChibiOS/os/rt/include/chsys.h **** 
  11:./ChibiOS/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./ChibiOS/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./ChibiOS/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./ChibiOS/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./ChibiOS/os/rt/include/chsys.h **** 
  16:./ChibiOS/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./ChibiOS/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./ChibiOS/os/rt/include/chsys.h **** */
  19:./ChibiOS/os/rt/include/chsys.h **** 
  20:./ChibiOS/os/rt/include/chsys.h **** /**
  21:./ChibiOS/os/rt/include/chsys.h ****  * @file    chsys.h
  22:./ChibiOS/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./ChibiOS/os/rt/include/chsys.h ****  *
  24:./ChibiOS/os/rt/include/chsys.h ****  * @addtogroup system
  25:./ChibiOS/os/rt/include/chsys.h ****  * @{
  26:./ChibiOS/os/rt/include/chsys.h ****  */
  27:./ChibiOS/os/rt/include/chsys.h **** 
  28:./ChibiOS/os/rt/include/chsys.h **** #ifndef _CHSYS_H_
  29:./ChibiOS/os/rt/include/chsys.h **** #define _CHSYS_H_
  30:./ChibiOS/os/rt/include/chsys.h **** 
  31:./ChibiOS/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./ChibiOS/os/rt/include/chsys.h **** 
  33:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./ChibiOS/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./ChibiOS/os/rt/include/chsys.h **** 
  37:./ChibiOS/os/rt/include/chsys.h **** /**
  38:./ChibiOS/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./ChibiOS/os/rt/include/chsys.h ****  * @{
  40:./ChibiOS/os/rt/include/chsys.h ****  */
  41:./ChibiOS/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./ChibiOS/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./ChibiOS/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./ChibiOS/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./ChibiOS/os/rt/include/chsys.h **** /** @} */
  46:./ChibiOS/os/rt/include/chsys.h **** 
  47:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./ChibiOS/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./ChibiOS/os/rt/include/chsys.h **** 
  51:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./ChibiOS/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./ChibiOS/os/rt/include/chsys.h **** 
  55:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./ChibiOS/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./ChibiOS/os/rt/include/chsys.h **** 
  59:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./ChibiOS/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./ChibiOS/os/rt/include/chsys.h **** 
  63:./ChibiOS/os/rt/include/chsys.h **** /**
  64:./ChibiOS/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./ChibiOS/os/rt/include/chsys.h ****  */
  66:./ChibiOS/os/rt/include/chsys.h **** /**
  67:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./ChibiOS/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./ChibiOS/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./ChibiOS/os/rt/include/chsys.h ****  *
  71:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./ChibiOS/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./ChibiOS/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./ChibiOS/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./ChibiOS/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./ChibiOS/os/rt/include/chsys.h ****  */
  77:./ChibiOS/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./ChibiOS/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./ChibiOS/os/rt/include/chsys.h **** #else
  81:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./ChibiOS/os/rt/include/chsys.h **** #endif
  83:./ChibiOS/os/rt/include/chsys.h **** 
  84:./ChibiOS/os/rt/include/chsys.h **** /**
  85:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./ChibiOS/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./ChibiOS/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./ChibiOS/os/rt/include/chsys.h ****  *
  89:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./ChibiOS/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./ChibiOS/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./ChibiOS/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./ChibiOS/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./ChibiOS/os/rt/include/chsys.h ****  */
  95:./ChibiOS/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./ChibiOS/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./ChibiOS/os/rt/include/chsys.h **** #else
  99:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./ChibiOS/os/rt/include/chsys.h **** #endif
 101:./ChibiOS/os/rt/include/chsys.h **** 
 102:./ChibiOS/os/rt/include/chsys.h **** /**
 103:./ChibiOS/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./ChibiOS/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./ChibiOS/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./ChibiOS/os/rt/include/chsys.h ****  *
 107:./ChibiOS/os/rt/include/chsys.h ****  * @special
 108:./ChibiOS/os/rt/include/chsys.h ****  */
 109:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./ChibiOS/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./ChibiOS/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 112:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 113:./ChibiOS/os/rt/include/chsys.h **** 
 114:./ChibiOS/os/rt/include/chsys.h **** /**
 115:./ChibiOS/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 116:./ChibiOS/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 117:./ChibiOS/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 118:./ChibiOS/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 119:./ChibiOS/os/rt/include/chsys.h ****  *
 120:./ChibiOS/os/rt/include/chsys.h ****  * @special
 121:./ChibiOS/os/rt/include/chsys.h ****  */
 122:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 123:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 124:./ChibiOS/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 125:./ChibiOS/os/rt/include/chsys.h **** 
 126:./ChibiOS/os/rt/include/chsys.h **** /**
 127:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 128:./ChibiOS/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 129:./ChibiOS/os/rt/include/chsys.h ****  *          port implementation.
 130:./ChibiOS/os/rt/include/chsys.h ****  *
 131:./ChibiOS/os/rt/include/chsys.h ****  * @special
 132:./ChibiOS/os/rt/include/chsys.h ****  */
 133:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 134:./ChibiOS/os/rt/include/chsys.h **** /** @} */
 135:./ChibiOS/os/rt/include/chsys.h **** 
 136:./ChibiOS/os/rt/include/chsys.h **** /**
 137:./ChibiOS/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 138:./ChibiOS/os/rt/include/chsys.h ****  */
 139:./ChibiOS/os/rt/include/chsys.h **** /**
 140:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 141:./ChibiOS/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 142:./ChibiOS/os/rt/include/chsys.h ****  *          port implementation.
 143:./ChibiOS/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 144:./ChibiOS/os/rt/include/chsys.h ****  *
 145:./ChibiOS/os/rt/include/chsys.h ****  * @special
 146:./ChibiOS/os/rt/include/chsys.h ****  */
 147:./ChibiOS/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 148:./ChibiOS/os/rt/include/chsys.h **** /** @} */
 149:./ChibiOS/os/rt/include/chsys.h **** 
 150:./ChibiOS/os/rt/include/chsys.h **** /**
 151:./ChibiOS/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 152:./ChibiOS/os/rt/include/chsys.h ****  * @{
 153:./ChibiOS/os/rt/include/chsys.h ****  */
 154:./ChibiOS/os/rt/include/chsys.h **** /**
 155:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 156:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 157:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 158:./ChibiOS/os/rt/include/chsys.h ****  *
 159:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 160:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 161:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of cycles.
 162:./ChibiOS/os/rt/include/chsys.h ****  *
 163:./ChibiOS/os/rt/include/chsys.h ****  * @api
 164:./ChibiOS/os/rt/include/chsys.h ****  */
 165:./ChibiOS/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 166:./ChibiOS/os/rt/include/chsys.h **** 
 167:./ChibiOS/os/rt/include/chsys.h **** /**
 168:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 169:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 170:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 171:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 172:./ChibiOS/os/rt/include/chsys.h ****  *
 173:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 174:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 175:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of cycles.
 176:./ChibiOS/os/rt/include/chsys.h ****  *
 177:./ChibiOS/os/rt/include/chsys.h ****  * @api
 178:./ChibiOS/os/rt/include/chsys.h ****  */
 179:./ChibiOS/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 180:./ChibiOS/os/rt/include/chsys.h **** 
 181:./ChibiOS/os/rt/include/chsys.h **** /**
 182:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 183:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 184:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 185:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 186:./ChibiOS/os/rt/include/chsys.h ****  *
 187:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 188:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 189:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of cycles.
 190:./ChibiOS/os/rt/include/chsys.h ****  *
 191:./ChibiOS/os/rt/include/chsys.h ****  * @api
 192:./ChibiOS/os/rt/include/chsys.h ****  */
 193:./ChibiOS/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 194:./ChibiOS/os/rt/include/chsys.h **** 
 195:./ChibiOS/os/rt/include/chsys.h **** /**
 196:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 197:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 198:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 199:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 200:./ChibiOS/os/rt/include/chsys.h ****  *
 201:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 202:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 203:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of seconds.
 204:./ChibiOS/os/rt/include/chsys.h ****  *
 205:./ChibiOS/os/rt/include/chsys.h ****  * @api
 206:./ChibiOS/os/rt/include/chsys.h ****  */
 207:./ChibiOS/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 208:./ChibiOS/os/rt/include/chsys.h **** 
 209:./ChibiOS/os/rt/include/chsys.h **** /**
 210:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 211:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 212:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 213:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 214:./ChibiOS/os/rt/include/chsys.h ****  *
 215:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 216:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 217:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 218:./ChibiOS/os/rt/include/chsys.h ****  *
 219:./ChibiOS/os/rt/include/chsys.h ****  * @api
 220:./ChibiOS/os/rt/include/chsys.h ****  */
 221:./ChibiOS/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 222:./ChibiOS/os/rt/include/chsys.h **** 
 223:./ChibiOS/os/rt/include/chsys.h **** /**
 224:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 225:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 226:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 227:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 228:./ChibiOS/os/rt/include/chsys.h ****  *
 229:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 230:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 231:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 232:./ChibiOS/os/rt/include/chsys.h ****  *
 233:./ChibiOS/os/rt/include/chsys.h ****  * @api
 234:./ChibiOS/os/rt/include/chsys.h ****  */
 235:./ChibiOS/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 236:./ChibiOS/os/rt/include/chsys.h **** /** @} */
 237:./ChibiOS/os/rt/include/chsys.h **** 
 238:./ChibiOS/os/rt/include/chsys.h **** /**
 239:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 240:./ChibiOS/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 241:./ChibiOS/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 242:./ChibiOS/os/rt/include/chsys.h ****  *
 243:./ChibiOS/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 244:./ChibiOS/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 245:./ChibiOS/os/rt/include/chsys.h ****  *
 246:./ChibiOS/os/rt/include/chsys.h ****  * @xclass
 247:./ChibiOS/os/rt/include/chsys.h ****  */
 248:./ChibiOS/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 249:./ChibiOS/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 250:./ChibiOS/os/rt/include/chsys.h **** #endif
 251:./ChibiOS/os/rt/include/chsys.h **** 
 252:./ChibiOS/os/rt/include/chsys.h **** /**
 253:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 254:./ChibiOS/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 255:./ChibiOS/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 256:./ChibiOS/os/rt/include/chsys.h ****  *
 257:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 258:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 259:./ChibiOS/os/rt/include/chsys.h ****  *
 260:./ChibiOS/os/rt/include/chsys.h ****  * @special
 261:./ChibiOS/os/rt/include/chsys.h ****  */
 262:./ChibiOS/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 263:./ChibiOS/os/rt/include/chsys.h ****                                                                             \
 264:./ChibiOS/os/rt/include/chsys.h ****   _dbg_trace(otp);                                                          \
 265:./ChibiOS/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 266:./ChibiOS/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 267:./ChibiOS/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 268:./ChibiOS/os/rt/include/chsys.h **** }
 269:./ChibiOS/os/rt/include/chsys.h **** 
 270:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
 271:./ChibiOS/os/rt/include/chsys.h **** /* External declarations.                                                    */
 272:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
 273:./ChibiOS/os/rt/include/chsys.h **** 
 274:./ChibiOS/os/rt/include/chsys.h **** #ifdef __cplusplus
 275:./ChibiOS/os/rt/include/chsys.h **** extern "C" {
 276:./ChibiOS/os/rt/include/chsys.h **** #endif
 277:./ChibiOS/os/rt/include/chsys.h ****   void chSysInit(void);
 278:./ChibiOS/os/rt/include/chsys.h ****   void chSysHalt(const char *reason);
 279:./ChibiOS/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 280:./ChibiOS/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 281:./ChibiOS/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 282:./ChibiOS/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 283:./ChibiOS/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT
 284:./ChibiOS/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 285:./ChibiOS/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 286:./ChibiOS/os/rt/include/chsys.h **** #endif
 287:./ChibiOS/os/rt/include/chsys.h **** #ifdef __cplusplus
 288:./ChibiOS/os/rt/include/chsys.h **** }
 289:./ChibiOS/os/rt/include/chsys.h **** #endif
 290:./ChibiOS/os/rt/include/chsys.h **** 
 291:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
 292:./ChibiOS/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 293:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
 294:./ChibiOS/os/rt/include/chsys.h **** 
 295:./ChibiOS/os/rt/include/chsys.h **** /**
 296:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 297:./ChibiOS/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 298:./ChibiOS/os/rt/include/chsys.h ****  *          hardware priority.
 299:./ChibiOS/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 300:./ChibiOS/os/rt/include/chsys.h ****  *
 301:./ChibiOS/os/rt/include/chsys.h ****  * @special
 302:./ChibiOS/os/rt/include/chsys.h ****  */
 303:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 304:./ChibiOS/os/rt/include/chsys.h **** 
 305:./ChibiOS/os/rt/include/chsys.h ****   port_disable();
 306:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_disable();
 307:./ChibiOS/os/rt/include/chsys.h **** }
 308:./ChibiOS/os/rt/include/chsys.h **** 
 309:./ChibiOS/os/rt/include/chsys.h **** /**
 310:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 311:./ChibiOS/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 312:./ChibiOS/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 313:./ChibiOS/os/rt/include/chsys.h ****  *          enabled.
 314:./ChibiOS/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 315:./ChibiOS/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 316:./ChibiOS/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 317:./ChibiOS/os/rt/include/chsys.h ****  *
 318:./ChibiOS/os/rt/include/chsys.h ****  * @special
 319:./ChibiOS/os/rt/include/chsys.h ****  */
 320:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 321:./ChibiOS/os/rt/include/chsys.h **** 
 322:./ChibiOS/os/rt/include/chsys.h ****   port_suspend();
 323:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_suspend();
 324:./ChibiOS/os/rt/include/chsys.h **** }
 325:./ChibiOS/os/rt/include/chsys.h **** 
 326:./ChibiOS/os/rt/include/chsys.h **** /**
 327:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 328:./ChibiOS/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 329:./ChibiOS/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 330:./ChibiOS/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 331:./ChibiOS/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 332:./ChibiOS/os/rt/include/chsys.h ****  *
 333:./ChibiOS/os/rt/include/chsys.h ****  * @special
 334:./ChibiOS/os/rt/include/chsys.h ****  */
 335:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 336:./ChibiOS/os/rt/include/chsys.h **** 
 337:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_enable();
 338:./ChibiOS/os/rt/include/chsys.h ****   port_enable();
 339:./ChibiOS/os/rt/include/chsys.h **** }
 340:./ChibiOS/os/rt/include/chsys.h **** 
 341:./ChibiOS/os/rt/include/chsys.h **** /**
 342:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 343:./ChibiOS/os/rt/include/chsys.h ****  *
 344:./ChibiOS/os/rt/include/chsys.h ****  * @special
 345:./ChibiOS/os/rt/include/chsys.h ****  */
 346:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 347:./ChibiOS/os/rt/include/chsys.h **** 
 348:./ChibiOS/os/rt/include/chsys.h ****   port_lock();
 312               		.loc 3 348 0
 313               	/* #APP */
 314               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 315 0006 F894      		cli
 316               	 ;  0 "" 2
 317               	/* #NOAPP */
 318               	.LBE63:
 319               	.LBE62:
 320               	.LBE61:
 148:ChibiOS/os/hal/src/serial.c **** 
 149:ChibiOS/os/hal/src/serial.c ****   osalDbgCheck(sdp != NULL);
 150:ChibiOS/os/hal/src/serial.c **** 
 151:ChibiOS/os/hal/src/serial.c ****   osalSysLock();
 152:ChibiOS/os/hal/src/serial.c ****   osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 153:ChibiOS/os/hal/src/serial.c ****                 "invalid state");
 154:ChibiOS/os/hal/src/serial.c ****   sd_lld_start(sdp, config);
 321               		.loc 1 154 0
 322 0008 0E94 0000 		call sd_lld_start
 323               	.LVL36:
 155:ChibiOS/os/hal/src/serial.c ****   sdp->state = SD_READY;
 324               		.loc 1 155 0
 325 000c 82E0      		ldi r24,lo8(2)
 326 000e 8C83      		std Y+4,r24
 327               	.LBB64:
 328               	.LBB65:
 329               	.LBB66:
 349:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 350:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_lock();
 351:./ChibiOS/os/rt/include/chsys.h **** }
 352:./ChibiOS/os/rt/include/chsys.h **** 
 353:./ChibiOS/os/rt/include/chsys.h **** /**
 354:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 355:./ChibiOS/os/rt/include/chsys.h ****  *
 356:./ChibiOS/os/rt/include/chsys.h ****  * @special
 357:./ChibiOS/os/rt/include/chsys.h ****  */
 358:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 359:./ChibiOS/os/rt/include/chsys.h **** 
 360:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_unlock();
 361:./ChibiOS/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 362:./ChibiOS/os/rt/include/chsys.h **** 
 363:./ChibiOS/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 364:./ChibiOS/os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 365:./ChibiOS/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 366:./ChibiOS/os/rt/include/chsys.h ****      the ready list.*/
 367:./ChibiOS/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 368:./ChibiOS/os/rt/include/chsys.h ****               (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
 369:./ChibiOS/os/rt/include/chsys.h ****               "priority order violation");
 370:./ChibiOS/os/rt/include/chsys.h **** 
 371:./ChibiOS/os/rt/include/chsys.h ****   port_unlock();
 330               		.loc 3 371 0
 331               	/* #APP */
 332               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 333 0010 7894      		sei
 334               	 ;  0 "" 2
 335               	/* epilogue start */
 336               	/* #NOAPP */
 337               	.LBE66:
 338               	.LBE65:
 339               	.LBE64:
 156:ChibiOS/os/hal/src/serial.c ****   osalSysUnlock();
 157:ChibiOS/os/hal/src/serial.c **** }
 340               		.loc 1 157 0
 341 0012 DF91      		pop r29
 342 0014 CF91      		pop r28
 343               	.LVL37:
 344 0016 0895      		ret
 345               		.cfi_endproc
 346               	.LFE146:
 348               		.section	.text.sdStop,"ax",@progbits
 349               	.global	sdStop
 351               	sdStop:
 352               	.LFB147:
 158:ChibiOS/os/hal/src/serial.c **** 
 159:ChibiOS/os/hal/src/serial.c **** /**
 160:ChibiOS/os/hal/src/serial.c ****  * @brief   Stops the driver.
 161:ChibiOS/os/hal/src/serial.c ****  * @details Any thread waiting on the driver's queues will be awakened with
 162:ChibiOS/os/hal/src/serial.c ****  *          the message @p Q_RESET.
 163:ChibiOS/os/hal/src/serial.c ****  *
 164:ChibiOS/os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver object
 165:ChibiOS/os/hal/src/serial.c ****  *
 166:ChibiOS/os/hal/src/serial.c ****  * @api
 167:ChibiOS/os/hal/src/serial.c ****  */
 168:ChibiOS/os/hal/src/serial.c **** void sdStop(SerialDriver *sdp) {
 353               		.loc 1 168 0
 354               		.cfi_startproc
 355               	.LVL38:
 356 0000 CF93      		push r28
 357               	.LCFI8:
 358               		.cfi_def_cfa_offset 3
 359               		.cfi_offset 28, -2
 360 0002 DF93      		push r29
 361               	.LCFI9:
 362               		.cfi_def_cfa_offset 4
 363               		.cfi_offset 29, -3
 364               	/* prologue: function */
 365               	/* frame size = 0 */
 366               	/* stack size = 2 */
 367               	.L__stack_usage = 2
 368 0004 EC01      		movw r28,r24
 369               	.LBB67:
 370               	.LBB68:
 371               	.LBB69:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 372               		.loc 3 348 0
 373               	/* #APP */
 374               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 375 0006 F894      		cli
 376               	 ;  0 "" 2
 377               	/* #NOAPP */
 378               	.LBE69:
 379               	.LBE68:
 380               	.LBE67:
 169:ChibiOS/os/hal/src/serial.c **** 
 170:ChibiOS/os/hal/src/serial.c ****   osalDbgCheck(sdp != NULL);
 171:ChibiOS/os/hal/src/serial.c **** 
 172:ChibiOS/os/hal/src/serial.c ****   osalSysLock();
 173:ChibiOS/os/hal/src/serial.c ****   osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 174:ChibiOS/os/hal/src/serial.c ****                 "invalid state");
 175:ChibiOS/os/hal/src/serial.c ****   sd_lld_stop(sdp);
 381               		.loc 1 175 0
 382 0008 0E94 0000 		call sd_lld_stop
 383               	.LVL39:
 176:ChibiOS/os/hal/src/serial.c ****   sdp->state = SD_STOP;
 384               		.loc 1 176 0
 385 000c 81E0      		ldi r24,lo8(1)
 386 000e 8C83      		std Y+4,r24
 177:ChibiOS/os/hal/src/serial.c ****   oqResetI(&sdp->oqueue);
 387               		.loc 1 177 0
 388 0010 CE01      		movw r24,r28
 389 0012 4796      		adiw r24,23
 390 0014 0E94 0000 		call chOQResetI
 391               	.LVL40:
 178:ChibiOS/os/hal/src/serial.c ****   iqResetI(&sdp->iqueue);
 392               		.loc 1 178 0
 393 0018 CE01      		movw r24,r28
 394 001a 0596      		adiw r24,5
 395 001c 0E94 0000 		call chIQResetI
 396               	.LVL41:
 397               	.LBB70:
 398               	.LBB71:
 399               		.file 4 "./ChibiOS/os/hal/osal/rt/osal.h"
   1:./ChibiOS/os/hal/osal/rt/osal.h **** /*
   2:./ChibiOS/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:./ChibiOS/os/hal/osal/rt/osal.h **** 
   4:./ChibiOS/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./ChibiOS/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./ChibiOS/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./ChibiOS/os/hal/osal/rt/osal.h **** 
   8:./ChibiOS/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./ChibiOS/os/hal/osal/rt/osal.h **** 
  10:./ChibiOS/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./ChibiOS/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./ChibiOS/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./ChibiOS/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./ChibiOS/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./ChibiOS/os/hal/osal/rt/osal.h **** */
  16:./ChibiOS/os/hal/osal/rt/osal.h **** 
  17:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  18:./ChibiOS/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./ChibiOS/os/hal/osal/rt/osal.h ****  *
  21:./ChibiOS/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  23:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  24:./ChibiOS/os/hal/osal/rt/osal.h **** 
  25:./ChibiOS/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./ChibiOS/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./ChibiOS/os/hal/osal/rt/osal.h **** 
  28:./ChibiOS/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./ChibiOS/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./ChibiOS/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./ChibiOS/os/hal/osal/rt/osal.h **** 
  32:./ChibiOS/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./ChibiOS/os/hal/osal/rt/osal.h **** 
  34:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./ChibiOS/os/hal/osal/rt/osal.h **** 
  38:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  39:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  41:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  42:./ChibiOS/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./ChibiOS/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
  45:./ChibiOS/os/hal/osal/rt/osal.h **** 
  46:./ChibiOS/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./ChibiOS/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
  49:./ChibiOS/os/hal/osal/rt/osal.h **** 
  50:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
  53:./ChibiOS/os/hal/osal/rt/osal.h **** 
  54:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
  55:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  56:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  58:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  59:./ChibiOS/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./ChibiOS/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./ChibiOS/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
  63:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
  64:./ChibiOS/os/hal/osal/rt/osal.h **** 
  65:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
  66:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  67:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  69:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  70:./ChibiOS/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./ChibiOS/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
  73:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
  74:./ChibiOS/os/hal/osal/rt/osal.h **** 
  75:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  76:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  78:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  79:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
  83:./ChibiOS/os/hal/osal/rt/osal.h **** 
  84:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  85:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  87:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  88:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  89:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  91:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./ChibiOS/os/hal/osal/rt/osal.h **** 
  93:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  94:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  96:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./ChibiOS/os/hal/osal/rt/osal.h **** 
  98:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  99:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 101:./ChibiOS/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./ChibiOS/os/hal/osal/rt/osal.h **** #else
 104:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 106:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 107:./ChibiOS/os/hal/osal/rt/osal.h **** 
 108:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./ChibiOS/os/hal/osal/rt/osal.h **** 
 112:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./ChibiOS/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./ChibiOS/os/hal/osal/rt/osal.h **** 
 116:./ChibiOS/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./ChibiOS/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./ChibiOS/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./ChibiOS/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 121:./ChibiOS/os/hal/osal/rt/osal.h **** 
 122:./ChibiOS/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./ChibiOS/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 125:./ChibiOS/os/hal/osal/rt/osal.h **** 
 126:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./ChibiOS/os/hal/osal/rt/osal.h **** 
 130:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 131:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 132:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 134:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 136:./ChibiOS/os/hal/osal/rt/osal.h **** 
 137:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 138:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 139:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 141:./ChibiOS/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 143:./ChibiOS/os/hal/osal/rt/osal.h **** 
 144:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 145:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 146:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 148:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 150:./ChibiOS/os/hal/osal/rt/osal.h **** 
 151:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 152:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 153:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 155:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 157:./ChibiOS/os/hal/osal/rt/osal.h **** 
 158:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 159:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 160:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 162:./ChibiOS/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 164:./ChibiOS/os/hal/osal/rt/osal.h **** 
 165:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 166:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 167:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 169:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 171:./ChibiOS/os/hal/osal/rt/osal.h **** 
 172:./ChibiOS/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 174:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./ChibiOS/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./ChibiOS/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./ChibiOS/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 181:./ChibiOS/os/hal/osal/rt/osal.h **** typedef struct {
 182:./ChibiOS/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./ChibiOS/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./ChibiOS/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 186:./ChibiOS/os/hal/osal/rt/osal.h **** 
 187:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 188:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./ChibiOS/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 192:./ChibiOS/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./ChibiOS/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./ChibiOS/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./ChibiOS/os/hal/osal/rt/osal.h **** #else
 196:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 198:./ChibiOS/os/hal/osal/rt/osal.h **** 
 199:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 200:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 201:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./ChibiOS/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./ChibiOS/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 207:./ChibiOS/os/hal/osal/rt/osal.h **** typedef struct {
 208:./ChibiOS/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./ChibiOS/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 211:./ChibiOS/os/hal/osal/rt/osal.h **** 
 212:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./ChibiOS/os/hal/osal/rt/osal.h **** 
 216:./ChibiOS/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./ChibiOS/os/hal/osal/rt/osal.h **** 
 223:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 224:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 226:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 227:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 228:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./ChibiOS/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./ChibiOS/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./ChibiOS/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 236:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 239:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 240:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 241:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./ChibiOS/os/hal/osal/rt/osal.h **** 
 243:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 244:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./ChibiOS/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 249:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 251:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 252:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 253:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./ChibiOS/os/hal/osal/rt/osal.h **** 
 255:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 256:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 259:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./ChibiOS/os/hal/osal/rt/osal.h **** 
 261:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 262:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 265:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 267:./ChibiOS/os/hal/osal/rt/osal.h **** 
 268:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 269:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 271:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 272:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 273:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 275:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./ChibiOS/os/hal/osal/rt/osal.h **** 
 277:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 278:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 281:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./ChibiOS/os/hal/osal/rt/osal.h **** 
 283:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 284:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 287:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./ChibiOS/os/hal/osal/rt/osal.h **** 
 289:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 290:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 293:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 295:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 297:./ChibiOS/os/hal/osal/rt/osal.h **** 
 298:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 299:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 301:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 302:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 303:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 307:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 310:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 311:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 312:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./ChibiOS/os/hal/osal/rt/osal.h **** 
 314:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 315:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 319:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 322:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 323:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 324:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./ChibiOS/os/hal/osal/rt/osal.h **** 
 326:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 327:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 331:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 334:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 335:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 336:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 338:./ChibiOS/os/hal/osal/rt/osal.h **** 
 339:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 340:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 342:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 343:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 344:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 348:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 352:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 353:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 354:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./ChibiOS/os/hal/osal/rt/osal.h **** 
 356:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 357:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 362:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 366:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 367:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 368:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./ChibiOS/os/hal/osal/rt/osal.h **** 
 370:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 371:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 376:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 380:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 381:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 382:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 384:./ChibiOS/os/hal/osal/rt/osal.h **** 
 385:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 386:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 388:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 389:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 390:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./ChibiOS/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 395:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 397:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 398:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 399:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./ChibiOS/os/hal/osal/rt/osal.h **** 
 401:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 402:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./ChibiOS/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./ChibiOS/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 408:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 410:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 411:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 412:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./ChibiOS/os/hal/osal/rt/osal.h **** 
 414:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 415:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./ChibiOS/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./ChibiOS/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 421:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 423:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 424:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 425:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 427:./ChibiOS/os/hal/osal/rt/osal.h **** 
 428:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./ChibiOS/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./ChibiOS/os/hal/osal/rt/osal.h **** 
 432:./ChibiOS/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./ChibiOS/os/hal/osal/rt/osal.h **** extern "C" {
 434:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 435:./ChibiOS/os/hal/osal/rt/osal.h **** 
 436:./ChibiOS/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./ChibiOS/os/hal/osal/rt/osal.h **** }
 438:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 439:./ChibiOS/os/hal/osal/rt/osal.h **** 
 440:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./ChibiOS/os/hal/osal/rt/osal.h **** 
 444:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 445:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 447:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 448:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 449:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./ChibiOS/os/hal/osal/rt/osal.h **** 
 451:./ChibiOS/os/hal/osal/rt/osal.h **** }
 452:./ChibiOS/os/hal/osal/rt/osal.h **** 
 453:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 454:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 456:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 458:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 459:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 460:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./ChibiOS/os/hal/osal/rt/osal.h **** 
 462:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./ChibiOS/os/hal/osal/rt/osal.h **** }
 464:./ChibiOS/os/hal/osal/rt/osal.h **** 
 465:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 466:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 468:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 469:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 470:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./ChibiOS/os/hal/osal/rt/osal.h **** 
 472:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./ChibiOS/os/hal/osal/rt/osal.h **** }
 474:./ChibiOS/os/hal/osal/rt/osal.h **** 
 475:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 476:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 478:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 479:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 480:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./ChibiOS/os/hal/osal/rt/osal.h **** 
 482:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./ChibiOS/os/hal/osal/rt/osal.h **** }
 484:./ChibiOS/os/hal/osal/rt/osal.h **** 
 485:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 486:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 489:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 490:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 491:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./ChibiOS/os/hal/osal/rt/osal.h **** 
 493:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./ChibiOS/os/hal/osal/rt/osal.h **** }
 495:./ChibiOS/os/hal/osal/rt/osal.h **** 
 496:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 497:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 500:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 501:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 502:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./ChibiOS/os/hal/osal/rt/osal.h **** 
 504:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./ChibiOS/os/hal/osal/rt/osal.h **** }
 506:./ChibiOS/os/hal/osal/rt/osal.h **** 
 507:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 508:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 511:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 512:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 513:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./ChibiOS/os/hal/osal/rt/osal.h **** 
 515:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./ChibiOS/os/hal/osal/rt/osal.h **** }
 517:./ChibiOS/os/hal/osal/rt/osal.h **** 
 518:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 519:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 522:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 523:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 524:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./ChibiOS/os/hal/osal/rt/osal.h **** 
 526:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./ChibiOS/os/hal/osal/rt/osal.h **** }
 528:./ChibiOS/os/hal/osal/rt/osal.h **** 
 529:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 530:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./ChibiOS/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./ChibiOS/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./ChibiOS/os/hal/osal/rt/osal.h ****  *          is known.
 535:./ChibiOS/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 537:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 540:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 541:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 542:./ChibiOS/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./ChibiOS/os/hal/osal/rt/osal.h **** 
 544:./ChibiOS/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./ChibiOS/os/hal/osal/rt/osal.h **** }
 546:./ChibiOS/os/hal/osal/rt/osal.h **** 
 547:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 548:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./ChibiOS/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 552:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 554:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 555:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 556:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./ChibiOS/os/hal/osal/rt/osal.h **** 
 558:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./ChibiOS/os/hal/osal/rt/osal.h **** }
 560:./ChibiOS/os/hal/osal/rt/osal.h **** 
 561:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 562:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./ChibiOS/os/hal/osal/rt/osal.h ****  *          value.
 565:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 566:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 568:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 569:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 570:./ChibiOS/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./ChibiOS/os/hal/osal/rt/osal.h **** 
 573:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./ChibiOS/os/hal/osal/rt/osal.h **** }
 575:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 576:./ChibiOS/os/hal/osal/rt/osal.h **** 
 577:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 578:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./ChibiOS/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 582:./ChibiOS/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./ChibiOS/os/hal/osal/rt/osal.h **** 
 585:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:./ChibiOS/os/hal/osal/rt/osal.h **** }
 587:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 588:./ChibiOS/os/hal/osal/rt/osal.h **** 
 589:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 590:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:./ChibiOS/os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:./ChibiOS/os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 596:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 597:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 598:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:./ChibiOS/os/hal/osal/rt/osal.h **** 
 600:./ChibiOS/os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 400               		.loc 4 600 0
 401 0020 0E94 0000 		call chSchRescheduleS
 402               	.LVL42:
 403               	.LBE71:
 404               	.LBE70:
 405               	.LBB72:
 406               	.LBB73:
 407               	.LBB74:
 408               		.loc 3 371 0
 409               	/* #APP */
 410               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 411 0024 7894      		sei
 412               	 ;  0 "" 2
 413               	/* epilogue start */
 414               	/* #NOAPP */
 415               	.LBE74:
 416               	.LBE73:
 417               	.LBE72:
 179:ChibiOS/os/hal/src/serial.c ****   osalOsRescheduleS();
 180:ChibiOS/os/hal/src/serial.c ****   osalSysUnlock();
 181:ChibiOS/os/hal/src/serial.c **** }
 418               		.loc 1 181 0
 419 0026 DF91      		pop r29
 420 0028 CF91      		pop r28
 421               	.LVL43:
 422 002a 0895      		ret
 423               		.cfi_endproc
 424               	.LFE147:
 426               		.section	.text.sdIncomingDataI,"ax",@progbits
 427               	.global	sdIncomingDataI
 429               	sdIncomingDataI:
 430               	.LFB148:
 182:ChibiOS/os/hal/src/serial.c **** 
 183:ChibiOS/os/hal/src/serial.c **** /**
 184:ChibiOS/os/hal/src/serial.c ****  * @brief   Handles incoming data.
 185:ChibiOS/os/hal/src/serial.c ****  * @details This function must be called from the input interrupt service
 186:ChibiOS/os/hal/src/serial.c ****  *          routine in order to enqueue incoming data and generate the
 187:ChibiOS/os/hal/src/serial.c ****  *          related events.
 188:ChibiOS/os/hal/src/serial.c ****  * @note    The incoming data event is only generated when the input queue
 189:ChibiOS/os/hal/src/serial.c ****  *          becomes non-empty.
 190:ChibiOS/os/hal/src/serial.c ****  * @note    In order to gain some performance it is suggested to not use
 191:ChibiOS/os/hal/src/serial.c ****  *          this function directly but copy this code directly into the
 192:ChibiOS/os/hal/src/serial.c ****  *          interrupt service routine.
 193:ChibiOS/os/hal/src/serial.c ****  *
 194:ChibiOS/os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 195:ChibiOS/os/hal/src/serial.c ****  * @param[in] b         the byte to be written in the driver's Input Queue
 196:ChibiOS/os/hal/src/serial.c ****  *
 197:ChibiOS/os/hal/src/serial.c ****  * @iclass
 198:ChibiOS/os/hal/src/serial.c ****  */
 199:ChibiOS/os/hal/src/serial.c **** void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 431               		.loc 1 199 0
 432               		.cfi_startproc
 433               	.LVL44:
 434 0000 1F93      		push r17
 435               	.LCFI10:
 436               		.cfi_def_cfa_offset 3
 437               		.cfi_offset 17, -2
 438 0002 CF93      		push r28
 439               	.LCFI11:
 440               		.cfi_def_cfa_offset 4
 441               		.cfi_offset 28, -3
 442 0004 DF93      		push r29
 443               	.LCFI12:
 444               		.cfi_def_cfa_offset 5
 445               		.cfi_offset 29, -4
 446               	/* prologue: function */
 447               	/* frame size = 0 */
 448               	/* stack size = 3 */
 449               	.L__stack_usage = 3
 450 0006 EC01      		movw r28,r24
 451 0008 162F      		mov r17,r22
 452               	.LVL45:
 453               	.LBB75:
 454               	.LBB76:
 455               		.file 5 "./ChibiOS/os/rt/include/chqueues.h"
   1:./ChibiOS/os/rt/include/chqueues.h **** /*
   2:./ChibiOS/os/rt/include/chqueues.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3:./ChibiOS/os/rt/include/chqueues.h **** 
   4:./ChibiOS/os/rt/include/chqueues.h ****     This file is part of ChibiOS.
   5:./ChibiOS/os/rt/include/chqueues.h **** 
   6:./ChibiOS/os/rt/include/chqueues.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./ChibiOS/os/rt/include/chqueues.h ****     it under the terms of the GNU General Public License as published by
   8:./ChibiOS/os/rt/include/chqueues.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./ChibiOS/os/rt/include/chqueues.h ****     (at your option) any later version.
  10:./ChibiOS/os/rt/include/chqueues.h **** 
  11:./ChibiOS/os/rt/include/chqueues.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./ChibiOS/os/rt/include/chqueues.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./ChibiOS/os/rt/include/chqueues.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./ChibiOS/os/rt/include/chqueues.h ****     GNU General Public License for more details.
  15:./ChibiOS/os/rt/include/chqueues.h **** 
  16:./ChibiOS/os/rt/include/chqueues.h ****     You should have received a copy of the GNU General Public License
  17:./ChibiOS/os/rt/include/chqueues.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./ChibiOS/os/rt/include/chqueues.h **** */
  19:./ChibiOS/os/rt/include/chqueues.h **** 
  20:./ChibiOS/os/rt/include/chqueues.h **** /**
  21:./ChibiOS/os/rt/include/chqueues.h ****  * @file    chqueues.h
  22:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   I/O Queues macros and structures.
  23:./ChibiOS/os/rt/include/chqueues.h ****  *
  24:./ChibiOS/os/rt/include/chqueues.h ****  * @addtogroup io_queues
  25:./ChibiOS/os/rt/include/chqueues.h ****  * @{
  26:./ChibiOS/os/rt/include/chqueues.h ****  */
  27:./ChibiOS/os/rt/include/chqueues.h **** 
  28:./ChibiOS/os/rt/include/chqueues.h **** #ifndef _CHQUEUES_H_
  29:./ChibiOS/os/rt/include/chqueues.h **** #define _CHQUEUES_H_
  30:./ChibiOS/os/rt/include/chqueues.h **** 
  31:./ChibiOS/os/rt/include/chqueues.h **** #if (CH_CFG_USE_QUEUES == TRUE) || defined(__DOXYGEN__)
  32:./ChibiOS/os/rt/include/chqueues.h **** 
  33:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
  34:./ChibiOS/os/rt/include/chqueues.h **** /* Module constants.                                                         */
  35:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
  36:./ChibiOS/os/rt/include/chqueues.h **** 
  37:./ChibiOS/os/rt/include/chqueues.h **** /**
  38:./ChibiOS/os/rt/include/chqueues.h ****  * @name    Queue functions returned status value
  39:./ChibiOS/os/rt/include/chqueues.h ****  * @{
  40:./ChibiOS/os/rt/include/chqueues.h ****  */
  41:./ChibiOS/os/rt/include/chqueues.h **** #define Q_OK            MSG_OK      /**< @brief Operation successful.       */
  42:./ChibiOS/os/rt/include/chqueues.h **** #define Q_TIMEOUT       MSG_TIMEOUT /**< @brief Timeout condition.          */
  43:./ChibiOS/os/rt/include/chqueues.h **** #define Q_RESET         MSG_RESET   /**< @brief Queue has been reset.       */
  44:./ChibiOS/os/rt/include/chqueues.h **** #define Q_EMPTY         (msg_t)-3   /**< @brief Queue empty.                */
  45:./ChibiOS/os/rt/include/chqueues.h **** #define Q_FULL          (msg_t)-4   /**< @brief Queue full,                 */
  46:./ChibiOS/os/rt/include/chqueues.h **** /** @} */
  47:./ChibiOS/os/rt/include/chqueues.h **** 
  48:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
  49:./ChibiOS/os/rt/include/chqueues.h **** /* Module pre-compile time settings.                                         */
  50:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
  51:./ChibiOS/os/rt/include/chqueues.h **** 
  52:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
  53:./ChibiOS/os/rt/include/chqueues.h **** /* Derived constants and error checks.                                       */
  54:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
  55:./ChibiOS/os/rt/include/chqueues.h **** 
  56:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
  57:./ChibiOS/os/rt/include/chqueues.h **** /* Module data structures and types.                                         */
  58:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
  59:./ChibiOS/os/rt/include/chqueues.h **** 
  60:./ChibiOS/os/rt/include/chqueues.h **** /**
  61:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Type of a generic I/O queue structure.
  62:./ChibiOS/os/rt/include/chqueues.h ****  */
  63:./ChibiOS/os/rt/include/chqueues.h **** typedef struct io_queue io_queue_t;
  64:./ChibiOS/os/rt/include/chqueues.h **** 
  65:./ChibiOS/os/rt/include/chqueues.h **** /** @brief Queue notification callback type.*/
  66:./ChibiOS/os/rt/include/chqueues.h **** typedef void (*qnotify_t)(io_queue_t *qp);
  67:./ChibiOS/os/rt/include/chqueues.h **** 
  68:./ChibiOS/os/rt/include/chqueues.h **** /**
  69:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Generic I/O queue structure.
  70:./ChibiOS/os/rt/include/chqueues.h ****  * @details This structure represents a generic Input or Output asymmetrical
  71:./ChibiOS/os/rt/include/chqueues.h ****  *          queue. The queue is asymmetrical because one end is meant to be
  72:./ChibiOS/os/rt/include/chqueues.h ****  *          accessed from a thread context, and thus can be blocking, the other
  73:./ChibiOS/os/rt/include/chqueues.h ****  *          end is accessible from interrupt handlers or from within a kernel
  74:./ChibiOS/os/rt/include/chqueues.h ****  *          lock zone (see <b>I-Locked</b> and <b>S-Locked</b> states in
  75:./ChibiOS/os/rt/include/chqueues.h ****  *          @ref system_states) and is non-blocking.
  76:./ChibiOS/os/rt/include/chqueues.h ****  */
  77:./ChibiOS/os/rt/include/chqueues.h **** struct io_queue {
  78:./ChibiOS/os/rt/include/chqueues.h ****   threads_queue_t       q_waiting;  /**< @brief Queue of waiting threads.   */
  79:./ChibiOS/os/rt/include/chqueues.h ****   volatile size_t       q_counter;  /**< @brief Resources counter.          */
  80:./ChibiOS/os/rt/include/chqueues.h ****   uint8_t               *q_buffer;  /**< @brief Pointer to the queue buffer.*/
  81:./ChibiOS/os/rt/include/chqueues.h ****   uint8_t               *q_top;     /**< @brief Pointer to the first location
  82:./ChibiOS/os/rt/include/chqueues.h ****                                                 after the buffer.           */
  83:./ChibiOS/os/rt/include/chqueues.h ****   uint8_t               *q_wrptr;   /**< @brief Write pointer.              */
  84:./ChibiOS/os/rt/include/chqueues.h ****   uint8_t               *q_rdptr;   /**< @brief Read pointer.               */
  85:./ChibiOS/os/rt/include/chqueues.h ****   qnotify_t             q_notify;   /**< @brief Data notification callback. */
  86:./ChibiOS/os/rt/include/chqueues.h ****   void                  *q_link;    /**< @brief Application defined field.  */
  87:./ChibiOS/os/rt/include/chqueues.h **** };
  88:./ChibiOS/os/rt/include/chqueues.h **** 
  89:./ChibiOS/os/rt/include/chqueues.h **** /**
  90:./ChibiOS/os/rt/include/chqueues.h ****  * @extends io_queue_t
  91:./ChibiOS/os/rt/include/chqueues.h ****  *
  92:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Type of an input queue structure.
  93:./ChibiOS/os/rt/include/chqueues.h ****  * @details This structure represents a generic asymmetrical input queue.
  94:./ChibiOS/os/rt/include/chqueues.h ****  *          Writing to the queue is non-blocking and can be performed from
  95:./ChibiOS/os/rt/include/chqueues.h ****  *          interrupt handlers or from within a kernel lock zone (see
  96:./ChibiOS/os/rt/include/chqueues.h ****  *          <b>I-Locked</b> and <b>S-Locked</b> states in @ref system_states).
  97:./ChibiOS/os/rt/include/chqueues.h ****  *          Reading the queue can be a blocking operation and is supposed to
  98:./ChibiOS/os/rt/include/chqueues.h ****  *          be performed by a system thread.
  99:./ChibiOS/os/rt/include/chqueues.h ****  */
 100:./ChibiOS/os/rt/include/chqueues.h **** typedef io_queue_t input_queue_t;
 101:./ChibiOS/os/rt/include/chqueues.h **** 
 102:./ChibiOS/os/rt/include/chqueues.h **** /**
 103:./ChibiOS/os/rt/include/chqueues.h ****  * @extends io_queue_t
 104:./ChibiOS/os/rt/include/chqueues.h ****  *
 105:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Type of an output queue structure.
 106:./ChibiOS/os/rt/include/chqueues.h ****  * @details This structure represents a generic asymmetrical output queue.
 107:./ChibiOS/os/rt/include/chqueues.h ****  *          Reading from the queue is non-blocking and can be performed from
 108:./ChibiOS/os/rt/include/chqueues.h ****  *          interrupt handlers or from within a kernel lock zone (see
 109:./ChibiOS/os/rt/include/chqueues.h ****  *          <b>I-Locked</b> and <b>S-Locked</b> states in @ref system_states).
 110:./ChibiOS/os/rt/include/chqueues.h ****  *          Writing the queue can be a blocking operation and is supposed to
 111:./ChibiOS/os/rt/include/chqueues.h ****  *          be performed by a system thread.
 112:./ChibiOS/os/rt/include/chqueues.h ****  */
 113:./ChibiOS/os/rt/include/chqueues.h **** typedef io_queue_t output_queue_t;
 114:./ChibiOS/os/rt/include/chqueues.h **** 
 115:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
 116:./ChibiOS/os/rt/include/chqueues.h **** /* Module macros.                                                            */
 117:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
 118:./ChibiOS/os/rt/include/chqueues.h **** 
 119:./ChibiOS/os/rt/include/chqueues.h **** /**
 120:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Data part of a static input queue initializer.
 121:./ChibiOS/os/rt/include/chqueues.h ****  * @details This macro should be used when statically initializing an
 122:./ChibiOS/os/rt/include/chqueues.h ****  *          input queue that is part of a bigger structure.
 123:./ChibiOS/os/rt/include/chqueues.h ****  *
 124:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] name      the name of the input queue variable
 125:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] buffer    pointer to the queue buffer area
 126:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] size      size of the queue buffer area
 127:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] inotify   input notification callback pointer
 128:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] link      application defined pointer
 129:./ChibiOS/os/rt/include/chqueues.h ****  */
 130:./ChibiOS/os/rt/include/chqueues.h **** #define _INPUTQUEUE_DATA(name, buffer, size, inotify, link) {               \
 131:./ChibiOS/os/rt/include/chqueues.h ****   _THREADS_QUEUE_DATA(name),                                                \
 132:./ChibiOS/os/rt/include/chqueues.h ****   0U,                                                                       \
 133:./ChibiOS/os/rt/include/chqueues.h ****   (uint8_t *)(buffer),                                                      \
 134:./ChibiOS/os/rt/include/chqueues.h ****   (uint8_t *)(buffer) + (size),                                             \
 135:./ChibiOS/os/rt/include/chqueues.h ****   (uint8_t *)(buffer),                                                      \
 136:./ChibiOS/os/rt/include/chqueues.h ****   (uint8_t *)(buffer),                                                      \
 137:./ChibiOS/os/rt/include/chqueues.h ****   (inotify),                                                                \
 138:./ChibiOS/os/rt/include/chqueues.h ****   (link)                                                                    \
 139:./ChibiOS/os/rt/include/chqueues.h **** }
 140:./ChibiOS/os/rt/include/chqueues.h **** 
 141:./ChibiOS/os/rt/include/chqueues.h **** /**
 142:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Static input queue initializer.
 143:./ChibiOS/os/rt/include/chqueues.h ****  * @details Statically initialized input queues require no explicit
 144:./ChibiOS/os/rt/include/chqueues.h ****  *          initialization using @p chIQInit().
 145:./ChibiOS/os/rt/include/chqueues.h ****  *
 146:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] name      the name of the input queue variable
 147:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] buffer    pointer to the queue buffer area
 148:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] size      size of the queue buffer area
 149:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] inotify   input notification callback pointer
 150:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] link      application defined pointer
 151:./ChibiOS/os/rt/include/chqueues.h ****  */
 152:./ChibiOS/os/rt/include/chqueues.h **** #define INPUTQUEUE_DECL(name, buffer, size, inotify, link)                  \
 153:./ChibiOS/os/rt/include/chqueues.h ****   input_queue_t name = _INPUTQUEUE_DATA(name, buffer, size, inotify, link)
 154:./ChibiOS/os/rt/include/chqueues.h **** 
 155:./ChibiOS/os/rt/include/chqueues.h **** /**
 156:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Data part of a static output queue initializer.
 157:./ChibiOS/os/rt/include/chqueues.h ****  * @details This macro should be used when statically initializing an
 158:./ChibiOS/os/rt/include/chqueues.h ****  *          output queue that is part of a bigger structure.
 159:./ChibiOS/os/rt/include/chqueues.h ****  *
 160:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] name      the name of the output queue variable
 161:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] buffer    pointer to the queue buffer area
 162:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] size      size of the queue buffer area
 163:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] onotify   output notification callback pointer
 164:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] link      application defined pointer
 165:./ChibiOS/os/rt/include/chqueues.h ****  */
 166:./ChibiOS/os/rt/include/chqueues.h **** #define _OUTPUTQUEUE_DATA(name, buffer, size, onotify, link) {              \
 167:./ChibiOS/os/rt/include/chqueues.h ****   _THREADS_QUEUE_DATA(name),                                                \
 168:./ChibiOS/os/rt/include/chqueues.h ****   (size),                                                                   \
 169:./ChibiOS/os/rt/include/chqueues.h ****   (uint8_t *)(buffer),                                                      \
 170:./ChibiOS/os/rt/include/chqueues.h ****   (uint8_t *)(buffer) + (size),                                             \
 171:./ChibiOS/os/rt/include/chqueues.h ****   (uint8_t *)(buffer),                                                      \
 172:./ChibiOS/os/rt/include/chqueues.h ****   (uint8_t *)(buffer),                                                      \
 173:./ChibiOS/os/rt/include/chqueues.h ****   (onotify),                                                                \
 174:./ChibiOS/os/rt/include/chqueues.h ****   (link)                                                                    \
 175:./ChibiOS/os/rt/include/chqueues.h **** }
 176:./ChibiOS/os/rt/include/chqueues.h **** 
 177:./ChibiOS/os/rt/include/chqueues.h **** /**
 178:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Static output queue initializer.
 179:./ChibiOS/os/rt/include/chqueues.h ****  * @details Statically initialized output queues require no explicit
 180:./ChibiOS/os/rt/include/chqueues.h ****  *          initialization using @p chOQInit().
 181:./ChibiOS/os/rt/include/chqueues.h ****  *
 182:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] name      the name of the output queue variable
 183:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] buffer    pointer to the queue buffer area
 184:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] size      size of the queue buffer area
 185:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] onotify   output notification callback pointer
 186:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] link      application defined pointer
 187:./ChibiOS/os/rt/include/chqueues.h ****  */
 188:./ChibiOS/os/rt/include/chqueues.h **** #define OUTPUTQUEUE_DECL(name, buffer, size, onotify, link)                 \
 189:./ChibiOS/os/rt/include/chqueues.h ****   output_queue_t name = _OUTPUTQUEUE_DATA(name, buffer, size, onotify, link)
 190:./ChibiOS/os/rt/include/chqueues.h **** 
 191:./ChibiOS/os/rt/include/chqueues.h **** /**
 192:./ChibiOS/os/rt/include/chqueues.h ****  * @name    Macro Functions
 193:./ChibiOS/os/rt/include/chqueues.h ****  * @{
 194:./ChibiOS/os/rt/include/chqueues.h ****  */
 195:./ChibiOS/os/rt/include/chqueues.h **** /**
 196:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Returns the queue's buffer size.
 197:./ChibiOS/os/rt/include/chqueues.h ****  *
 198:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] qp        pointer to a @p io_queue_t structure
 199:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The buffer size.
 200:./ChibiOS/os/rt/include/chqueues.h ****  *
 201:./ChibiOS/os/rt/include/chqueues.h ****  * @xclass
 202:./ChibiOS/os/rt/include/chqueues.h ****  */
 203:./ChibiOS/os/rt/include/chqueues.h **** #define chQSizeX(qp)                                                        \
 204:./ChibiOS/os/rt/include/chqueues.h ****   /*lint -save -e9033 [10.8] The cast is safe.*/                            \
 205:./ChibiOS/os/rt/include/chqueues.h ****   ((size_t)((qp)->q_top - (qp)->q_buffer))                                  \
 206:./ChibiOS/os/rt/include/chqueues.h ****   /*lint -restore*/
 207:./ChibiOS/os/rt/include/chqueues.h **** 
 208:./ChibiOS/os/rt/include/chqueues.h **** /**
 209:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Queue space.
 210:./ChibiOS/os/rt/include/chqueues.h ****  * @details Returns the used space if used on an input queue or the empty
 211:./ChibiOS/os/rt/include/chqueues.h ****  *          space if used on an output queue.
 212:./ChibiOS/os/rt/include/chqueues.h ****  *
 213:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] qp        pointer to a @p io_queue_t structure
 214:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The buffer space.
 215:./ChibiOS/os/rt/include/chqueues.h ****  *
 216:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 217:./ChibiOS/os/rt/include/chqueues.h ****  */
 218:./ChibiOS/os/rt/include/chqueues.h **** #define chQSpaceI(qp) ((qp)->q_counter)
 219:./ChibiOS/os/rt/include/chqueues.h **** 
 220:./ChibiOS/os/rt/include/chqueues.h **** /**
 221:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Returns the queue application-defined link.
 222:./ChibiOS/os/rt/include/chqueues.h ****  *
 223:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] qp        pointer to a @p io_queue_t structure
 224:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The application-defined link.
 225:./ChibiOS/os/rt/include/chqueues.h ****  *
 226:./ChibiOS/os/rt/include/chqueues.h ****  * @xclass
 227:./ChibiOS/os/rt/include/chqueues.h ****  */
 228:./ChibiOS/os/rt/include/chqueues.h **** #define chQGetLinkX(qp) ((qp)->q_link)
 229:./ChibiOS/os/rt/include/chqueues.h **** /** @} */
 230:./ChibiOS/os/rt/include/chqueues.h **** 
 231:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
 232:./ChibiOS/os/rt/include/chqueues.h **** /* External declarations.                                                    */
 233:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
 234:./ChibiOS/os/rt/include/chqueues.h **** 
 235:./ChibiOS/os/rt/include/chqueues.h **** #ifdef __cplusplus
 236:./ChibiOS/os/rt/include/chqueues.h **** extern "C" {
 237:./ChibiOS/os/rt/include/chqueues.h **** #endif
 238:./ChibiOS/os/rt/include/chqueues.h ****   void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
 239:./ChibiOS/os/rt/include/chqueues.h ****                       qnotify_t infy, void *link);
 240:./ChibiOS/os/rt/include/chqueues.h ****   void chIQResetI(input_queue_t *iqp);
 241:./ChibiOS/os/rt/include/chqueues.h ****   msg_t chIQPutI(input_queue_t *iqp, uint8_t b);
 242:./ChibiOS/os/rt/include/chqueues.h ****   msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout);
 243:./ChibiOS/os/rt/include/chqueues.h ****   size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
 244:./ChibiOS/os/rt/include/chqueues.h ****                          size_t n, systime_t timeout);
 245:./ChibiOS/os/rt/include/chqueues.h **** 
 246:./ChibiOS/os/rt/include/chqueues.h ****   void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
 247:./ChibiOS/os/rt/include/chqueues.h ****                       qnotify_t onfy, void *link);
 248:./ChibiOS/os/rt/include/chqueues.h ****   void chOQResetI(output_queue_t *oqp);
 249:./ChibiOS/os/rt/include/chqueues.h ****   msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout);
 250:./ChibiOS/os/rt/include/chqueues.h ****   msg_t chOQGetI(output_queue_t *oqp);
 251:./ChibiOS/os/rt/include/chqueues.h ****   size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
 252:./ChibiOS/os/rt/include/chqueues.h ****                           size_t n, systime_t timeout);
 253:./ChibiOS/os/rt/include/chqueues.h **** #ifdef __cplusplus
 254:./ChibiOS/os/rt/include/chqueues.h **** }
 255:./ChibiOS/os/rt/include/chqueues.h **** #endif
 256:./ChibiOS/os/rt/include/chqueues.h **** 
 257:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
 258:./ChibiOS/os/rt/include/chqueues.h **** /* Module inline functions.                                                  */
 259:./ChibiOS/os/rt/include/chqueues.h **** /*===========================================================================*/
 260:./ChibiOS/os/rt/include/chqueues.h **** 
 261:./ChibiOS/os/rt/include/chqueues.h **** /**
 262:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Returns the filled space into an input queue.
 263:./ChibiOS/os/rt/include/chqueues.h ****  *
 264:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 265:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The number of full bytes in the queue.
 266:./ChibiOS/os/rt/include/chqueues.h ****  * @retval 0            if the queue is empty.
 267:./ChibiOS/os/rt/include/chqueues.h ****  *
 268:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 269:./ChibiOS/os/rt/include/chqueues.h ****  */
 270:./ChibiOS/os/rt/include/chqueues.h **** static inline size_t chIQGetFullI(input_queue_t *iqp) {
 271:./ChibiOS/os/rt/include/chqueues.h **** 
 272:./ChibiOS/os/rt/include/chqueues.h ****   chDbgCheckClassI();
 273:./ChibiOS/os/rt/include/chqueues.h **** 
 274:./ChibiOS/os/rt/include/chqueues.h ****   return (size_t)chQSpaceI(iqp);
 275:./ChibiOS/os/rt/include/chqueues.h **** }
 276:./ChibiOS/os/rt/include/chqueues.h **** 
 277:./ChibiOS/os/rt/include/chqueues.h **** /**
 278:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Returns the empty space into an input queue.
 279:./ChibiOS/os/rt/include/chqueues.h ****  *
 280:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 281:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The number of empty bytes in the queue.
 282:./ChibiOS/os/rt/include/chqueues.h ****  * @retval 0            if the queue is full.
 283:./ChibiOS/os/rt/include/chqueues.h ****  *
 284:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 285:./ChibiOS/os/rt/include/chqueues.h ****  */
 286:./ChibiOS/os/rt/include/chqueues.h **** static inline size_t chIQGetEmptyI(input_queue_t *iqp) {
 287:./ChibiOS/os/rt/include/chqueues.h **** 
 288:./ChibiOS/os/rt/include/chqueues.h ****   chDbgCheckClassI();
 289:./ChibiOS/os/rt/include/chqueues.h **** 
 290:./ChibiOS/os/rt/include/chqueues.h ****   return (size_t)(chQSizeX(iqp) - chQSpaceI(iqp));
 291:./ChibiOS/os/rt/include/chqueues.h **** }
 292:./ChibiOS/os/rt/include/chqueues.h **** 
 293:./ChibiOS/os/rt/include/chqueues.h **** /**
 294:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Evaluates to @p true if the specified input queue is empty.
 295:./ChibiOS/os/rt/include/chqueues.h ****  *
 296:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 297:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The queue status.
 298:./ChibiOS/os/rt/include/chqueues.h ****  * @retval false        if the queue is not empty.
 299:./ChibiOS/os/rt/include/chqueues.h ****  * @retval true         if the queue is empty.
 300:./ChibiOS/os/rt/include/chqueues.h ****  *
 301:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 302:./ChibiOS/os/rt/include/chqueues.h ****  */
 303:./ChibiOS/os/rt/include/chqueues.h **** static inline bool chIQIsEmptyI(input_queue_t *iqp) {
 304:./ChibiOS/os/rt/include/chqueues.h **** 
 305:./ChibiOS/os/rt/include/chqueues.h ****   chDbgCheckClassI();
 306:./ChibiOS/os/rt/include/chqueues.h **** 
 307:./ChibiOS/os/rt/include/chqueues.h ****   return (bool)(chQSpaceI(iqp) == 0U);
 456               		.loc 5 307 0
 457 000a 8985      		ldd r24,Y+9
 458 000c 9A85      		ldd r25,Y+10
 459               	.LVL46:
 460               	.LBE76:
 461               	.LBE75:
 200:ChibiOS/os/hal/src/serial.c **** 
 201:ChibiOS/os/hal/src/serial.c ****   osalDbgCheckClassI();
 202:ChibiOS/os/hal/src/serial.c ****   osalDbgCheck(sdp != NULL);
 203:ChibiOS/os/hal/src/serial.c **** 
 204:ChibiOS/os/hal/src/serial.c ****   if (iqIsEmptyI(&sdp->iqueue))
 462               		.loc 1 204 0
 463 000e 892B      		or r24,r25
 464 0010 01F0      		breq .L17
 205:ChibiOS/os/hal/src/serial.c ****     chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
 206:ChibiOS/os/hal/src/serial.c ****   if (iqPutI(&sdp->iqueue, b) < Q_OK)
 465               		.loc 1 206 0
 466 0012 612F      		mov r22,r17
 467               	.LVL47:
 468 0014 CE01      		movw r24,r28
 469 0016 0596      		adiw r24,5
 470               	.LVL48:
 471 0018 0E94 0000 		call chIQPutI
 472               	.LVL49:
 473 001c 97FD      		sbrc r25,7
 474 001e 00C0      		rjmp .L18
 475               	.L13:
 476               	/* epilogue start */
 207:ChibiOS/os/hal/src/serial.c ****     chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
 208:ChibiOS/os/hal/src/serial.c **** }
 477               		.loc 1 208 0
 478 0020 DF91      		pop r29
 479 0022 CF91      		pop r28
 480               	.LVL50:
 481 0024 1F91      		pop r17
 482               	.LVL51:
 483 0026 0895      		ret
 484               	.LVL52:
 485               	.L17:
 486               	.LBB77:
 487               	.LBB78:
 601:./ChibiOS/os/hal/osal/rt/osal.h **** }
 602:./ChibiOS/os/hal/osal/rt/osal.h **** 
 603:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 604:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:./ChibiOS/os/hal/osal/rt/osal.h ****  *          invocation.
 607:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:./ChibiOS/os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:./ChibiOS/os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 612:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 614:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 615:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 616:./ChibiOS/os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:./ChibiOS/os/hal/osal/rt/osal.h **** 
 618:./ChibiOS/os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:./ChibiOS/os/hal/osal/rt/osal.h **** }
 620:./ChibiOS/os/hal/osal/rt/osal.h **** 
 621:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 622:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:./ChibiOS/os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 627:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:./ChibiOS/os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:./ChibiOS/os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 633:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 634:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 635:./ChibiOS/os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:./ChibiOS/os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:./ChibiOS/os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:./ChibiOS/os/hal/osal/rt/osal.h **** 
 639:./ChibiOS/os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:./ChibiOS/os/hal/osal/rt/osal.h **** }
 641:./ChibiOS/os/hal/osal/rt/osal.h **** 
 642:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 643:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 645:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      .
 651:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 652:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 653:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 654:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:./ChibiOS/os/hal/osal/rt/osal.h **** 
 656:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:./ChibiOS/os/hal/osal/rt/osal.h **** }
 658:./ChibiOS/os/hal/osal/rt/osal.h **** 
 659:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 660:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 662:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      .
 668:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 669:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 670:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 671:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:./ChibiOS/os/hal/osal/rt/osal.h **** 
 673:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:./ChibiOS/os/hal/osal/rt/osal.h **** }
 675:./ChibiOS/os/hal/osal/rt/osal.h **** 
 676:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 677:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:./ChibiOS/os/hal/osal/rt/osal.h ****  *          context.
 680:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 681:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 684:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 685:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 686:./ChibiOS/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:./ChibiOS/os/hal/osal/rt/osal.h **** 
 688:./ChibiOS/os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:./ChibiOS/os/hal/osal/rt/osal.h **** }
 690:./ChibiOS/os/hal/osal/rt/osal.h **** 
 691:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 692:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:./ChibiOS/os/hal/osal/rt/osal.h ****  *          context.
 695:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 696:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        state.
 701:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        occurred.
 704:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      .
 705:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:./ChibiOS/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 708:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 709:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 710:./ChibiOS/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:./ChibiOS/os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:./ChibiOS/os/hal/osal/rt/osal.h **** 
 713:./ChibiOS/os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:./ChibiOS/os/hal/osal/rt/osal.h **** }
 715:./ChibiOS/os/hal/osal/rt/osal.h **** 
 716:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 717:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:./ChibiOS/os/hal/osal/rt/osal.h ****  *          ISR context.
 720:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 721:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 724:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 725:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 726:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:./ChibiOS/os/hal/osal/rt/osal.h **** 
 728:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:./ChibiOS/os/hal/osal/rt/osal.h **** }
 730:./ChibiOS/os/hal/osal/rt/osal.h **** 
 731:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 732:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:./ChibiOS/os/hal/osal/rt/osal.h ****  *          context.
 735:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 736:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 739:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 740:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 741:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:./ChibiOS/os/hal/osal/rt/osal.h **** 
 743:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:./ChibiOS/os/hal/osal/rt/osal.h **** }
 745:./ChibiOS/os/hal/osal/rt/osal.h **** 
 746:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 747:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 749:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 751:./ChibiOS/os/hal/osal/rt/osal.h ****  * @init
 752:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 753:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:./ChibiOS/os/hal/osal/rt/osal.h **** 
 755:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:./ChibiOS/os/hal/osal/rt/osal.h **** }
 757:./ChibiOS/os/hal/osal/rt/osal.h **** 
 758:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 759:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:./ChibiOS/os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 763:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        state.
 768:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        occurred.
 771:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      .
 772:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:./ChibiOS/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      specification.
 778:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 779:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 780:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 781:./ChibiOS/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:./ChibiOS/os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:./ChibiOS/os/hal/osal/rt/osal.h **** 
 784:./ChibiOS/os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:./ChibiOS/os/hal/osal/rt/osal.h **** }
 786:./ChibiOS/os/hal/osal/rt/osal.h **** 
 787:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 788:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 790:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 793:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 794:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 795:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:./ChibiOS/os/hal/osal/rt/osal.h **** 
 797:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:./ChibiOS/os/hal/osal/rt/osal.h **** }
 799:./ChibiOS/os/hal/osal/rt/osal.h **** 
 800:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 801:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 803:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 806:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 807:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 808:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:./ChibiOS/os/hal/osal/rt/osal.h **** 
 810:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 811:./ChibiOS/os/hal/osal/rt/osal.h **** }
 812:./ChibiOS/os/hal/osal/rt/osal.h **** 
 813:./ChibiOS/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 814:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 815:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Initializes an event flags object.
 816:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 817:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[out] esp      pointer to the event flags object
 818:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 819:./ChibiOS/os/hal/osal/rt/osal.h ****  * @init
 820:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 821:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 822:./ChibiOS/os/hal/osal/rt/osal.h **** 
 823:./ChibiOS/os/hal/osal/rt/osal.h ****   chEvtObjectInit(esp);
 824:./ChibiOS/os/hal/osal/rt/osal.h **** }
 825:./ChibiOS/os/hal/osal/rt/osal.h **** #else
 826:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalEventObjectInit(event_source_t *esp) {
 827:./ChibiOS/os/hal/osal/rt/osal.h **** 
 828:./ChibiOS/os/hal/osal/rt/osal.h ****   esp->flags = 0;
 829:./ChibiOS/os/hal/osal/rt/osal.h **** }
 830:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 831:./ChibiOS/os/hal/osal/rt/osal.h **** 
 832:./ChibiOS/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
 833:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 834:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Add flags to an event source object.
 835:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 836:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] esp       pointer to the event flags object
 837:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] flags     flags to be ORed to the flags mask
 838:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 839:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 840:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 841:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalEventBroadcastFlagsI(event_source_t *esp,
 842:./ChibiOS/os/hal/osal/rt/osal.h ****                                             eventflags_t flags) {
 843:./ChibiOS/os/hal/osal/rt/osal.h **** 
 844:./ChibiOS/os/hal/osal/rt/osal.h ****   chEvtBroadcastFlagsI(esp, flags);
 488               		.loc 4 844 0
 489 0028 64E0      		ldi r22,lo8(4)
 490 002a CE01      		movw r24,r28
 491 002c 0296      		adiw r24,2
 492               	.LVL53:
 493 002e 0E94 0000 		call chEvtBroadcastFlagsI
 494               	.LVL54:
 495               	.LBE78:
 496               	.LBE77:
 206:ChibiOS/os/hal/src/serial.c ****     chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
 497               		.loc 1 206 0
 498 0032 612F      		mov r22,r17
 499 0034 CE01      		movw r24,r28
 500 0036 0596      		adiw r24,5
 501 0038 0E94 0000 		call chIQPutI
 502               	.LVL55:
 503 003c 97FF      		sbrs r25,7
 504 003e 00C0      		rjmp .L13
 505               	.LVL56:
 506               	.L18:
 507               	.LBB79:
 508               	.LBB80:
 509               		.loc 4 844 0
 510 0040 60E8      		ldi r22,lo8(-128)
 511 0042 CE01      		movw r24,r28
 512 0044 0296      		adiw r24,2
 513               	.LVL57:
 514               	/* epilogue start */
 515               	.LBE80:
 516               	.LBE79:
 517               		.loc 1 208 0
 518 0046 DF91      		pop r29
 519 0048 CF91      		pop r28
 520               	.LVL58:
 521 004a 1F91      		pop r17
 522               	.LVL59:
 523               	.LBB82:
 524               	.LBB81:
 525               		.loc 4 844 0
 526 004c 0C94 0000 		jmp chEvtBroadcastFlagsI
 527               	.LVL60:
 528               	.LBE81:
 529               	.LBE82:
 530               		.cfi_endproc
 531               	.LFE148:
 533               		.section	.text.sdRequestDataI,"ax",@progbits
 534               	.global	sdRequestDataI
 536               	sdRequestDataI:
 537               	.LFB149:
 209:ChibiOS/os/hal/src/serial.c **** 
 210:ChibiOS/os/hal/src/serial.c **** /**
 211:ChibiOS/os/hal/src/serial.c ****  * @brief   Handles outgoing data.
 212:ChibiOS/os/hal/src/serial.c ****  * @details Must be called from the output interrupt service routine in order
 213:ChibiOS/os/hal/src/serial.c ****  *          to get the next byte to be transmitted.
 214:ChibiOS/os/hal/src/serial.c ****  * @note    In order to gain some performance it is suggested to not use
 215:ChibiOS/os/hal/src/serial.c ****  *          this function directly but copy this code directly into the
 216:ChibiOS/os/hal/src/serial.c ****  *          interrupt service routine.
 217:ChibiOS/os/hal/src/serial.c ****  *
 218:ChibiOS/os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 219:ChibiOS/os/hal/src/serial.c ****  * @return              The byte value read from the driver's output queue.
 220:ChibiOS/os/hal/src/serial.c ****  * @retval Q_EMPTY      if the queue is empty (the lower driver usually
 221:ChibiOS/os/hal/src/serial.c ****  *                      disables the interrupt source when this happens).
 222:ChibiOS/os/hal/src/serial.c ****  *
 223:ChibiOS/os/hal/src/serial.c ****  * @iclass
 224:ChibiOS/os/hal/src/serial.c ****  */
 225:ChibiOS/os/hal/src/serial.c **** msg_t sdRequestDataI(SerialDriver *sdp) {
 538               		.loc 1 225 0
 539               		.cfi_startproc
 540               	.LVL61:
 541 0000 0F93      		push r16
 542               	.LCFI13:
 543               		.cfi_def_cfa_offset 3
 544               		.cfi_offset 16, -2
 545 0002 1F93      		push r17
 546               	.LCFI14:
 547               		.cfi_def_cfa_offset 4
 548               		.cfi_offset 17, -3
 549 0004 CF93      		push r28
 550               	.LCFI15:
 551               		.cfi_def_cfa_offset 5
 552               		.cfi_offset 28, -4
 553 0006 DF93      		push r29
 554               	.LCFI16:
 555               		.cfi_def_cfa_offset 6
 556               		.cfi_offset 29, -5
 557               	/* prologue: function */
 558               	/* frame size = 0 */
 559               	/* stack size = 4 */
 560               	.L__stack_usage = 4
 561 0008 8C01      		movw r16,r24
 226:ChibiOS/os/hal/src/serial.c ****   msg_t  b;
 227:ChibiOS/os/hal/src/serial.c **** 
 228:ChibiOS/os/hal/src/serial.c ****   osalDbgCheckClassI();
 229:ChibiOS/os/hal/src/serial.c ****   osalDbgCheck(sdp != NULL);
 230:ChibiOS/os/hal/src/serial.c **** 
 231:ChibiOS/os/hal/src/serial.c ****   b = oqGetI(&sdp->oqueue);
 562               		.loc 1 231 0
 563 000a 4796      		adiw r24,23
 564               	.LVL62:
 565 000c 0E94 0000 		call chOQGetI
 566               	.LVL63:
 567 0010 EC01      		movw r28,r24
 568               	.LVL64:
 232:ChibiOS/os/hal/src/serial.c ****   if (b < Q_OK)
 569               		.loc 1 232 0
 570 0012 97FD      		sbrc r25,7
 571 0014 00C0      		rjmp .L21
 233:ChibiOS/os/hal/src/serial.c ****     chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
 234:ChibiOS/os/hal/src/serial.c ****   return b;
 235:ChibiOS/os/hal/src/serial.c **** }
 572               		.loc 1 235 0
 573 0016 CE01      		movw r24,r28
 574               	/* epilogue start */
 575 0018 DF91      		pop r29
 576 001a CF91      		pop r28
 577 001c 1F91      		pop r17
 578 001e 0F91      		pop r16
 579               	.LVL65:
 580 0020 0895      		ret
 581               	.LVL66:
 582               	.L21:
 583               	.LBB83:
 584               	.LBB84:
 585               		.loc 4 844 0
 586 0022 68E0      		ldi r22,lo8(8)
 587 0024 C801      		movw r24,r16
 588               	.LVL67:
 589 0026 0296      		adiw r24,2
 590               	.LVL68:
 591 0028 0E94 0000 		call chEvtBroadcastFlagsI
 592               	.LVL69:
 593               	.LBE84:
 594               	.LBE83:
 595               		.loc 1 235 0
 596 002c CE01      		movw r24,r28
 597               	/* epilogue start */
 598 002e DF91      		pop r29
 599 0030 CF91      		pop r28
 600               	.LVL70:
 601 0032 1F91      		pop r17
 602 0034 0F91      		pop r16
 603               	.LVL71:
 604 0036 0895      		ret
 605               		.cfi_endproc
 606               	.LFE149:
 608               		.section	.text.sdPutWouldBlock,"ax",@progbits
 609               	.global	sdPutWouldBlock
 611               	sdPutWouldBlock:
 612               	.LFB150:
 236:ChibiOS/os/hal/src/serial.c **** 
 237:ChibiOS/os/hal/src/serial.c **** /**
 238:ChibiOS/os/hal/src/serial.c ****  * @brief   Direct output check on a @p SerialDriver.
 239:ChibiOS/os/hal/src/serial.c ****  * @note    This function bypasses the indirect access to the channel and
 240:ChibiOS/os/hal/src/serial.c ****  *          checks directly the output queue. This is faster but cannot
 241:ChibiOS/os/hal/src/serial.c ****  *          be used to check different channels implementations.
 242:ChibiOS/os/hal/src/serial.c ****  *
 243:ChibiOS/os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 244:ChibiOS/os/hal/src/serial.c ****  * @return              The queue status.
 245:ChibiOS/os/hal/src/serial.c ****  * @retval false        if the next write operation would not block.
 246:ChibiOS/os/hal/src/serial.c ****  * @retval true         if the next write operation would block.
 247:ChibiOS/os/hal/src/serial.c ****  *
 248:ChibiOS/os/hal/src/serial.c ****  * @deprecated
 249:ChibiOS/os/hal/src/serial.c ****  *
 250:ChibiOS/os/hal/src/serial.c ****  * @api
 251:ChibiOS/os/hal/src/serial.c ****  */
 252:ChibiOS/os/hal/src/serial.c **** bool sdPutWouldBlock(SerialDriver *sdp) {
 613               		.loc 1 252 0
 614               		.cfi_startproc
 615               	.LVL72:
 616               	/* prologue: function */
 617               	/* frame size = 0 */
 618               	/* stack size = 0 */
 619               	.L__stack_usage = 0
 620               	.LBB85:
 621               	.LBB86:
 622               	.LBB87:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 623               		.loc 3 348 0
 624               	/* #APP */
 625               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 626 0000 F894      		cli
 627               	 ;  0 "" 2
 628               	.LVL73:
 629               	/* #NOAPP */
 630               	.LBE87:
 631               	.LBE86:
 632               	.LBE85:
 633               	.LBB88:
 634               	.LBB89:
 308:./ChibiOS/os/rt/include/chqueues.h **** }
 309:./ChibiOS/os/rt/include/chqueues.h **** 
 310:./ChibiOS/os/rt/include/chqueues.h **** /**
 311:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Evaluates to @p true if the specified input queue is full.
 312:./ChibiOS/os/rt/include/chqueues.h ****  *
 313:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 314:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The queue status.
 315:./ChibiOS/os/rt/include/chqueues.h ****  * @retval false        if the queue is not full.
 316:./ChibiOS/os/rt/include/chqueues.h ****  * @retval true         if the queue is full.
 317:./ChibiOS/os/rt/include/chqueues.h ****  *
 318:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 319:./ChibiOS/os/rt/include/chqueues.h ****  */
 320:./ChibiOS/os/rt/include/chqueues.h **** static inline bool chIQIsFullI(input_queue_t *iqp) {
 321:./ChibiOS/os/rt/include/chqueues.h **** 
 322:./ChibiOS/os/rt/include/chqueues.h ****   chDbgCheckClassI();
 323:./ChibiOS/os/rt/include/chqueues.h **** 
 324:./ChibiOS/os/rt/include/chqueues.h ****   /*lint -save -e9007 [13.5] No side effects.*/
 325:./ChibiOS/os/rt/include/chqueues.h ****   return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 326:./ChibiOS/os/rt/include/chqueues.h ****   /*lint -restore*/
 327:./ChibiOS/os/rt/include/chqueues.h **** }
 328:./ChibiOS/os/rt/include/chqueues.h **** 
 329:./ChibiOS/os/rt/include/chqueues.h **** /**
 330:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Input queue read.
 331:./ChibiOS/os/rt/include/chqueues.h ****  * @details This function reads a byte value from an input queue. If the queue
 332:./ChibiOS/os/rt/include/chqueues.h ****  *          is empty then the calling thread is suspended until a byte arrives
 333:./ChibiOS/os/rt/include/chqueues.h ****  *          in the queue.
 334:./ChibiOS/os/rt/include/chqueues.h ****  *
 335:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 336:./ChibiOS/os/rt/include/chqueues.h ****  * @return              A byte value from the queue.
 337:./ChibiOS/os/rt/include/chqueues.h ****  * @retval Q_RESET      if the queue has been reset.
 338:./ChibiOS/os/rt/include/chqueues.h ****  *
 339:./ChibiOS/os/rt/include/chqueues.h ****  * @api
 340:./ChibiOS/os/rt/include/chqueues.h ****  */
 341:./ChibiOS/os/rt/include/chqueues.h **** static inline msg_t chIQGet(input_queue_t *iqp) {
 342:./ChibiOS/os/rt/include/chqueues.h **** 
 343:./ChibiOS/os/rt/include/chqueues.h ****   return chIQGetTimeout(iqp, TIME_INFINITE);
 344:./ChibiOS/os/rt/include/chqueues.h **** }
 345:./ChibiOS/os/rt/include/chqueues.h **** 
 346:./ChibiOS/os/rt/include/chqueues.h **** /**
 347:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Returns the filled space into an output queue.
 348:./ChibiOS/os/rt/include/chqueues.h ****  *
 349:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 350:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The number of full bytes in the queue.
 351:./ChibiOS/os/rt/include/chqueues.h ****  * @retval 0            if the queue is empty.
 352:./ChibiOS/os/rt/include/chqueues.h ****  *
 353:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 354:./ChibiOS/os/rt/include/chqueues.h ****  */
 355:./ChibiOS/os/rt/include/chqueues.h **** static inline size_t chOQGetFullI(output_queue_t *oqp) {
 356:./ChibiOS/os/rt/include/chqueues.h **** 
 357:./ChibiOS/os/rt/include/chqueues.h ****   chDbgCheckClassI();
 358:./ChibiOS/os/rt/include/chqueues.h **** 
 359:./ChibiOS/os/rt/include/chqueues.h ****   return (size_t)(chQSizeX(oqp) - chQSpaceI(oqp));
 360:./ChibiOS/os/rt/include/chqueues.h **** }
 361:./ChibiOS/os/rt/include/chqueues.h **** 
 362:./ChibiOS/os/rt/include/chqueues.h **** /**
 363:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Returns the empty space into an output queue.
 364:./ChibiOS/os/rt/include/chqueues.h ****  *
 365:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 366:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The number of empty bytes in the queue.
 367:./ChibiOS/os/rt/include/chqueues.h ****  * @retval 0            if the queue is full.
 368:./ChibiOS/os/rt/include/chqueues.h ****  *
 369:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 370:./ChibiOS/os/rt/include/chqueues.h ****  */
 371:./ChibiOS/os/rt/include/chqueues.h **** static inline size_t chOQGetEmptyI(output_queue_t *oqp) {
 372:./ChibiOS/os/rt/include/chqueues.h **** 
 373:./ChibiOS/os/rt/include/chqueues.h ****   chDbgCheckClassI();
 374:./ChibiOS/os/rt/include/chqueues.h **** 
 375:./ChibiOS/os/rt/include/chqueues.h ****   return (size_t)chQSpaceI(oqp);
 376:./ChibiOS/os/rt/include/chqueues.h **** }
 377:./ChibiOS/os/rt/include/chqueues.h **** 
 378:./ChibiOS/os/rt/include/chqueues.h **** /**
 379:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Evaluates to @p true if the specified output queue is empty.
 380:./ChibiOS/os/rt/include/chqueues.h ****  *
 381:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 382:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The queue status.
 383:./ChibiOS/os/rt/include/chqueues.h ****  * @retval false        if the queue is not empty.
 384:./ChibiOS/os/rt/include/chqueues.h ****  * @retval true         if the queue is empty.
 385:./ChibiOS/os/rt/include/chqueues.h ****  *
 386:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 387:./ChibiOS/os/rt/include/chqueues.h ****  */
 388:./ChibiOS/os/rt/include/chqueues.h **** static inline bool chOQIsEmptyI(output_queue_t *oqp) {
 389:./ChibiOS/os/rt/include/chqueues.h **** 
 390:./ChibiOS/os/rt/include/chqueues.h ****   chDbgCheckClassI();
 391:./ChibiOS/os/rt/include/chqueues.h **** 
 392:./ChibiOS/os/rt/include/chqueues.h ****   /*lint -save -e9007 [13.5] No side effects.*/
 393:./ChibiOS/os/rt/include/chqueues.h ****   return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 394:./ChibiOS/os/rt/include/chqueues.h ****   /*lint -restore*/
 395:./ChibiOS/os/rt/include/chqueues.h **** }
 396:./ChibiOS/os/rt/include/chqueues.h **** 
 397:./ChibiOS/os/rt/include/chqueues.h **** /**
 398:./ChibiOS/os/rt/include/chqueues.h ****  * @brief   Evaluates to @p true if the specified output queue is full.
 399:./ChibiOS/os/rt/include/chqueues.h ****  *
 400:./ChibiOS/os/rt/include/chqueues.h ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 401:./ChibiOS/os/rt/include/chqueues.h ****  * @return              The queue status.
 402:./ChibiOS/os/rt/include/chqueues.h ****  * @retval false        if the queue is not full.
 403:./ChibiOS/os/rt/include/chqueues.h ****  * @retval true         if the queue is full.
 404:./ChibiOS/os/rt/include/chqueues.h ****  *
 405:./ChibiOS/os/rt/include/chqueues.h ****  * @iclass
 406:./ChibiOS/os/rt/include/chqueues.h ****  */
 407:./ChibiOS/os/rt/include/chqueues.h **** static inline bool chOQIsFullI(output_queue_t *oqp) {
 408:./ChibiOS/os/rt/include/chqueues.h **** 
 409:./ChibiOS/os/rt/include/chqueues.h ****   chDbgCheckClassI();
 410:./ChibiOS/os/rt/include/chqueues.h **** 
 411:./ChibiOS/os/rt/include/chqueues.h ****   return (bool)(chQSpaceI(oqp) == 0U);
 635               		.loc 5 411 0
 636 0002 FC01      		movw r30,r24
 637 0004 238D      		ldd r18,Z+27
 638 0006 348D      		ldd r19,Z+28
 639               	.LBE89:
 640               	.LBE88:
 641               	.LBB91:
 642               	.LBB92:
 643               	.LBB93:
 644               		.loc 3 371 0
 645               	/* #APP */
 646               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 647 0008 7894      		sei
 648               	 ;  0 "" 2
 649               	/* #NOAPP */
 650               	.LBE93:
 651               	.LBE92:
 652               	.LBE91:
 653               	.LBB94:
 654               	.LBB90:
 655               		.loc 5 411 0
 656 000a 81E0      		ldi r24,lo8(1)
 657               	.LVL74:
 658 000c 232B      		or r18,r19
 659 000e 01F0      		breq .L23
 660 0010 80E0      		ldi r24,0
 661               	.L23:
 662               	.LBE90:
 663               	.LBE94:
 253:ChibiOS/os/hal/src/serial.c ****   bool b;
 254:ChibiOS/os/hal/src/serial.c **** 
 255:ChibiOS/os/hal/src/serial.c ****   osalSysLock();
 256:ChibiOS/os/hal/src/serial.c ****   b = oqIsFullI(&sdp->oqueue);
 257:ChibiOS/os/hal/src/serial.c ****   osalSysUnlock();
 258:ChibiOS/os/hal/src/serial.c **** 
 259:ChibiOS/os/hal/src/serial.c ****   return b;
 260:ChibiOS/os/hal/src/serial.c **** }
 664               		.loc 1 260 0
 665 0012 0895      		ret
 666               		.cfi_endproc
 667               	.LFE150:
 669               		.section	.text.sdGetWouldBlock,"ax",@progbits
 670               	.global	sdGetWouldBlock
 672               	sdGetWouldBlock:
 673               	.LFB151:
 261:ChibiOS/os/hal/src/serial.c **** 
 262:ChibiOS/os/hal/src/serial.c **** /**
 263:ChibiOS/os/hal/src/serial.c ****  * @brief   Direct input check on a @p SerialDriver.
 264:ChibiOS/os/hal/src/serial.c ****  * @note    This function bypasses the indirect access to the channel and
 265:ChibiOS/os/hal/src/serial.c ****  *          checks directly the input queue. This is faster but cannot
 266:ChibiOS/os/hal/src/serial.c ****  *          be used to check different channels implementations.
 267:ChibiOS/os/hal/src/serial.c ****  *
 268:ChibiOS/os/hal/src/serial.c ****  * @param[in] sdp       pointer to a @p SerialDriver structure
 269:ChibiOS/os/hal/src/serial.c ****  * @return              The queue status.
 270:ChibiOS/os/hal/src/serial.c ****  * @retval false        if the next write operation would not block.
 271:ChibiOS/os/hal/src/serial.c ****  * @retval true         if the next write operation would block.
 272:ChibiOS/os/hal/src/serial.c ****  *
 273:ChibiOS/os/hal/src/serial.c ****  * @deprecated
 274:ChibiOS/os/hal/src/serial.c ****  *
 275:ChibiOS/os/hal/src/serial.c ****  * @api
 276:ChibiOS/os/hal/src/serial.c ****  */
 277:ChibiOS/os/hal/src/serial.c **** bool sdGetWouldBlock(SerialDriver *sdp) {
 674               		.loc 1 277 0
 675               		.cfi_startproc
 676               	.LVL75:
 677               	/* prologue: function */
 678               	/* frame size = 0 */
 679               	/* stack size = 0 */
 680               	.L__stack_usage = 0
 681               	.LBB95:
 682               	.LBB96:
 683               	.LBB97:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 684               		.loc 3 348 0
 685               	/* #APP */
 686               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 687 0000 F894      		cli
 688               	 ;  0 "" 2
 689               	.LVL76:
 690               	/* #NOAPP */
 691               	.LBE97:
 692               	.LBE96:
 693               	.LBE95:
 694               	.LBB98:
 695               	.LBB99:
 307:./ChibiOS/os/rt/include/chqueues.h **** }
 696               		.loc 5 307 0
 697 0002 FC01      		movw r30,r24
 698 0004 2185      		ldd r18,Z+9
 699 0006 3285      		ldd r19,Z+10
 700               	.LBE99:
 701               	.LBE98:
 702               	.LBB101:
 703               	.LBB102:
 704               	.LBB103:
 705               		.loc 3 371 0
 706               	/* #APP */
 707               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 708 0008 7894      		sei
 709               	 ;  0 "" 2
 710               	/* #NOAPP */
 711               	.LBE103:
 712               	.LBE102:
 713               	.LBE101:
 714               	.LBB104:
 715               	.LBB100:
 307:./ChibiOS/os/rt/include/chqueues.h **** }
 716               		.loc 5 307 0
 717 000a 81E0      		ldi r24,lo8(1)
 718               	.LVL77:
 719 000c 232B      		or r18,r19
 720 000e 01F0      		breq .L28
 721 0010 80E0      		ldi r24,0
 722               	.L28:
 723               	.LBE100:
 724               	.LBE104:
 278:ChibiOS/os/hal/src/serial.c ****   bool b;
 279:ChibiOS/os/hal/src/serial.c **** 
 280:ChibiOS/os/hal/src/serial.c ****   osalSysLock();
 281:ChibiOS/os/hal/src/serial.c ****   b = iqIsEmptyI(&sdp->iqueue);
 282:ChibiOS/os/hal/src/serial.c ****   osalSysUnlock();
 283:ChibiOS/os/hal/src/serial.c **** 
 284:ChibiOS/os/hal/src/serial.c ****   return b;
 285:ChibiOS/os/hal/src/serial.c **** }
 725               		.loc 1 285 0
 726 0012 0895      		ret
 727               		.cfi_endproc
 728               	.LFE151:
 730               		.section	.rodata.vmt,"a",@progbits
 733               	vmt:
 734 0000 0000      		.word	gs(write)
 735 0002 0000      		.word	gs(read)
 736 0004 0000      		.word	gs(put)
 737 0006 0000      		.word	gs(get)
 738 0008 0000      		.word	gs(putt)
 739 000a 0000      		.word	gs(gett)
 740 000c 0000      		.word	gs(writet)
 741 000e 0000      		.word	gs(readt)
 742               		.text
 743               	.Letext0:
 744               		.file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gc
 745               		.file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 746               		.file 8 "./ChibiOS/os/rt/ports/AVR/compilers/GCC/chtypes.h"
 747               		.file 9 "./ChibiOS/os/rt/include/chsystypes.h"
 748               		.file 10 "./ChibiOS/os/rt/include/chschd.h"
 749               		.file 11 "./ChibiOS/os/rt/ports/AVR/chcore.h"
 750               		.file 12 "./ChibiOS/os/rt/include/chsem.h"
 751               		.file 13 "./ChibiOS/os/rt/include/chmtx.h"
 752               		.file 14 "./ChibiOS/os/hal/include/serial.h"
 753               		.file 15 "./ChibiOS/os/hal/ports/AVR/serial_lld.h"
DEFINED SYMBOLS
                            *ABS*:00000000 serial.c
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:2      *ABS*:0000003e __SP_H__
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:3      *ABS*:0000003d __SP_L__
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:4      *ABS*:0000003f __SREG__
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:12     .text.readt:00000000 readt
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:32     .text.read:00000000 read
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:53     .text.writet:00000000 writet
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:72     .text.write:00000000 write
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:93     .text.gett:00000000 gett
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:112    .text.get:00000000 get
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:133    .text.putt:00000000 putt
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:152    .text.put:00000000 put
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:174    .text.sdInit:00000000 sdInit
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:191    .text.sdObjectInit:00000000 sdObjectInit
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:733    .rodata.vmt:00000000 vmt
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:290    .text.sdStart:00000000 sdStart
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:351    .text.sdStop:00000000 sdStop
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:429    .text.sdIncomingDataI:00000000 sdIncomingDataI
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:536    .text.sdRequestDataI:00000000 sdRequestDataI
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:611    .text.sdPutWouldBlock:00000000 sdPutWouldBlock
C:\Users\Noah\AppData\Local\Temp\cca8zcc8.s:672    .text.sdGetWouldBlock:00000000 sdGetWouldBlock

UNDEFINED SYMBOLS
chIQReadTimeout
chOQWriteTimeout
chIQGetTimeout
chOQPutTimeout
sd_lld_init
chIQObjectInit
chOQObjectInit
sd_lld_start
sd_lld_stop
chOQResetI
chIQResetI
chSchRescheduleS
chIQPutI
chEvtBroadcastFlagsI
chOQGetI
__do_copy_data
