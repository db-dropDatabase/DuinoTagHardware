   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB136:
  15               		.file 1 "ChibiOS/os/hal/src/hal_buffers.c"
   1:ChibiOS/os/hal/src/hal_buffers.c **** /*
   2:ChibiOS/os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:ChibiOS/os/hal/src/hal_buffers.c **** 
   4:ChibiOS/os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:ChibiOS/os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:ChibiOS/os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:ChibiOS/os/hal/src/hal_buffers.c **** 
   8:ChibiOS/os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:ChibiOS/os/hal/src/hal_buffers.c **** 
  10:ChibiOS/os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:ChibiOS/os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:ChibiOS/os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:ChibiOS/os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:ChibiOS/os/hal/src/hal_buffers.c ****     limitations under the License.
  15:ChibiOS/os/hal/src/hal_buffers.c **** */
  16:ChibiOS/os/hal/src/hal_buffers.c **** 
  17:ChibiOS/os/hal/src/hal_buffers.c **** /**
  18:ChibiOS/os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:ChibiOS/os/hal/src/hal_buffers.c ****  *
  21:ChibiOS/os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:ChibiOS/os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:ChibiOS/os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:ChibiOS/os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:ChibiOS/os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:ChibiOS/os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:ChibiOS/os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:ChibiOS/os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:ChibiOS/os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:ChibiOS/os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:ChibiOS/os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  32:ChibiOS/os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:ChibiOS/os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:ChibiOS/os/hal/src/hal_buffers.c ****  *            together.
  35:ChibiOS/os/hal/src/hal_buffers.c ****  *          .
  36:ChibiOS/os/hal/src/hal_buffers.c ****  * @{
  37:ChibiOS/os/hal/src/hal_buffers.c ****  */
  38:ChibiOS/os/hal/src/hal_buffers.c **** 
  39:ChibiOS/os/hal/src/hal_buffers.c **** #include <string.h>
  40:ChibiOS/os/hal/src/hal_buffers.c **** 
  41:ChibiOS/os/hal/src/hal_buffers.c **** #include "hal.h"
  42:ChibiOS/os/hal/src/hal_buffers.c **** 
  43:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:ChibiOS/os/hal/src/hal_buffers.c **** 
  47:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:ChibiOS/os/hal/src/hal_buffers.c **** 
  51:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:ChibiOS/os/hal/src/hal_buffers.c **** 
  55:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:ChibiOS/os/hal/src/hal_buffers.c **** 
  59:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:ChibiOS/os/hal/src/hal_buffers.c **** 
  63:ChibiOS/os/hal/src/hal_buffers.c **** /**
  64:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:ChibiOS/os/hal/src/hal_buffers.c ****  *
  66:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  68:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  69:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  70:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  71:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  72:ChibiOS/os/hal/src/hal_buffers.c ****  *
  73:ChibiOS/os/hal/src/hal_buffers.c ****  * @init
  74:ChibiOS/os/hal/src/hal_buffers.c ****  */
  75:ChibiOS/os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
  76:ChibiOS/os/hal/src/hal_buffers.c ****                    size_t size, size_t n,
  77:ChibiOS/os/hal/src/hal_buffers.c ****                    bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 EF92      		push r14
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 14, -2
  23 0002 FF92      		push r15
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 15, -3
  27 0004 0F93      		push r16
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 16, -4
  31 0006 1F93      		push r17
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 17, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 FC01      		movw r30,r24
  40               	.LVL1:
  41               	.LBB188:
  42               	.LBB189:
  43               	.LBB190:
  44               	.LBB191:
  45               		.file 2 "./ChibiOS/os/rt/include/chschd.h"
   1:./ChibiOS/os/rt/include/chschd.h **** /*
   2:./ChibiOS/os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3:./ChibiOS/os/rt/include/chschd.h **** 
   4:./ChibiOS/os/rt/include/chschd.h ****     This file is part of ChibiOS.
   5:./ChibiOS/os/rt/include/chschd.h **** 
   6:./ChibiOS/os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./ChibiOS/os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   8:./ChibiOS/os/rt/include/chschd.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./ChibiOS/os/rt/include/chschd.h ****     (at your option) any later version.
  10:./ChibiOS/os/rt/include/chschd.h **** 
  11:./ChibiOS/os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./ChibiOS/os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./ChibiOS/os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./ChibiOS/os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:./ChibiOS/os/rt/include/chschd.h **** 
  16:./ChibiOS/os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:./ChibiOS/os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./ChibiOS/os/rt/include/chschd.h **** */
  19:./ChibiOS/os/rt/include/chschd.h **** 
  20:./ChibiOS/os/rt/include/chschd.h **** /**
  21:./ChibiOS/os/rt/include/chschd.h ****  * @file    chschd.h
  22:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:./ChibiOS/os/rt/include/chschd.h ****  *
  24:./ChibiOS/os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:./ChibiOS/os/rt/include/chschd.h ****  * @{
  26:./ChibiOS/os/rt/include/chschd.h ****  */
  27:./ChibiOS/os/rt/include/chschd.h **** 
  28:./ChibiOS/os/rt/include/chschd.h **** #ifndef _CHSCHD_H_
  29:./ChibiOS/os/rt/include/chschd.h **** #define _CHSCHD_H_
  30:./ChibiOS/os/rt/include/chschd.h **** 
  31:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
  32:./ChibiOS/os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
  34:./ChibiOS/os/rt/include/chschd.h **** 
  35:./ChibiOS/os/rt/include/chschd.h **** /**
  36:./ChibiOS/os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:./ChibiOS/os/rt/include/chschd.h ****  * @{
  38:./ChibiOS/os/rt/include/chschd.h ****  */
  39:./ChibiOS/os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:./ChibiOS/os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:./ChibiOS/os/rt/include/chschd.h ****                                              condition.                     */
  42:./ChibiOS/os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:./ChibiOS/os/rt/include/chschd.h ****                                              condition.                     */
  44:./ChibiOS/os/rt/include/chschd.h **** /** @} */
  45:./ChibiOS/os/rt/include/chschd.h **** 
  46:./ChibiOS/os/rt/include/chschd.h **** /**
  47:./ChibiOS/os/rt/include/chschd.h ****  * @name    Priority constants
  48:./ChibiOS/os/rt/include/chschd.h ****  * @{
  49:./ChibiOS/os/rt/include/chschd.h ****  */
  50:./ChibiOS/os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:./ChibiOS/os/rt/include/chschd.h ****                                                  priority.                  */
  52:./ChibiOS/os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:./ChibiOS/os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:./ChibiOS/os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)64     /**< @brief Normal priority.    */
  55:./ChibiOS/os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)127    /**< @brief Highest priority.   */
  56:./ChibiOS/os/rt/include/chschd.h **** #define ABSPRIO             (tprio_t)255    /**< @brief Greatest priority.  */
  57:./ChibiOS/os/rt/include/chschd.h **** /** @} */
  58:./ChibiOS/os/rt/include/chschd.h **** 
  59:./ChibiOS/os/rt/include/chschd.h **** /**
  60:./ChibiOS/os/rt/include/chschd.h ****  * @name    Thread states
  61:./ChibiOS/os/rt/include/chschd.h ****  * @{
  62:./ChibiOS/os/rt/include/chschd.h ****  */
  63:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  64:./ChibiOS/os/rt/include/chschd.h ****                                                   ready list.               */
  65:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  66:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  67:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  68:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On an I/O queue.   */
  69:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  70:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  71:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  72:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  73:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  74:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  75:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  76:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  77:./ChibiOS/os/rt/include/chschd.h ****                                                   in queue.                 */
  78:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  79:./ChibiOS/os/rt/include/chschd.h ****                                                   waiting answer.           */
  80:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  81:./ChibiOS/os/rt/include/chschd.h ****                                                   message.                  */
  82:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  83:./ChibiOS/os/rt/include/chschd.h **** 
  84:./ChibiOS/os/rt/include/chschd.h **** /**
  85:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  86:./ChibiOS/os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  87:./ChibiOS/os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  88:./ChibiOS/os/rt/include/chschd.h ****  */
  89:./ChibiOS/os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  90:./ChibiOS/os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  91:./ChibiOS/os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  92:./ChibiOS/os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  93:./ChibiOS/os/rt/include/chschd.h **** /** @} */
  94:./ChibiOS/os/rt/include/chschd.h **** 
  95:./ChibiOS/os/rt/include/chschd.h **** /**
  96:./ChibiOS/os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  97:./ChibiOS/os/rt/include/chschd.h ****  * @{
  98:./ChibiOS/os/rt/include/chschd.h ****  */
  99:./ChibiOS/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
 100:./ChibiOS/os/rt/include/chschd.h ****                                                  mask.                      */
 101:./ChibiOS/os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 102:./ChibiOS/os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 103:./ChibiOS/os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 104:./ChibiOS/os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 105:./ChibiOS/os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 106:./ChibiOS/os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 107:./ChibiOS/os/rt/include/chschd.h ****                                                  flag.                      */
 108:./ChibiOS/os/rt/include/chschd.h **** /** @} */
 109:./ChibiOS/os/rt/include/chschd.h **** 
 110:./ChibiOS/os/rt/include/chschd.h **** /**
 111:./ChibiOS/os/rt/include/chschd.h ****  * @name    Working Areas and Alignment
 112:./ChibiOS/os/rt/include/chschd.h ****  */
 113:./ChibiOS/os/rt/include/chschd.h **** /**
 114:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Enforces a correct alignment for a stack area size value.
 115:./ChibiOS/os/rt/include/chschd.h ****  *
 116:./ChibiOS/os/rt/include/chschd.h ****  * @param[in] n         the stack size to be aligned to the next stack
 117:./ChibiOS/os/rt/include/chschd.h ****  *                      alignment boundary
 118:./ChibiOS/os/rt/include/chschd.h ****  * @return              The aligned stack size.
 119:./ChibiOS/os/rt/include/chschd.h ****  *
 120:./ChibiOS/os/rt/include/chschd.h ****  * @api
 121:./ChibiOS/os/rt/include/chschd.h ****  */
 122:./ChibiOS/os/rt/include/chschd.h **** #define THD_ALIGN_STACK_SIZE(n)                                             \
 123:./ChibiOS/os/rt/include/chschd.h ****   (((((size_t)(n)) - 1U) | (sizeof(stkalign_t) - 1U)) + 1U)
 124:./ChibiOS/os/rt/include/chschd.h **** 
 125:./ChibiOS/os/rt/include/chschd.h **** /**
 126:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Calculates the total Working Area size.
 127:./ChibiOS/os/rt/include/chschd.h ****  *
 128:./ChibiOS/os/rt/include/chschd.h ****  * @param[in] n         the stack size to be assigned to the thread
 129:./ChibiOS/os/rt/include/chschd.h ****  * @return              The total used memory in bytes.
 130:./ChibiOS/os/rt/include/chschd.h ****  *
 131:./ChibiOS/os/rt/include/chschd.h ****  * @api
 132:./ChibiOS/os/rt/include/chschd.h ****  */
 133:./ChibiOS/os/rt/include/chschd.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 134:./ChibiOS/os/rt/include/chschd.h ****   THD_ALIGN_STACK_SIZE(sizeof(thread_t) + PORT_WA_SIZE(n))
 135:./ChibiOS/os/rt/include/chschd.h **** 
 136:./ChibiOS/os/rt/include/chschd.h **** /**
 137:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Static working area allocation.
 138:./ChibiOS/os/rt/include/chschd.h ****  * @details This macro is used to allocate a static thread working area
 139:./ChibiOS/os/rt/include/chschd.h ****  *          aligned as both position and size.
 140:./ChibiOS/os/rt/include/chschd.h ****  *
 141:./ChibiOS/os/rt/include/chschd.h ****  * @param[in] s         the name to be assigned to the stack array
 142:./ChibiOS/os/rt/include/chschd.h ****  * @param[in] n         the stack size to be assigned to the thread
 143:./ChibiOS/os/rt/include/chschd.h ****  *
 144:./ChibiOS/os/rt/include/chschd.h ****  * @api
 145:./ChibiOS/os/rt/include/chschd.h ****  */
 146:./ChibiOS/os/rt/include/chschd.h **** #define THD_WORKING_AREA(s, n)                                              \
 147:./ChibiOS/os/rt/include/chschd.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof(stkalign_t)]
 148:./ChibiOS/os/rt/include/chschd.h **** /** @} */
 149:./ChibiOS/os/rt/include/chschd.h **** 
 150:./ChibiOS/os/rt/include/chschd.h **** /**
 151:./ChibiOS/os/rt/include/chschd.h ****  * @name    Threads abstraction macros
 152:./ChibiOS/os/rt/include/chschd.h ****  */
 153:./ChibiOS/os/rt/include/chschd.h **** /**
 154:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Thread declaration macro.
 155:./ChibiOS/os/rt/include/chschd.h ****  * @note    Thread declarations should be performed using this macro because
 156:./ChibiOS/os/rt/include/chschd.h ****  *          the port layer could define optimizations for thread functions.
 157:./ChibiOS/os/rt/include/chschd.h ****  */
 158:./ChibiOS/os/rt/include/chschd.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 159:./ChibiOS/os/rt/include/chschd.h **** /** @} */
 160:./ChibiOS/os/rt/include/chschd.h **** 
 161:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 162:./ChibiOS/os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 163:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 164:./ChibiOS/os/rt/include/chschd.h **** 
 165:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 166:./ChibiOS/os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 167:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 168:./ChibiOS/os/rt/include/chschd.h **** 
 169:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 170:./ChibiOS/os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 171:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 172:./ChibiOS/os/rt/include/chschd.h **** 
 173:./ChibiOS/os/rt/include/chschd.h **** /**
 174:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Generic threads single link list, it works like a stack.
 175:./ChibiOS/os/rt/include/chschd.h ****  */
 176:./ChibiOS/os/rt/include/chschd.h **** struct ch_threads_list {
 177:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *p_next;    /**< @brief Next in the list/queue.     */
 178:./ChibiOS/os/rt/include/chschd.h **** };
 179:./ChibiOS/os/rt/include/chschd.h **** 
 180:./ChibiOS/os/rt/include/chschd.h **** /**
 181:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Generic threads bidirectional linked list header and element.
 182:./ChibiOS/os/rt/include/chschd.h ****  */
 183:./ChibiOS/os/rt/include/chschd.h **** struct ch_threads_queue {
 184:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *p_next;    /**< @brief Next in the list/queue.     */
 185:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *p_prev;    /**< @brief Previous in the queue.      */
 186:./ChibiOS/os/rt/include/chschd.h **** };
 187:./ChibiOS/os/rt/include/chschd.h **** 
 188:./ChibiOS/os/rt/include/chschd.h **** /**
 189:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Structure representing a thread.
 190:./ChibiOS/os/rt/include/chschd.h ****  * @note    Not all the listed fields are always needed, by switching off some
 191:./ChibiOS/os/rt/include/chschd.h ****  *          not needed ChibiOS/RT subsystems it is possible to save RAM space
 192:./ChibiOS/os/rt/include/chschd.h ****  *          by shrinking this structure.
 193:./ChibiOS/os/rt/include/chschd.h ****  */
 194:./ChibiOS/os/rt/include/chschd.h **** struct ch_thread {
 195:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *p_next;    /**< @brief Next in the list/queue.     */
 196:./ChibiOS/os/rt/include/chschd.h ****   /* End of the fields shared with the threads_list_t structure.*/
 197:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *p_prev;    /**< @brief Previous in the queue.      */
 198:./ChibiOS/os/rt/include/chschd.h ****   /* End of the fields shared with the threads_queue_t structure.*/
 199:./ChibiOS/os/rt/include/chschd.h ****   tprio_t               p_prio;     /**< @brief Thread priority.            */
 200:./ChibiOS/os/rt/include/chschd.h ****   struct context        p_ctx;      /**< @brief Processor context.          */
 201:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 202:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *p_newer;   /**< @brief Newer registry element.     */
 203:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *p_older;   /**< @brief Older registry element.     */
 204:./ChibiOS/os/rt/include/chschd.h **** #endif
 205:./ChibiOS/os/rt/include/chschd.h ****   /* End of the fields shared with the ReadyList structure. */
 206:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 207:./ChibiOS/os/rt/include/chschd.h ****   /**
 208:./ChibiOS/os/rt/include/chschd.h ****    * @brief Thread name or @p NULL.
 209:./ChibiOS/os/rt/include/chschd.h ****    */
 210:./ChibiOS/os/rt/include/chschd.h ****   const char            *p_name;
 211:./ChibiOS/os/rt/include/chschd.h **** #endif
 212:./ChibiOS/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || defined(__DOXYGEN__)
 213:./ChibiOS/os/rt/include/chschd.h ****   /**
 214:./ChibiOS/os/rt/include/chschd.h ****    * @brief Thread stack boundary.
 215:./ChibiOS/os/rt/include/chschd.h ****    */
 216:./ChibiOS/os/rt/include/chschd.h ****   stkalign_t            *p_stklimit;
 217:./ChibiOS/os/rt/include/chschd.h **** #endif
 218:./ChibiOS/os/rt/include/chschd.h ****   /**
 219:./ChibiOS/os/rt/include/chschd.h ****    * @brief Current thread state.
 220:./ChibiOS/os/rt/include/chschd.h ****    */
 221:./ChibiOS/os/rt/include/chschd.h ****   tstate_t              p_state;
 222:./ChibiOS/os/rt/include/chschd.h ****   /**
 223:./ChibiOS/os/rt/include/chschd.h ****    * @brief Various thread flags.
 224:./ChibiOS/os/rt/include/chschd.h ****    */
 225:./ChibiOS/os/rt/include/chschd.h ****   tmode_t               p_flags;
 226:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_DYNAMIC == TRUE) || defined(__DOXYGEN__)
 227:./ChibiOS/os/rt/include/chschd.h ****   /**
 228:./ChibiOS/os/rt/include/chschd.h ****    * @brief References to this thread.
 229:./ChibiOS/os/rt/include/chschd.h ****    */
 230:./ChibiOS/os/rt/include/chschd.h ****   trefs_t               p_refs;
 231:./ChibiOS/os/rt/include/chschd.h **** #endif
 232:./ChibiOS/os/rt/include/chschd.h ****   /**
 233:./ChibiOS/os/rt/include/chschd.h ****    * @brief Number of ticks remaining to this thread.
 234:./ChibiOS/os/rt/include/chschd.h ****    */
 235:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_TIME_QUANTUM > 0) || defined(__DOXYGEN__)
 236:./ChibiOS/os/rt/include/chschd.h ****   tslices_t             p_preempt;
 237:./ChibiOS/os/rt/include/chschd.h **** #endif
 238:./ChibiOS/os/rt/include/chschd.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 239:./ChibiOS/os/rt/include/chschd.h ****   /**
 240:./ChibiOS/os/rt/include/chschd.h ****    * @brief Thread consumed time in ticks.
 241:./ChibiOS/os/rt/include/chschd.h ****    * @note  This field can overflow.
 242:./ChibiOS/os/rt/include/chschd.h ****    */
 243:./ChibiOS/os/rt/include/chschd.h ****   volatile systime_t    p_time;
 244:./ChibiOS/os/rt/include/chschd.h **** #endif
 245:./ChibiOS/os/rt/include/chschd.h ****   /**
 246:./ChibiOS/os/rt/include/chschd.h ****    * @brief State-specific fields.
 247:./ChibiOS/os/rt/include/chschd.h ****    * @note  All the fields declared in this union are only valid in the
 248:./ChibiOS/os/rt/include/chschd.h ****    *        specified state or condition and are thus volatile.
 249:./ChibiOS/os/rt/include/chschd.h ****    */
 250:./ChibiOS/os/rt/include/chschd.h ****   union {
 251:./ChibiOS/os/rt/include/chschd.h ****     /**
 252:./ChibiOS/os/rt/include/chschd.h ****      * @brief Thread wakeup code.
 253:./ChibiOS/os/rt/include/chschd.h ****      * @note  This field contains the low level message sent to the thread
 254:./ChibiOS/os/rt/include/chschd.h ****      *        by the waking thread or interrupt handler. The value is valid
 255:./ChibiOS/os/rt/include/chschd.h ****      *        after exiting the @p chSchWakeupS() function.
 256:./ChibiOS/os/rt/include/chschd.h ****      */
 257:./ChibiOS/os/rt/include/chschd.h ****     msg_t               rdymsg;
 258:./ChibiOS/os/rt/include/chschd.h ****     /**
 259:./ChibiOS/os/rt/include/chschd.h ****      * @brief Thread exit code.
 260:./ChibiOS/os/rt/include/chschd.h ****      * @note  The thread termination code is stored in this field in order
 261:./ChibiOS/os/rt/include/chschd.h ****      *        to be retrieved by the thread performing a @p chThdWait() on
 262:./ChibiOS/os/rt/include/chschd.h ****      *        this thread.
 263:./ChibiOS/os/rt/include/chschd.h ****      */
 264:./ChibiOS/os/rt/include/chschd.h ****     msg_t               exitcode;
 265:./ChibiOS/os/rt/include/chschd.h ****     /**
 266:./ChibiOS/os/rt/include/chschd.h ****      * @brief Pointer to a generic "wait" object.
 267:./ChibiOS/os/rt/include/chschd.h ****      * @note  This field is used to get a generic pointer to a synchronization
 268:./ChibiOS/os/rt/include/chschd.h ****      *        object and is valid when the thread is in one of the wait
 269:./ChibiOS/os/rt/include/chschd.h ****      *        states.
 270:./ChibiOS/os/rt/include/chschd.h ****      */
 271:./ChibiOS/os/rt/include/chschd.h ****     void                *wtobjp;
 272:./ChibiOS/os/rt/include/chschd.h ****     /**
 273:./ChibiOS/os/rt/include/chschd.h ****      * @brief Pointer to a generic thread reference object.
 274:./ChibiOS/os/rt/include/chschd.h ****      * @note  This field is used to get a pointer to a synchronization
 275:./ChibiOS/os/rt/include/chschd.h ****      *        object and is valid when the thread is in @p CH_STATE_SUSPENDED
 276:./ChibiOS/os/rt/include/chschd.h ****      *        state.
 277:./ChibiOS/os/rt/include/chschd.h ****      */
 278:./ChibiOS/os/rt/include/chschd.h ****     thread_reference_t  *wttrp;
 279:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
 280:./ChibiOS/os/rt/include/chschd.h ****     /**
 281:./ChibiOS/os/rt/include/chschd.h ****      * @brief Pointer to a generic semaphore object.
 282:./ChibiOS/os/rt/include/chschd.h ****      * @note  This field is used to get a pointer to a synchronization
 283:./ChibiOS/os/rt/include/chschd.h ****      *        object and is valid when the thread is in @p CH_STATE_WTSEM
 284:./ChibiOS/os/rt/include/chschd.h ****      *        state.
 285:./ChibiOS/os/rt/include/chschd.h ****      */
 286:./ChibiOS/os/rt/include/chschd.h ****     struct ch_semaphore *wtsemp;
 287:./ChibiOS/os/rt/include/chschd.h **** #endif
 288:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 289:./ChibiOS/os/rt/include/chschd.h ****     /**
 290:./ChibiOS/os/rt/include/chschd.h ****      * @brief Pointer to a generic mutex object.
 291:./ChibiOS/os/rt/include/chschd.h ****      * @note  This field is used to get a pointer to a synchronization
 292:./ChibiOS/os/rt/include/chschd.h ****      *        object and is valid when the thread is in @p CH_STATE_WTMTX
 293:./ChibiOS/os/rt/include/chschd.h ****      *        state.
 294:./ChibiOS/os/rt/include/chschd.h ****      */
 295:./ChibiOS/os/rt/include/chschd.h ****     struct ch_mutex     *wtmtxp;
 296:./ChibiOS/os/rt/include/chschd.h **** #endif
 297:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 298:./ChibiOS/os/rt/include/chschd.h ****     /**
 299:./ChibiOS/os/rt/include/chschd.h ****      * @brief Enabled events mask.
 300:./ChibiOS/os/rt/include/chschd.h ****      * @note  This field is only valid while the thread is in the
 301:./ChibiOS/os/rt/include/chschd.h ****      *        @p CH_STATE_WTOREVT or @p CH_STATE_WTANDEVT states.
 302:./ChibiOS/os/rt/include/chschd.h ****      */
 303:./ChibiOS/os/rt/include/chschd.h ****     eventmask_t         ewmask;
 304:./ChibiOS/os/rt/include/chschd.h **** #endif
 305:./ChibiOS/os/rt/include/chschd.h ****   }                     p_u;
 306:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 307:./ChibiOS/os/rt/include/chschd.h ****   /**
 308:./ChibiOS/os/rt/include/chschd.h ****    * @brief Termination waiting list.
 309:./ChibiOS/os/rt/include/chschd.h ****    */
 310:./ChibiOS/os/rt/include/chschd.h ****   threads_list_t        p_waiting;
 311:./ChibiOS/os/rt/include/chschd.h **** #endif
 312:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
 313:./ChibiOS/os/rt/include/chschd.h ****   /**
 314:./ChibiOS/os/rt/include/chschd.h ****    * @brief Messages queue.
 315:./ChibiOS/os/rt/include/chschd.h ****    */
 316:./ChibiOS/os/rt/include/chschd.h ****   threads_queue_t       p_msgqueue;
 317:./ChibiOS/os/rt/include/chschd.h ****   /**
 318:./ChibiOS/os/rt/include/chschd.h ****    * @brief Thread message.
 319:./ChibiOS/os/rt/include/chschd.h ****    */
 320:./ChibiOS/os/rt/include/chschd.h ****   msg_t                 p_msg;
 321:./ChibiOS/os/rt/include/chschd.h **** #endif
 322:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
 323:./ChibiOS/os/rt/include/chschd.h ****   /**
 324:./ChibiOS/os/rt/include/chschd.h ****    * @brief Pending events mask.
 325:./ChibiOS/os/rt/include/chschd.h ****    */
 326:./ChibiOS/os/rt/include/chschd.h ****   eventmask_t           p_epending;
 327:./ChibiOS/os/rt/include/chschd.h **** #endif
 328:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
 329:./ChibiOS/os/rt/include/chschd.h ****   /**
 330:./ChibiOS/os/rt/include/chschd.h ****    * @brief List of the mutexes owned by this thread.
 331:./ChibiOS/os/rt/include/chschd.h ****    * @note  The list is terminated by a @p NULL in this field.
 332:./ChibiOS/os/rt/include/chschd.h ****    */
 333:./ChibiOS/os/rt/include/chschd.h ****   struct ch_mutex       *p_mtxlist;
 334:./ChibiOS/os/rt/include/chschd.h ****   /**
 335:./ChibiOS/os/rt/include/chschd.h ****    * @brief Thread's own, non-inherited, priority.
 336:./ChibiOS/os/rt/include/chschd.h ****    */
 337:./ChibiOS/os/rt/include/chschd.h ****   tprio_t               p_realprio;
 338:./ChibiOS/os/rt/include/chschd.h **** #endif
 339:./ChibiOS/os/rt/include/chschd.h **** #if ((CH_CFG_USE_DYNAMIC == TRUE) && (CH_CFG_USE_MEMPOOLS == TRUE)) ||      \
 340:./ChibiOS/os/rt/include/chschd.h ****     defined(__DOXYGEN__)
 341:./ChibiOS/os/rt/include/chschd.h ****   /**
 342:./ChibiOS/os/rt/include/chschd.h ****    * @brief Memory Pool where the thread workspace is returned.
 343:./ChibiOS/os/rt/include/chschd.h ****    */
 344:./ChibiOS/os/rt/include/chschd.h ****   void                  *p_mpool;
 345:./ChibiOS/os/rt/include/chschd.h **** #endif
 346:./ChibiOS/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 347:./ChibiOS/os/rt/include/chschd.h ****   /**
 348:./ChibiOS/os/rt/include/chschd.h ****    * @brief Thread statistics.
 349:./ChibiOS/os/rt/include/chschd.h ****    */
 350:./ChibiOS/os/rt/include/chschd.h ****   time_measurement_t    p_stats;
 351:./ChibiOS/os/rt/include/chschd.h **** #endif
 352:./ChibiOS/os/rt/include/chschd.h **** #if defined(CH_CFG_THREAD_EXTRA_FIELDS)
 353:./ChibiOS/os/rt/include/chschd.h ****   /* Extra fields defined in chconf.h.*/
 354:./ChibiOS/os/rt/include/chschd.h ****   CH_CFG_THREAD_EXTRA_FIELDS
 355:./ChibiOS/os/rt/include/chschd.h **** #endif
 356:./ChibiOS/os/rt/include/chschd.h **** };
 357:./ChibiOS/os/rt/include/chschd.h **** 
 358:./ChibiOS/os/rt/include/chschd.h **** /**
 359:./ChibiOS/os/rt/include/chschd.h ****  * @extends virtual_timers_list_t
 360:./ChibiOS/os/rt/include/chschd.h ****  *
 361:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Virtual Timer descriptor structure.
 362:./ChibiOS/os/rt/include/chschd.h ****  */
 363:./ChibiOS/os/rt/include/chschd.h **** struct ch_virtual_timer {
 364:./ChibiOS/os/rt/include/chschd.h ****   virtual_timer_t       *vt_next;   /**< @brief Next timer in the list.     */
 365:./ChibiOS/os/rt/include/chschd.h ****   virtual_timer_t       *vt_prev;   /**< @brief Previous timer in the list. */
 366:./ChibiOS/os/rt/include/chschd.h ****   systime_t             vt_delta;   /**< @brief Time delta before timeout.  */
 367:./ChibiOS/os/rt/include/chschd.h ****   vtfunc_t              vt_func;    /**< @brief Timer callback function
 368:./ChibiOS/os/rt/include/chschd.h ****                                                 pointer.                    */
 369:./ChibiOS/os/rt/include/chschd.h ****   void                  *vt_par;    /**< @brief Timer callback function
 370:./ChibiOS/os/rt/include/chschd.h ****                                                 parameter.                  */
 371:./ChibiOS/os/rt/include/chschd.h **** };
 372:./ChibiOS/os/rt/include/chschd.h **** 
 373:./ChibiOS/os/rt/include/chschd.h **** /**
 374:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Virtual timers list header.
 375:./ChibiOS/os/rt/include/chschd.h ****  * @note    The timers list is implemented as a double link bidirectional list
 376:./ChibiOS/os/rt/include/chschd.h ****  *          in order to make the unlink time constant, the reset of a virtual
 377:./ChibiOS/os/rt/include/chschd.h ****  *          timer is often used in the code.
 378:./ChibiOS/os/rt/include/chschd.h ****  */
 379:./ChibiOS/os/rt/include/chschd.h **** struct ch_virtual_timers_list {
 380:./ChibiOS/os/rt/include/chschd.h ****   virtual_timer_t       *vt_next;   /**< @brief Next timer in the delta
 381:./ChibiOS/os/rt/include/chschd.h ****                                                 list.                       */
 382:./ChibiOS/os/rt/include/chschd.h ****   virtual_timer_t       *vt_prev;   /**< @brief Last timer in the delta
 383:./ChibiOS/os/rt/include/chschd.h ****                                                 list.                       */
 384:./ChibiOS/os/rt/include/chschd.h ****   systime_t             vt_delta;   /**< @brief Must be initialized to -1.  */
 385:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 386:./ChibiOS/os/rt/include/chschd.h ****   volatile systime_t    vt_systime; /**< @brief System Time counter.        */
 387:./ChibiOS/os/rt/include/chschd.h **** #endif
 388:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
 389:./ChibiOS/os/rt/include/chschd.h ****   /**
 390:./ChibiOS/os/rt/include/chschd.h ****    * @brief   System time of the last tick event.
 391:./ChibiOS/os/rt/include/chschd.h ****    */
 392:./ChibiOS/os/rt/include/chschd.h ****   systime_t             vt_lasttime;/**< @brief System time of the last
 393:./ChibiOS/os/rt/include/chschd.h ****                                                 tick event.                 */
 394:./ChibiOS/os/rt/include/chschd.h **** #endif
 395:./ChibiOS/os/rt/include/chschd.h **** };
 396:./ChibiOS/os/rt/include/chschd.h **** 
 397:./ChibiOS/os/rt/include/chschd.h **** /**
 398:./ChibiOS/os/rt/include/chschd.h ****  * @extends threads_queue_t
 399:./ChibiOS/os/rt/include/chschd.h ****  */
 400:./ChibiOS/os/rt/include/chschd.h **** struct ch_ready_list {
 401:./ChibiOS/os/rt/include/chschd.h ****   threads_queue_t       r_queue;    /**< @brief Threads queue.              */
 402:./ChibiOS/os/rt/include/chschd.h ****   tprio_t               r_prio;     /**< @brief This field must be
 403:./ChibiOS/os/rt/include/chschd.h ****                                                 initialized to zero.        */
 404:./ChibiOS/os/rt/include/chschd.h ****   struct context        r_ctx;      /**< @brief Not used, present because
 405:./ChibiOS/os/rt/include/chschd.h ****                                                 offsets.                    */
 406:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 407:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *r_newer;   /**< @brief Newer registry element.     */
 408:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *r_older;   /**< @brief Older registry element.     */
 409:./ChibiOS/os/rt/include/chschd.h **** #endif
 410:./ChibiOS/os/rt/include/chschd.h ****   /* End of the fields shared with the thread_t structure.*/
 411:./ChibiOS/os/rt/include/chschd.h ****   thread_t              *r_current; /**< @brief The currently running
 412:./ChibiOS/os/rt/include/chschd.h ****                                                 thread.                     */
 413:./ChibiOS/os/rt/include/chschd.h **** };
 414:./ChibiOS/os/rt/include/chschd.h **** 
 415:./ChibiOS/os/rt/include/chschd.h **** /**
 416:./ChibiOS/os/rt/include/chschd.h ****  * @brief   System debug data structure.
 417:./ChibiOS/os/rt/include/chschd.h ****  */
 418:./ChibiOS/os/rt/include/chschd.h **** struct ch_system_debug {
 419:./ChibiOS/os/rt/include/chschd.h ****   /**
 420:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Pointer to the panic message.
 421:./ChibiOS/os/rt/include/chschd.h ****    * @details This pointer is meant to be accessed through the debugger, it is
 422:./ChibiOS/os/rt/include/chschd.h ****    *          written once and then the system is halted.
 423:./ChibiOS/os/rt/include/chschd.h ****    * @note    Accesses to this pointer must never be optimized out so the
 424:./ChibiOS/os/rt/include/chschd.h ****    *          field itself is declared volatile.
 425:./ChibiOS/os/rt/include/chschd.h ****    */
 426:./ChibiOS/os/rt/include/chschd.h ****   const char            * volatile panic_msg;
 427:./ChibiOS/os/rt/include/chschd.h **** #if (CH_DBG_SYSTEM_STATE_CHECK == TRUE) || defined(__DOXYGEN__)
 428:./ChibiOS/os/rt/include/chschd.h ****   /**
 429:./ChibiOS/os/rt/include/chschd.h ****    * @brief   ISR nesting level.
 430:./ChibiOS/os/rt/include/chschd.h ****    */
 431:./ChibiOS/os/rt/include/chschd.h ****   cnt_t                 isr_cnt;
 432:./ChibiOS/os/rt/include/chschd.h ****   /**
 433:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Lock nesting level.
 434:./ChibiOS/os/rt/include/chschd.h ****    */
 435:./ChibiOS/os/rt/include/chschd.h ****   cnt_t                 lock_cnt;
 436:./ChibiOS/os/rt/include/chschd.h **** #endif
 437:./ChibiOS/os/rt/include/chschd.h **** #if (CH_DBG_ENABLE_TRACE == TRUE) || defined(__DOXYGEN__)
 438:./ChibiOS/os/rt/include/chschd.h ****   /**
 439:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Public trace buffer.
 440:./ChibiOS/os/rt/include/chschd.h ****    */
 441:./ChibiOS/os/rt/include/chschd.h ****   ch_trace_buffer_t     trace_buffer;
 442:./ChibiOS/os/rt/include/chschd.h **** #endif
 443:./ChibiOS/os/rt/include/chschd.h **** };
 444:./ChibiOS/os/rt/include/chschd.h **** 
 445:./ChibiOS/os/rt/include/chschd.h **** /**
 446:./ChibiOS/os/rt/include/chschd.h ****  * @brief   System data structure.
 447:./ChibiOS/os/rt/include/chschd.h ****  * @note    This structure contain all the data areas used by the OS except
 448:./ChibiOS/os/rt/include/chschd.h ****  *          stacks.
 449:./ChibiOS/os/rt/include/chschd.h ****  */
 450:./ChibiOS/os/rt/include/chschd.h **** struct ch_system {
 451:./ChibiOS/os/rt/include/chschd.h ****   /**
 452:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Ready list header.
 453:./ChibiOS/os/rt/include/chschd.h ****    */
 454:./ChibiOS/os/rt/include/chschd.h ****   ready_list_t          rlist;
 455:./ChibiOS/os/rt/include/chschd.h ****   /**
 456:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Virtual timers delta list header.
 457:./ChibiOS/os/rt/include/chschd.h ****    */
 458:./ChibiOS/os/rt/include/chschd.h ****   virtual_timers_list_t vtlist;
 459:./ChibiOS/os/rt/include/chschd.h ****   /**
 460:./ChibiOS/os/rt/include/chschd.h ****    * @brief   System debug.
 461:./ChibiOS/os/rt/include/chschd.h ****    */
 462:./ChibiOS/os/rt/include/chschd.h ****   system_debug_t        dbg;
 463:./ChibiOS/os/rt/include/chschd.h ****   /**
 464:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Main thread descriptor.
 465:./ChibiOS/os/rt/include/chschd.h ****    */
 466:./ChibiOS/os/rt/include/chschd.h ****   thread_t              mainthread;
 467:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_USE_TM == TRUE) || defined(__DOXYGEN__)
 468:./ChibiOS/os/rt/include/chschd.h ****   /**
 469:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Time measurement calibration data.
 470:./ChibiOS/os/rt/include/chschd.h ****    */
 471:./ChibiOS/os/rt/include/chschd.h ****   tm_calibration_t      tm;
 472:./ChibiOS/os/rt/include/chschd.h **** #endif
 473:./ChibiOS/os/rt/include/chschd.h **** #if (CH_DBG_STATISTICS == TRUE) || defined(__DOXYGEN__)
 474:./ChibiOS/os/rt/include/chschd.h ****   /**
 475:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Global kernel statistics.
 476:./ChibiOS/os/rt/include/chschd.h ****    */
 477:./ChibiOS/os/rt/include/chschd.h ****   kernel_stats_t        kernel_stats;
 478:./ChibiOS/os/rt/include/chschd.h **** #endif
 479:./ChibiOS/os/rt/include/chschd.h **** #if (CH_CFG_NO_IDLE_THREAD == FALSE) || defined(__DOXYGEN__)
 480:./ChibiOS/os/rt/include/chschd.h ****   /**
 481:./ChibiOS/os/rt/include/chschd.h ****    * @brief   Idle thread working area.
 482:./ChibiOS/os/rt/include/chschd.h ****    */
 483:./ChibiOS/os/rt/include/chschd.h ****   THD_WORKING_AREA(idle_thread_wa, PORT_IDLE_THREAD_STACK_SIZE);
 484:./ChibiOS/os/rt/include/chschd.h **** #endif
 485:./ChibiOS/os/rt/include/chschd.h **** };
 486:./ChibiOS/os/rt/include/chschd.h **** 
 487:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 488:./ChibiOS/os/rt/include/chschd.h **** /* Module macros.                                                            */
 489:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 490:./ChibiOS/os/rt/include/chschd.h **** 
 491:./ChibiOS/os/rt/include/chschd.h **** /**
 492:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 493:./ChibiOS/os/rt/include/chschd.h ****  *
 494:./ChibiOS/os/rt/include/chschd.h ****  * @notapi
 495:./ChibiOS/os/rt/include/chschd.h ****  */
 496:./ChibiOS/os/rt/include/chschd.h **** #define firstprio(rlp)  ((rlp)->p_next->p_prio)
 497:./ChibiOS/os/rt/include/chschd.h **** 
 498:./ChibiOS/os/rt/include/chschd.h **** /**
 499:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Current thread pointer access macro.
 500:./ChibiOS/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 501:./ChibiOS/os/rt/include/chschd.h ****  *          only from within the kernel, use the @p chThdSelf() API instead.
 502:./ChibiOS/os/rt/include/chschd.h ****  * @note    It is forbidden to use this macro in order to change the pointer
 503:./ChibiOS/os/rt/include/chschd.h ****  *          (currp = something), use @p setcurrp() instead.
 504:./ChibiOS/os/rt/include/chschd.h ****  */
 505:./ChibiOS/os/rt/include/chschd.h **** #define currp ch.rlist.r_current
 506:./ChibiOS/os/rt/include/chschd.h **** 
 507:./ChibiOS/os/rt/include/chschd.h **** /**
 508:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Current thread pointer change macro.
 509:./ChibiOS/os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 510:./ChibiOS/os/rt/include/chschd.h ****  *          only from within the kernel.
 511:./ChibiOS/os/rt/include/chschd.h ****  *
 512:./ChibiOS/os/rt/include/chschd.h ****  * @notapi
 513:./ChibiOS/os/rt/include/chschd.h ****  */
 514:./ChibiOS/os/rt/include/chschd.h **** #define setcurrp(tp) (currp = (tp))
 515:./ChibiOS/os/rt/include/chschd.h **** 
 516:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 517:./ChibiOS/os/rt/include/chschd.h **** /* External declarations.                                                    */
 518:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 519:./ChibiOS/os/rt/include/chschd.h **** 
 520:./ChibiOS/os/rt/include/chschd.h **** #if !defined(__DOXYGEN__)
 521:./ChibiOS/os/rt/include/chschd.h **** extern ch_system_t ch;
 522:./ChibiOS/os/rt/include/chschd.h **** #endif
 523:./ChibiOS/os/rt/include/chschd.h **** 
 524:./ChibiOS/os/rt/include/chschd.h **** /*
 525:./ChibiOS/os/rt/include/chschd.h ****  * Scheduler APIs.
 526:./ChibiOS/os/rt/include/chschd.h ****  */
 527:./ChibiOS/os/rt/include/chschd.h **** #ifdef __cplusplus
 528:./ChibiOS/os/rt/include/chschd.h **** extern "C" {
 529:./ChibiOS/os/rt/include/chschd.h **** #endif
 530:./ChibiOS/os/rt/include/chschd.h ****   void _scheduler_init(void);
 531:./ChibiOS/os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 532:./ChibiOS/os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 533:./ChibiOS/os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time);
 534:./ChibiOS/os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 535:./ChibiOS/os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 536:./ChibiOS/os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 537:./ChibiOS/os/rt/include/chschd.h ****   void chSchDoRescheduleBehind(void);
 538:./ChibiOS/os/rt/include/chschd.h ****   void chSchDoRescheduleAhead(void);
 539:./ChibiOS/os/rt/include/chschd.h ****   void chSchDoReschedule(void);
 540:./ChibiOS/os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 541:./ChibiOS/os/rt/include/chschd.h ****   void queue_prio_insert(thread_t *tp, threads_queue_t *tqp);
 542:./ChibiOS/os/rt/include/chschd.h ****   void queue_insert(thread_t *tp, threads_queue_t *tqp);
 543:./ChibiOS/os/rt/include/chschd.h ****   thread_t *queue_fifo_remove(threads_queue_t *tqp);
 544:./ChibiOS/os/rt/include/chschd.h ****   thread_t *queue_lifo_remove(threads_queue_t *tqp);
 545:./ChibiOS/os/rt/include/chschd.h ****   thread_t *queue_dequeue(thread_t *tp);
 546:./ChibiOS/os/rt/include/chschd.h ****   void list_insert(thread_t *tp, threads_list_t *tlp);
 547:./ChibiOS/os/rt/include/chschd.h ****   thread_t *list_remove(threads_list_t *tlp);
 548:./ChibiOS/os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 549:./ChibiOS/os/rt/include/chschd.h **** #ifdef __cplusplus
 550:./ChibiOS/os/rt/include/chschd.h **** }
 551:./ChibiOS/os/rt/include/chschd.h **** #endif
 552:./ChibiOS/os/rt/include/chschd.h **** 
 553:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 554:./ChibiOS/os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 555:./ChibiOS/os/rt/include/chschd.h **** /*===========================================================================*/
 556:./ChibiOS/os/rt/include/chschd.h **** 
 557:./ChibiOS/os/rt/include/chschd.h **** /**
 558:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Threads list initialization.
 559:./ChibiOS/os/rt/include/chschd.h ****  *
 560:./ChibiOS/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 561:./ChibiOS/os/rt/include/chschd.h ****  *
 562:./ChibiOS/os/rt/include/chschd.h ****  * @notapi
 563:./ChibiOS/os/rt/include/chschd.h ****  */
 564:./ChibiOS/os/rt/include/chschd.h **** static inline void list_init(threads_list_t *tlp) {
 565:./ChibiOS/os/rt/include/chschd.h **** 
 566:./ChibiOS/os/rt/include/chschd.h ****   tlp->p_next = (thread_t *)tlp;
 567:./ChibiOS/os/rt/include/chschd.h **** }
 568:./ChibiOS/os/rt/include/chschd.h **** 
 569:./ChibiOS/os/rt/include/chschd.h **** /**
 570:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is empty.
 571:./ChibiOS/os/rt/include/chschd.h ****  *
 572:./ChibiOS/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 573:./ChibiOS/os/rt/include/chschd.h ****  * @return              The status of the list.
 574:./ChibiOS/os/rt/include/chschd.h ****  *
 575:./ChibiOS/os/rt/include/chschd.h ****  * @notapi
 576:./ChibiOS/os/rt/include/chschd.h ****  */
 577:./ChibiOS/os/rt/include/chschd.h **** static inline bool list_isempty(threads_list_t *tlp) {
 578:./ChibiOS/os/rt/include/chschd.h **** 
 579:./ChibiOS/os/rt/include/chschd.h ****   return (bool)(tlp->p_next == (thread_t *)tlp);
 580:./ChibiOS/os/rt/include/chschd.h **** }
 581:./ChibiOS/os/rt/include/chschd.h **** 
 582:./ChibiOS/os/rt/include/chschd.h **** /**
 583:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Evaluates to @p true if the specified threads list is not empty.
 584:./ChibiOS/os/rt/include/chschd.h ****  *
 585:./ChibiOS/os/rt/include/chschd.h ****  * @param[in] tlp       pointer to the threads list object
 586:./ChibiOS/os/rt/include/chschd.h ****  * @return              The status of the list.
 587:./ChibiOS/os/rt/include/chschd.h ****  *
 588:./ChibiOS/os/rt/include/chschd.h ****  * @notapi
 589:./ChibiOS/os/rt/include/chschd.h ****  */
 590:./ChibiOS/os/rt/include/chschd.h **** static inline bool list_notempty(threads_list_t *tlp) {
 591:./ChibiOS/os/rt/include/chschd.h **** 
 592:./ChibiOS/os/rt/include/chschd.h ****   return (bool)(tlp->p_next != (thread_t *)tlp);
 593:./ChibiOS/os/rt/include/chschd.h **** }
 594:./ChibiOS/os/rt/include/chschd.h **** 
 595:./ChibiOS/os/rt/include/chschd.h **** /**
 596:./ChibiOS/os/rt/include/chschd.h ****  * @brief   Threads queue initialization.
 597:./ChibiOS/os/rt/include/chschd.h ****  *
 598:./ChibiOS/os/rt/include/chschd.h ****  * @param[in] tqp       pointer to the threads queue object
 599:./ChibiOS/os/rt/include/chschd.h ****  *
 600:./ChibiOS/os/rt/include/chschd.h ****  * @notapi
 601:./ChibiOS/os/rt/include/chschd.h ****  */
 602:./ChibiOS/os/rt/include/chschd.h **** static inline void queue_init(threads_queue_t *tqp) {
 603:./ChibiOS/os/rt/include/chschd.h **** 
 604:./ChibiOS/os/rt/include/chschd.h ****   tqp->p_next = (thread_t *)tqp;
  46               		.loc 2 604 0
  47 000a 9183      		std Z+1,r25
  48 000c 8083      		st Z,r24
 605:./ChibiOS/os/rt/include/chschd.h ****   tqp->p_prev = (thread_t *)tqp;
  49               		.loc 2 605 0
  50 000e 9383      		std Z+3,r25
  51 0010 8283      		std Z+2,r24
  52               	.LBE191:
  53               	.LBE190:
  54               	.LBE189:
  55               	.LBE188:
  78:ChibiOS/os/hal/src/hal_buffers.c **** 
  79:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:ChibiOS/os/hal/src/hal_buffers.c **** 
  81:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bcounter = 0;
  56               		.loc 1 82 0
  57 0012 1582      		std Z+5,__zero_reg__
  58 0014 1482      		std Z+4,__zero_reg__
  83:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->brdptr   = bp;
  59               		.loc 1 83 0
  60 0016 7187      		std Z+9,r23
  61 0018 6087      		std Z+8,r22
  84:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bwrptr   = bp;
  62               		.loc 1 84 0
  63 001a 7783      		std Z+7,r23
  64 001c 6683      		std Z+6,r22
  85:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  65               		.loc 1 85 0
  66 001e 4E5F      		subi r20,-2
  67 0020 5F4F      		sbci r21,-1
  68               	.LVL2:
  69 0022 429F      		mul r20,r18
  70 0024 C001      		movw r24,r0
  71 0026 439F      		mul r20,r19
  72 0028 900D      		add r25,r0
  73 002a 529F      		mul r21,r18
  74 002c 900D      		add r25,r0
  75 002e 1124      		clr r1
  76               	.LVL3:
  77 0030 860F      		add r24,r22
  78 0032 971F      		adc r25,r23
  79 0034 9387      		std Z+11,r25
  80 0036 8287      		std Z+10,r24
  86:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bsize    = size + sizeof (size_t);
  81               		.loc 1 86 0
  82 0038 5587      		std Z+13,r21
  83 003a 4487      		std Z+12,r20
  87:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bn       = n;
  84               		.loc 1 87 0
  85 003c 3787      		std Z+15,r19
  86 003e 2687      		std Z+14,r18
  88:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->buffers  = bp;
  87               		.loc 1 88 0
  88 0040 718B      		std Z+17,r23
  89 0042 608B      		std Z+16,r22
  89:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr      = NULL;
  90               		.loc 1 89 0
  91 0044 138A      		std Z+19,__zero_reg__
  92 0046 128A      		std Z+18,__zero_reg__
  90:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->top      = NULL;
  93               		.loc 1 90 0
  94 0048 158A      		std Z+21,__zero_reg__
  95 004a 148A      		std Z+20,__zero_reg__
  91:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->notify   = infy;
  96               		.loc 1 91 0
  97 004c 178B      		std Z+23,r17
  98 004e 068B      		std Z+22,r16
  92:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->link     = link;
  99               		.loc 1 92 0
 100 0050 F18E      		std Z+25,r15
 101 0052 E08E      		std Z+24,r14
 102               	/* epilogue start */
  93:ChibiOS/os/hal/src/hal_buffers.c **** }
 103               		.loc 1 93 0
 104 0054 1F91      		pop r17
 105 0056 0F91      		pop r16
 106               	.LVL4:
 107 0058 FF90      		pop r15
 108 005a EF90      		pop r14
 109               	.LVL5:
 110 005c 0895      		ret
 111               		.cfi_endproc
 112               	.LFE136:
 114               		.section	.text.ibqResetI,"ax",@progbits
 115               	.global	ibqResetI
 117               	ibqResetI:
 118               	.LFB137:
  94:ChibiOS/os/hal/src/hal_buffers.c **** 
  95:ChibiOS/os/hal/src/hal_buffers.c **** /**
  96:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  97:ChibiOS/os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  98:ChibiOS/os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
  99:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 100:ChibiOS/os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 101:ChibiOS/os/hal/src/hal_buffers.c ****  *
 102:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 103:ChibiOS/os/hal/src/hal_buffers.c ****  *
 104:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 105:ChibiOS/os/hal/src/hal_buffers.c ****  */
 106:ChibiOS/os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 119               		.loc 1 106 0
 120               		.cfi_startproc
 121               	.LVL6:
 122               	/* prologue: function */
 123               	/* frame size = 0 */
 124               	/* stack size = 0 */
 125               	.L__stack_usage = 0
 126 0000 FC01      		movw r30,r24
 107:ChibiOS/os/hal/src/hal_buffers.c **** 
 108:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 109:ChibiOS/os/hal/src/hal_buffers.c **** 
 110:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bcounter = 0;
 127               		.loc 1 110 0
 128 0002 1582      		std Z+5,__zero_reg__
 129 0004 1482      		std Z+4,__zero_reg__
 111:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->brdptr   = ibqp->buffers;
 130               		.loc 1 111 0
 131 0006 8089      		ldd r24,Z+16
 132 0008 9189      		ldd r25,Z+17
 133               	.LVL7:
 134 000a 9187      		std Z+9,r25
 135 000c 8087      		std Z+8,r24
 112:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bwrptr   = ibqp->buffers;
 136               		.loc 1 112 0
 137 000e 9783      		std Z+7,r25
 138 0010 8683      		std Z+6,r24
 113:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr      = NULL;
 139               		.loc 1 113 0
 140 0012 138A      		std Z+19,__zero_reg__
 141 0014 128A      		std Z+18,__zero_reg__
 114:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->top      = NULL;
 142               		.loc 1 114 0
 143 0016 158A      		std Z+21,__zero_reg__
 144 0018 148A      		std Z+20,__zero_reg__
 145               	.LVL8:
 146               	.LBB192:
 147               	.LBB193:
 148               		.file 3 "./ChibiOS/os/hal/osal/rt/osal.h"
   1:./ChibiOS/os/hal/osal/rt/osal.h **** /*
   2:./ChibiOS/os/hal/osal/rt/osal.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:./ChibiOS/os/hal/osal/rt/osal.h **** 
   4:./ChibiOS/os/hal/osal/rt/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./ChibiOS/os/hal/osal/rt/osal.h ****     you may not use this file except in compliance with the License.
   6:./ChibiOS/os/hal/osal/rt/osal.h ****     You may obtain a copy of the License at
   7:./ChibiOS/os/hal/osal/rt/osal.h **** 
   8:./ChibiOS/os/hal/osal/rt/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./ChibiOS/os/hal/osal/rt/osal.h **** 
  10:./ChibiOS/os/hal/osal/rt/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:./ChibiOS/os/hal/osal/rt/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./ChibiOS/os/hal/osal/rt/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./ChibiOS/os/hal/osal/rt/osal.h ****     See the License for the specific language governing permissions and
  14:./ChibiOS/os/hal/osal/rt/osal.h ****     limitations under the License.
  15:./ChibiOS/os/hal/osal/rt/osal.h **** */
  16:./ChibiOS/os/hal/osal/rt/osal.h **** 
  17:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  18:./ChibiOS/os/hal/osal/rt/osal.h ****  * @file    osal.h
  19:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   OSAL module header.
  20:./ChibiOS/os/hal/osal/rt/osal.h ****  *
  21:./ChibiOS/os/hal/osal/rt/osal.h ****  * @addtogroup OSAL
  22:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  23:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  24:./ChibiOS/os/hal/osal/rt/osal.h **** 
  25:./ChibiOS/os/hal/osal/rt/osal.h **** #ifndef _OSAL_H_
  26:./ChibiOS/os/hal/osal/rt/osal.h **** #define _OSAL_H_
  27:./ChibiOS/os/hal/osal/rt/osal.h **** 
  28:./ChibiOS/os/hal/osal/rt/osal.h **** #include <stddef.h>
  29:./ChibiOS/os/hal/osal/rt/osal.h **** #include <stdint.h>
  30:./ChibiOS/os/hal/osal/rt/osal.h **** #include <stdbool.h>
  31:./ChibiOS/os/hal/osal/rt/osal.h **** 
  32:./ChibiOS/os/hal/osal/rt/osal.h **** #include "ch.h"
  33:./ChibiOS/os/hal/osal/rt/osal.h **** 
  34:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  35:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module constants.                                                         */
  36:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
  37:./ChibiOS/os/hal/osal/rt/osal.h **** 
  38:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  39:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Common constants
  40:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  41:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  42:./ChibiOS/os/hal/osal/rt/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:./ChibiOS/os/hal/osal/rt/osal.h **** #define FALSE                               0
  44:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
  45:./ChibiOS/os/hal/osal/rt/osal.h **** 
  46:./ChibiOS/os/hal/osal/rt/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:./ChibiOS/os/hal/osal/rt/osal.h **** #define TRUE                                (!FALSE)
  48:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
  49:./ChibiOS/os/hal/osal/rt/osal.h **** 
  50:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_SUCCESS                        FALSE
  51:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_FAILED                         TRUE
  52:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
  53:./ChibiOS/os/hal/osal/rt/osal.h **** 
  54:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
  55:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  56:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Messages
  57:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  58:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  59:./ChibiOS/os/hal/osal/rt/osal.h **** #define MSG_OK                              RDY_OK
  60:./ChibiOS/os/hal/osal/rt/osal.h **** #define MSG_RESET                           RDY_RESET
  61:./ChibiOS/os/hal/osal/rt/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  62:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
  63:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
  64:./ChibiOS/os/hal/osal/rt/osal.h **** 
  65:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
  66:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  67:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Special time constants
  68:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  69:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  70:./ChibiOS/os/hal/osal/rt/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  71:./ChibiOS/os/hal/osal/rt/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  72:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
  73:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
  74:./ChibiOS/os/hal/osal/rt/osal.h **** 
  75:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  76:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Systick modes.
  77:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  78:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  79:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
  83:./ChibiOS/os/hal/osal/rt/osal.h **** 
  84:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  85:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Systick parameters.
  86:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
  87:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  88:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  89:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  91:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:./ChibiOS/os/hal/osal/rt/osal.h **** 
  93:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  94:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Required systick frequency or resolution.
  95:./ChibiOS/os/hal/osal/rt/osal.h ****  */
  96:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:./ChibiOS/os/hal/osal/rt/osal.h **** 
  98:./ChibiOS/os/hal/osal/rt/osal.h **** /**
  99:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 101:./ChibiOS/os/hal/osal/rt/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:./ChibiOS/os/hal/osal/rt/osal.h **** #else
 104:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 106:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 107:./ChibiOS/os/hal/osal/rt/osal.h **** 
 108:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 109:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module pre-compile time settings.                                         */
 110:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 111:./ChibiOS/os/hal/osal/rt/osal.h **** 
 112:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 113:./ChibiOS/os/hal/osal/rt/osal.h **** /* Derived constants and error checks.                                       */
 114:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 115:./ChibiOS/os/hal/osal/rt/osal.h **** 
 116:./ChibiOS/os/hal/osal/rt/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:./ChibiOS/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:./ChibiOS/os/hal/osal/rt/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:./ChibiOS/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 121:./ChibiOS/os/hal/osal/rt/osal.h **** 
 122:./ChibiOS/os/hal/osal/rt/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 123:./ChibiOS/os/hal/osal/rt/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 124:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 125:./ChibiOS/os/hal/osal/rt/osal.h **** 
 126:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 127:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module data structures and types.                                         */
 128:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 129:./ChibiOS/os/hal/osal/rt/osal.h **** 
 130:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 131:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 132:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a system status word.
 133:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 134:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t syssts_t;
 135:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 136:./ChibiOS/os/hal/osal/rt/osal.h **** 
 137:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 138:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 139:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a message.
 140:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 141:./ChibiOS/os/hal/osal/rt/osal.h **** typedef int32_t msg_t;
 142:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 143:./ChibiOS/os/hal/osal/rt/osal.h **** 
 144:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 145:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 146:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of system time counter.
 147:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 148:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t systime_t;
 149:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 150:./ChibiOS/os/hal/osal/rt/osal.h **** 
 151:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 152:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 153:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of realtime counter.
 154:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 155:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t rtcnt_t;
 156:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 157:./ChibiOS/os/hal/osal/rt/osal.h **** 
 158:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 159:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 160:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread reference.
 161:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 162:./ChibiOS/os/hal/osal/rt/osal.h **** typedef thread_t * thread_reference_t;
 163:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 164:./ChibiOS/os/hal/osal/rt/osal.h **** 
 165:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 166:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 167:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags mask.
 168:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 169:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t eventflags_t;
 170:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 171:./ChibiOS/os/hal/osal/rt/osal.h **** 
 172:./ChibiOS/os/hal/osal/rt/osal.h **** #if !CH_CFG_USE_EVENTS
 173:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 174:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of an event flags object.
 175:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:./ChibiOS/os/hal/osal/rt/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:./ChibiOS/os/hal/osal/rt/osal.h ****  *          an entirely different way.
 178:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:./ChibiOS/os/hal/osal/rt/osal.h ****  *          API and are implementation-dependent.
 180:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 181:./ChibiOS/os/hal/osal/rt/osal.h **** typedef struct {
 182:./ChibiOS/os/hal/osal/rt/osal.h ****   volatile eventflags_t flags;      /**< @brief Flags stored into the
 183:./ChibiOS/os/hal/osal/rt/osal.h ****                                                 object.                     */
 184:./ChibiOS/os/hal/osal/rt/osal.h **** } event_source_t;
 185:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 186:./ChibiOS/os/hal/osal/rt/osal.h **** 
 187:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 188:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a mutex.
 189:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 190:./ChibiOS/os/hal/osal/rt/osal.h ****  *          mechanism can be simulated.
 191:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 192:./ChibiOS/os/hal/osal/rt/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 193:./ChibiOS/os/hal/osal/rt/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 194:./ChibiOS/os/hal/osal/rt/osal.h **** typedef semaphore_t mutex_t;
 195:./ChibiOS/os/hal/osal/rt/osal.h **** #else
 196:./ChibiOS/os/hal/osal/rt/osal.h **** typedef uint32_t mutex_t;
 197:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 198:./ChibiOS/os/hal/osal/rt/osal.h **** 
 199:./ChibiOS/os/hal/osal/rt/osal.h **** #if 0
 200:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 201:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Type of a thread queue.
 202:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 203:./ChibiOS/os/hal/osal/rt/osal.h ****  *          can be dequeued one at time or all together.
 204:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    In this implementation it is implemented as a single reference
 205:./ChibiOS/os/hal/osal/rt/osal.h ****  *          because there are no real threads.
 206:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 207:./ChibiOS/os/hal/osal/rt/osal.h **** typedef struct {
 208:./ChibiOS/os/hal/osal/rt/osal.h ****   thread_reference_t    tr;
 209:./ChibiOS/os/hal/osal/rt/osal.h **** } threads_queue_t;
 210:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 211:./ChibiOS/os/hal/osal/rt/osal.h **** 
 212:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 213:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module macros.                                                            */
 214:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 215:./ChibiOS/os/hal/osal/rt/osal.h **** 
 216:./ChibiOS/os/hal/osal/rt/osal.h **** /* Temporary names provided for ChibiOS 2.x compatibility.*/
 217:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalQueueInit osalThreadQueueObjectInit
 218:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalQueueWakeupAllI osalThreadDequeueAllI
 219:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalQueueWakeupOneI osalThreadDequeueNextI
 220:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalQueueGoSleepTimeoutS osalThreadEnqueueTimeoutS
 221:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalEventInit osalEventObjectInit
 222:./ChibiOS/os/hal/osal/rt/osal.h **** 
 223:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 224:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Debug related macros
 225:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 226:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 227:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 228:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Condition assertion.
 229:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 230:./ChibiOS/os/hal/osal/rt/osal.h ****  *          message and halts.
 231:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 232:./ChibiOS/os/hal/osal/rt/osal.h ****  *          switch is enabled.
 233:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The remark string is not currently used except for putting a
 234:./ChibiOS/os/hal/osal/rt/osal.h ****  *          comment in the code about the assertion.
 235:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 236:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 237:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] remark    a remark string
 238:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 239:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 240:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 241:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 242:./ChibiOS/os/hal/osal/rt/osal.h **** 
 243:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 244:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Function parameters check.
 245:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 246:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 247:./ChibiOS/os/hal/osal/rt/osal.h ****  *          is enabled.
 248:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 249:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] c         the condition to be verified to be true
 250:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 251:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 252:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 253:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 254:./ChibiOS/os/hal/osal/rt/osal.h **** 
 255:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 256:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   I-Class state check.
 257:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 258:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 259:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 260:./ChibiOS/os/hal/osal/rt/osal.h **** 
 261:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 262:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   S-Class state check.
 263:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 264:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 265:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 266:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 267:./ChibiOS/os/hal/osal/rt/osal.h **** 
 268:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 269:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    IRQ service routines wrappers
 270:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 271:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 272:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 273:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Priority level verification macro.
 274:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 275:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 276:./ChibiOS/os/hal/osal/rt/osal.h **** 
 277:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 278:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   IRQ prologue code.
 279:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 280:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 281:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 282:./ChibiOS/os/hal/osal/rt/osal.h **** 
 283:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 284:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   IRQ epilogue code.
 285:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 286:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 287:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 288:./ChibiOS/os/hal/osal/rt/osal.h **** 
 289:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 290:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   IRQ handler function declaration.
 291:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 292:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 293:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 294:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 295:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 296:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 297:./ChibiOS/os/hal/osal/rt/osal.h **** 
 298:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 299:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities
 300:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 301:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 302:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 303:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Seconds to system ticks.
 304:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to system ticks number.
 305:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 306:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 307:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 308:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 309:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 310:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 311:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 312:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 313:./ChibiOS/os/hal/osal/rt/osal.h **** 
 314:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 315:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to system ticks.
 316:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to system ticks number.
 317:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 318:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 319:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 320:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 321:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 322:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 323:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 324:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 325:./ChibiOS/os/hal/osal/rt/osal.h **** 
 326:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 327:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to system ticks.
 328:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to system ticks number.
 329:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 330:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 331:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 332:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of ticks.
 333:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 334:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 335:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 336:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 337:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 338:./ChibiOS/os/hal/osal/rt/osal.h **** 
 339:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 340:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Time conversion utilities for the realtime counter
 341:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 342:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 343:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 344:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Seconds to realtime counter.
 345:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 346:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 347:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 348:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 349:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] sec       number of seconds
 350:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 351:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 352:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 353:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 354:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 355:./ChibiOS/os/hal/osal/rt/osal.h **** 
 356:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 357:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Milliseconds to realtime counter.
 358:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 359:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 360:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 361:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 362:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 363:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msec      number of milliseconds
 364:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 365:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 366:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 367:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 368:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 369:./ChibiOS/os/hal/osal/rt/osal.h **** 
 370:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 371:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Microseconds to realtime counter.
 372:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 373:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 374:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 375:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 376:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 377:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] usec      number of microseconds
 378:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The number of cycles.
 379:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 380:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 381:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 382:./ChibiOS/os/hal/osal/rt/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 383:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 384:./ChibiOS/os/hal/osal/rt/osal.h **** 
 385:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 386:./ChibiOS/os/hal/osal/rt/osal.h ****  * @name    Sleep macros using absolute time
 387:./ChibiOS/os/hal/osal/rt/osal.h ****  * @{
 388:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 389:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 390:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 391:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 392:./ChibiOS/os/hal/osal/rt/osal.h ****  *          system tick clock.
 393:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 394:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 395:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 396:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 397:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 398:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 399:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 400:./ChibiOS/os/hal/osal/rt/osal.h **** 
 401:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 402:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 403:./ChibiOS/os/hal/osal/rt/osal.h ****  *          milliseconds.
 404:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 405:./ChibiOS/os/hal/osal/rt/osal.h ****  *          system tick clock.
 406:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 407:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 408:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 409:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 410:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 411:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 412:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 413:./ChibiOS/os/hal/osal/rt/osal.h **** 
 414:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 415:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 416:./ChibiOS/os/hal/osal/rt/osal.h ****  *          microseconds.
 417:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 418:./ChibiOS/os/hal/osal/rt/osal.h ****  *          system tick clock.
 419:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 420:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 421:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 422:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 423:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 424:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 425:./ChibiOS/os/hal/osal/rt/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 426:./ChibiOS/os/hal/osal/rt/osal.h **** /** @} */
 427:./ChibiOS/os/hal/osal/rt/osal.h **** 
 428:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 429:./ChibiOS/os/hal/osal/rt/osal.h **** /* External declarations.                                                    */
 430:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 431:./ChibiOS/os/hal/osal/rt/osal.h **** 
 432:./ChibiOS/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 433:./ChibiOS/os/hal/osal/rt/osal.h **** extern "C" {
 434:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 435:./ChibiOS/os/hal/osal/rt/osal.h **** 
 436:./ChibiOS/os/hal/osal/rt/osal.h **** #ifdef __cplusplus
 437:./ChibiOS/os/hal/osal/rt/osal.h **** }
 438:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 439:./ChibiOS/os/hal/osal/rt/osal.h **** 
 440:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 441:./ChibiOS/os/hal/osal/rt/osal.h **** /* Module inline functions.                                                  */
 442:./ChibiOS/os/hal/osal/rt/osal.h **** /*===========================================================================*/
 443:./ChibiOS/os/hal/osal/rt/osal.h **** 
 444:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 445:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   OSAL module initialization.
 446:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 447:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 448:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 449:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalInit(void) {
 450:./ChibiOS/os/hal/osal/rt/osal.h **** 
 451:./ChibiOS/os/hal/osal/rt/osal.h **** }
 452:./ChibiOS/os/hal/osal/rt/osal.h **** 
 453:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 454:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   System halt with error message.
 455:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 456:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] reason    the halt message pointer
 457:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 458:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 459:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 460:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysHalt(const char *reason) {
 461:./ChibiOS/os/hal/osal/rt/osal.h **** 
 462:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysHalt(reason);
 463:./ChibiOS/os/hal/osal/rt/osal.h **** }
 464:./ChibiOS/os/hal/osal/rt/osal.h **** 
 465:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 466:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Disables interrupts globally.
 467:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 468:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 469:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 470:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysDisable(void) {
 471:./ChibiOS/os/hal/osal/rt/osal.h **** 
 472:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysDisable();
 473:./ChibiOS/os/hal/osal/rt/osal.h **** }
 474:./ChibiOS/os/hal/osal/rt/osal.h **** 
 475:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 476:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Enables interrupts globally.
 477:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 478:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 479:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 480:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysEnable(void) {
 481:./ChibiOS/os/hal/osal/rt/osal.h **** 
 482:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysEnable();
 483:./ChibiOS/os/hal/osal/rt/osal.h **** }
 484:./ChibiOS/os/hal/osal/rt/osal.h **** 
 485:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 486:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from thread context.
 487:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 488:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 489:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 490:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 491:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysLock(void) {
 492:./ChibiOS/os/hal/osal/rt/osal.h **** 
 493:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysLock();
 494:./ChibiOS/os/hal/osal/rt/osal.h **** }
 495:./ChibiOS/os/hal/osal/rt/osal.h **** 
 496:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 497:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from thread context.
 498:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 499:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 500:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 501:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 502:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysUnlock(void) {
 503:./ChibiOS/os/hal/osal/rt/osal.h **** 
 504:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysUnlock();
 505:./ChibiOS/os/hal/osal/rt/osal.h **** }
 506:./ChibiOS/os/hal/osal/rt/osal.h **** 
 507:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 508:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Enters a critical zone from ISR context.
 509:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 510:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 511:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 512:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 513:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysLockFromISR(void) {
 514:./ChibiOS/os/hal/osal/rt/osal.h **** 
 515:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysLockFromISR();
 516:./ChibiOS/os/hal/osal/rt/osal.h **** }
 517:./ChibiOS/os/hal/osal/rt/osal.h **** 
 518:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 519:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 520:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 521:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 522:./ChibiOS/os/hal/osal/rt/osal.h ****  * @special
 523:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 524:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysUnlockFromISR(void) {
 525:./ChibiOS/os/hal/osal/rt/osal.h **** 
 526:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysUnlockFromISR();
 527:./ChibiOS/os/hal/osal/rt/osal.h **** }
 528:./ChibiOS/os/hal/osal/rt/osal.h **** 
 529:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 530:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 531:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details This functions enters into a critical zone and can be called
 532:./ChibiOS/os/hal/osal/rt/osal.h ****  *          from any context. Because its flexibility it is less efficient
 533:./ChibiOS/os/hal/osal/rt/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 534:./ChibiOS/os/hal/osal/rt/osal.h ****  *          is known.
 535:./ChibiOS/os/hal/osal/rt/osal.h ****  * @post    The system is in a critical zone.
 536:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 537:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The previous system status, the encoding of this
 538:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      status word is architecture-dependent and opaque.
 539:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 540:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 541:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 542:./ChibiOS/os/hal/osal/rt/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 543:./ChibiOS/os/hal/osal/rt/osal.h **** 
 544:./ChibiOS/os/hal/osal/rt/osal.h ****   return chSysGetStatusAndLockX();
 545:./ChibiOS/os/hal/osal/rt/osal.h **** }
 546:./ChibiOS/os/hal/osal/rt/osal.h **** 
 547:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 548:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 549:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 550:./ChibiOS/os/hal/osal/rt/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 551:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 552:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] sts       the system status to be restored.
 553:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 554:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 555:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 556:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 557:./ChibiOS/os/hal/osal/rt/osal.h **** 
 558:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysRestoreStatusX(sts);
 559:./ChibiOS/os/hal/osal/rt/osal.h **** }
 560:./ChibiOS/os/hal/osal/rt/osal.h **** 
 561:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 562:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Polled delay.
 563:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 564:./ChibiOS/os/hal/osal/rt/osal.h ****  *          value.
 565:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 566:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] cycles    number of cycles
 567:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 568:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 569:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 570:./ChibiOS/os/hal/osal/rt/osal.h **** #if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
 571:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 572:./ChibiOS/os/hal/osal/rt/osal.h **** 
 573:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysPolledDelayX(cycles);
 574:./ChibiOS/os/hal/osal/rt/osal.h **** }
 575:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 576:./ChibiOS/os/hal/osal/rt/osal.h **** 
 577:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 578:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Systick callback for the underlying OS.
 579:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 580:./ChibiOS/os/hal/osal/rt/osal.h ****  *          service from the HAL.
 581:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 582:./ChibiOS/os/hal/osal/rt/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 583:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalOsTimerHandlerI(void) {
 584:./ChibiOS/os/hal/osal/rt/osal.h **** 
 585:./ChibiOS/os/hal/osal/rt/osal.h ****   chSysTimerHandlerI();
 586:./ChibiOS/os/hal/osal/rt/osal.h **** }
 587:./ChibiOS/os/hal/osal/rt/osal.h **** #endif
 588:./ChibiOS/os/hal/osal/rt/osal.h **** 
 589:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 590:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 591:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 592:./ChibiOS/os/hal/osal/rt/osal.h ****  *          by themselves, an explicit reschedule using this function is
 593:./ChibiOS/os/hal/osal/rt/osal.h ****  *          required in this scenario.
 594:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    Not implemented in this simplified OSAL.
 595:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 596:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 597:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 598:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalOsRescheduleS(void) {
 599:./ChibiOS/os/hal/osal/rt/osal.h **** 
 600:./ChibiOS/os/hal/osal/rt/osal.h ****   chSchRescheduleS();
 601:./ChibiOS/os/hal/osal/rt/osal.h **** }
 602:./ChibiOS/os/hal/osal/rt/osal.h **** 
 603:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 604:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Current system time.
 605:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 606:./ChibiOS/os/hal/osal/rt/osal.h ****  *          invocation.
 607:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 608:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context but its atomicity
 609:./ChibiOS/os/hal/osal/rt/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 610:./ChibiOS/os/hal/osal/rt/osal.h ****  *          @p systime_t size.
 611:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 612:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The system time in ticks.
 613:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 614:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 615:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 616:./ChibiOS/os/hal/osal/rt/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 617:./ChibiOS/os/hal/osal/rt/osal.h **** 
 618:./ChibiOS/os/hal/osal/rt/osal.h ****   return chVTGetSystemTimeX();
 619:./ChibiOS/os/hal/osal/rt/osal.h **** }
 620:./ChibiOS/os/hal/osal/rt/osal.h **** 
 621:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 622:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 623:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    When start==end then the function returns always true because the
 624:./ChibiOS/os/hal/osal/rt/osal.h ****  *          whole time range is specified.
 625:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function can be called from any context.
 626:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 627:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] time      the time to be verified
 628:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 629:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 630:./ChibiOS/os/hal/osal/rt/osal.h ****  * @retval true         current time within the specified time window.
 631:./ChibiOS/os/hal/osal/rt/osal.h ****  * @retval false        current time not within the specified time window.
 632:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 633:./ChibiOS/os/hal/osal/rt/osal.h ****  * @xclass
 634:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 635:./ChibiOS/os/hal/osal/rt/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 636:./ChibiOS/os/hal/osal/rt/osal.h ****                                        systime_t start,
 637:./ChibiOS/os/hal/osal/rt/osal.h ****                                        systime_t end) {
 638:./ChibiOS/os/hal/osal/rt/osal.h **** 
 639:./ChibiOS/os/hal/osal/rt/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 640:./ChibiOS/os/hal/osal/rt/osal.h **** }
 641:./ChibiOS/os/hal/osal/rt/osal.h **** 
 642:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 643:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 644:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 645:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 646:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 647:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 648:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 649:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 650:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      .
 651:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 652:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 653:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 654:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 655:./ChibiOS/os/hal/osal/rt/osal.h **** 
 656:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdSleepS(time);
 657:./ChibiOS/os/hal/osal/rt/osal.h **** }
 658:./ChibiOS/os/hal/osal/rt/osal.h **** 
 659:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 660:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 661:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 662:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 663:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 664:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 665:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        normal time specification.
 666:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 667:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      .
 668:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 669:./ChibiOS/os/hal/osal/rt/osal.h ****  * @api
 670:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 671:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadSleep(systime_t time) {
 672:./ChibiOS/os/hal/osal/rt/osal.h **** 
 673:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdSleep(time);
 674:./ChibiOS/os/hal/osal/rt/osal.h **** }
 675:./ChibiOS/os/hal/osal/rt/osal.h **** 
 676:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 677:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 678:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 679:./ChibiOS/os/hal/osal/rt/osal.h ****  *          context.
 680:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 681:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 682:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 683:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 684:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 685:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 686:./ChibiOS/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 687:./ChibiOS/os/hal/osal/rt/osal.h **** 
 688:./ChibiOS/os/hal/osal/rt/osal.h ****   return chThdSuspendS(trp);
 689:./ChibiOS/os/hal/osal/rt/osal.h **** }
 690:./ChibiOS/os/hal/osal/rt/osal.h **** 
 691:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 692:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 693:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 694:./ChibiOS/os/hal/osal/rt/osal.h ****  *          context.
 695:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 696:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 697:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 698:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 699:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 700:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        state.
 701:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 702:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 703:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        occurred.
 704:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      .
 705:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The wake up message.
 706:./ChibiOS/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 707:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 708:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 709:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 710:./ChibiOS/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 711:./ChibiOS/os/hal/osal/rt/osal.h ****                                               systime_t timeout) {
 712:./ChibiOS/os/hal/osal/rt/osal.h **** 
 713:./ChibiOS/os/hal/osal/rt/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 714:./ChibiOS/os/hal/osal/rt/osal.h **** }
 715:./ChibiOS/os/hal/osal/rt/osal.h **** 
 716:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 717:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 718:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function must not reschedule because it can be called from
 719:./ChibiOS/os/hal/osal/rt/osal.h ****  *          ISR context.
 720:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 721:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 722:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 723:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 724:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 725:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 726:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 727:./ChibiOS/os/hal/osal/rt/osal.h **** 
 728:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdResumeI(trp, msg);
 729:./ChibiOS/os/hal/osal/rt/osal.h **** }
 730:./ChibiOS/os/hal/osal/rt/osal.h **** 
 731:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 732:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 733:./ChibiOS/os/hal/osal/rt/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 734:./ChibiOS/os/hal/osal/rt/osal.h ****  *          context.
 735:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 736:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 737:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 738:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 739:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 740:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 741:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 742:./ChibiOS/os/hal/osal/rt/osal.h **** 
 743:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdResumeS(trp, msg);
 744:./ChibiOS/os/hal/osal/rt/osal.h **** }
 745:./ChibiOS/os/hal/osal/rt/osal.h **** 
 746:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 747:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Initializes a threads queue object.
 748:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 749:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 750:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 751:./ChibiOS/os/hal/osal/rt/osal.h ****  * @init
 752:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 753:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 754:./ChibiOS/os/hal/osal/rt/osal.h **** 
 755:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdQueueObjectInit(tqp);
 756:./ChibiOS/os/hal/osal/rt/osal.h **** }
 757:./ChibiOS/os/hal/osal/rt/osal.h **** 
 758:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 759:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Enqueues the caller thread.
 760:./ChibiOS/os/hal/osal/rt/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 761:./ChibiOS/os/hal/osal/rt/osal.h ****  *          dequeued or the specified timeouts expires.
 762:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 763:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 764:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 765:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      handled as follow:
 766:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 767:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        state.
 768:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 769:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 770:./ChibiOS/os/hal/osal/rt/osal.h ****  *                        occurred.
 771:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      .
 772:./ChibiOS/os/hal/osal/rt/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 773:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 774:./ChibiOS/os/hal/osal/rt/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 775:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      specified timeout or if the function has been
 776:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 777:./ChibiOS/os/hal/osal/rt/osal.h ****  *                      specification.
 778:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 779:./ChibiOS/os/hal/osal/rt/osal.h ****  * @sclass
 780:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 781:./ChibiOS/os/hal/osal/rt/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 782:./ChibiOS/os/hal/osal/rt/osal.h ****                                               systime_t time) {
 783:./ChibiOS/os/hal/osal/rt/osal.h **** 
 784:./ChibiOS/os/hal/osal/rt/osal.h ****   return chThdEnqueueTimeoutS(tqp, time);
 785:./ChibiOS/os/hal/osal/rt/osal.h **** }
 786:./ChibiOS/os/hal/osal/rt/osal.h **** 
 787:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 788:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 789:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 790:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 791:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 792:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 793:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 794:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 795:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 796:./ChibiOS/os/hal/osal/rt/osal.h **** 
 797:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdDequeueNextI(tqp, msg);
 798:./ChibiOS/os/hal/osal/rt/osal.h **** }
 799:./ChibiOS/os/hal/osal/rt/osal.h **** 
 800:./ChibiOS/os/hal/osal/rt/osal.h **** /**
 801:./ChibiOS/os/hal/osal/rt/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 802:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 803:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 804:./ChibiOS/os/hal/osal/rt/osal.h ****  * @param[in] msg       the message code
 805:./ChibiOS/os/hal/osal/rt/osal.h ****  *
 806:./ChibiOS/os/hal/osal/rt/osal.h ****  * @iclass
 807:./ChibiOS/os/hal/osal/rt/osal.h ****  */
 808:./ChibiOS/os/hal/osal/rt/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 809:./ChibiOS/os/hal/osal/rt/osal.h **** 
 810:./ChibiOS/os/hal/osal/rt/osal.h ****   chThdDequeueAllI(tqp, msg);
 149               		.loc 3 810 0
 150 001a 6EEF      		ldi r22,lo8(-2)
 151 001c 7FEF      		ldi r23,lo8(-1)
 152 001e CF01      		movw r24,r30
 153 0020 0C94 0000 		jmp chThdDequeueAllI
 154               	.LVL9:
 155               	.LBE193:
 156               	.LBE192:
 157               		.cfi_endproc
 158               	.LFE137:
 160               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 161               	.global	ibqGetEmptyBufferI
 163               	ibqGetEmptyBufferI:
 164               	.LFB138:
 115:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 116:ChibiOS/os/hal/src/hal_buffers.c **** }
 117:ChibiOS/os/hal/src/hal_buffers.c **** 
 118:ChibiOS/os/hal/src/hal_buffers.c **** /**
 119:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 120:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 121:ChibiOS/os/hal/src/hal_buffers.c ****  *
 122:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 123:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 124:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 125:ChibiOS/os/hal/src/hal_buffers.c ****  *
 126:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 127:ChibiOS/os/hal/src/hal_buffers.c ****  */
 128:ChibiOS/os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 165               		.loc 1 128 0
 166               		.cfi_startproc
 167               	.LVL10:
 168               	/* prologue: function */
 169               	/* frame size = 0 */
 170               	/* stack size = 0 */
 171               	.L__stack_usage = 0
 172 0000 FC01      		movw r30,r24
 129:ChibiOS/os/hal/src/hal_buffers.c **** 
 130:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 131:ChibiOS/os/hal/src/hal_buffers.c **** 
 132:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 173               		.loc 1 132 0
 174 0002 2681      		ldd r18,Z+6
 175 0004 3781      		ldd r19,Z+7
 176 0006 8085      		ldd r24,Z+8
 177 0008 9185      		ldd r25,Z+9
 178               	.LVL11:
 179 000a 2817      		cp r18,r24
 180 000c 3907      		cpc r19,r25
 181 000e 01F0      		breq .L11
 182               	.L4:
 133:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 134:ChibiOS/os/hal/src/hal_buffers.c ****   }
 135:ChibiOS/os/hal/src/hal_buffers.c **** 
 136:ChibiOS/os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 183               		.loc 1 136 0
 184 0010 C901      		movw r24,r18
 185 0012 0296      		adiw r24,2
 137:ChibiOS/os/hal/src/hal_buffers.c **** }
 186               		.loc 1 137 0
 187 0014 0895      		ret
 188               	.L11:
 132:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 189               		.loc 1 132 0 discriminator 1
 190 0016 8481      		ldd r24,Z+4
 191 0018 9581      		ldd r25,Z+5
 192 001a 892B      		or r24,r25
 193 001c 01F0      		breq .L4
 133:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 194               		.loc 1 133 0
 195 001e 80E0      		ldi r24,0
 196 0020 90E0      		ldi r25,0
 197 0022 0895      		ret
 198               		.cfi_endproc
 199               	.LFE138:
 201               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 202               	.global	ibqPostFullBufferI
 204               	ibqPostFullBufferI:
 205               	.LFB139:
 138:ChibiOS/os/hal/src/hal_buffers.c **** 
 139:ChibiOS/os/hal/src/hal_buffers.c **** /**
 140:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 141:ChibiOS/os/hal/src/hal_buffers.c ****  *
 142:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 143:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 144:ChibiOS/os/hal/src/hal_buffers.c ****  *
 145:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 146:ChibiOS/os/hal/src/hal_buffers.c ****  */
 147:ChibiOS/os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 206               		.loc 1 147 0
 207               		.cfi_startproc
 208               	.LVL12:
 209               	/* prologue: function */
 210               	/* frame size = 0 */
 211               	/* stack size = 0 */
 212               	.L__stack_usage = 0
 213 0000 FC01      		movw r30,r24
 148:ChibiOS/os/hal/src/hal_buffers.c **** 
 149:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 150:ChibiOS/os/hal/src/hal_buffers.c **** 
 151:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 152:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 153:ChibiOS/os/hal/src/hal_buffers.c **** 
 154:ChibiOS/os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 155:ChibiOS/os/hal/src/hal_buffers.c ****   *((size_t *)ibqp->bwrptr) = size;
 214               		.loc 1 155 0
 215 0002 A681      		ldd r26,Z+6
 216 0004 B781      		ldd r27,Z+7
 217 0006 1196      		adiw r26,1
 218 0008 7C93      		st X,r23
 219 000a 6E93      		st -X,r22
 156:ChibiOS/os/hal/src/hal_buffers.c **** 
 157:ChibiOS/os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 158:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 220               		.loc 1 158 0
 221 000c 2481      		ldd r18,Z+4
 222 000e 3581      		ldd r19,Z+5
 223 0010 2F5F      		subi r18,-1
 224 0012 3F4F      		sbci r19,-1
 225 0014 3583      		std Z+5,r19
 226 0016 2483      		std Z+4,r18
 159:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 227               		.loc 1 159 0
 228 0018 8485      		ldd r24,Z+12
 229 001a 9585      		ldd r25,Z+13
 230               	.LVL13:
 231 001c 8A0F      		add r24,r26
 232 001e 9B1F      		adc r25,r27
 233 0020 9783      		std Z+7,r25
 234 0022 8683      		std Z+6,r24
 160:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 235               		.loc 1 160 0
 236 0024 2285      		ldd r18,Z+10
 237 0026 3385      		ldd r19,Z+11
 238 0028 8217      		cp r24,r18
 239 002a 9307      		cpc r25,r19
 240 002c 00F0      		brlo .L13
 161:ChibiOS/os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 241               		.loc 1 161 0
 242 002e 8089      		ldd r24,Z+16
 243 0030 9189      		ldd r25,Z+17
 244 0032 9783      		std Z+7,r25
 245 0034 8683      		std Z+6,r24
 246               	.L13:
 247               	.LVL14:
 248               	.LBB194:
 249               	.LBB195:
 797:./ChibiOS/os/hal/osal/rt/osal.h **** }
 250               		.loc 3 797 0
 251 0036 60E0      		ldi r22,0
 252 0038 70E0      		ldi r23,0
 253               	.LVL15:
 254 003a CF01      		movw r24,r30
 255 003c 0C94 0000 		jmp chThdDequeueNextI
 256               	.LVL16:
 257               	.LBE195:
 258               	.LBE194:
 259               		.cfi_endproc
 260               	.LFE139:
 262               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 263               	.global	ibqGetFullBufferTimeoutS
 265               	ibqGetFullBufferTimeoutS:
 266               	.LFB141:
 162:ChibiOS/os/hal/src/hal_buffers.c ****   }
 163:ChibiOS/os/hal/src/hal_buffers.c **** 
 164:ChibiOS/os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 165:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 166:ChibiOS/os/hal/src/hal_buffers.c **** }
 167:ChibiOS/os/hal/src/hal_buffers.c **** 
 168:ChibiOS/os/hal/src/hal_buffers.c **** /**
 169:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 170:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 171:ChibiOS/os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 172:ChibiOS/os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 173:ChibiOS/os/hal/src/hal_buffers.c ****  *          is empty.
 174:ChibiOS/os/hal/src/hal_buffers.c ****  *
 175:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 176:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 177:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 178:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 179:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 180:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 181:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 182:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 183:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 184:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset.
 185:ChibiOS/os/hal/src/hal_buffers.c ****  *
 186:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 187:ChibiOS/os/hal/src/hal_buffers.c ****  */
 188:ChibiOS/os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 189:ChibiOS/os/hal/src/hal_buffers.c ****                               systime_t timeout) {
 190:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 191:ChibiOS/os/hal/src/hal_buffers.c **** 
 192:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 193:ChibiOS/os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 194:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 195:ChibiOS/os/hal/src/hal_buffers.c **** 
 196:ChibiOS/os/hal/src/hal_buffers.c ****   return msg;
 197:ChibiOS/os/hal/src/hal_buffers.c **** }
 198:ChibiOS/os/hal/src/hal_buffers.c **** 
 199:ChibiOS/os/hal/src/hal_buffers.c ****   /**
 200:ChibiOS/os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 201:ChibiOS/os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 202:ChibiOS/os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 203:ChibiOS/os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 204:ChibiOS/os/hal/src/hal_buffers.c ****    *          is empty.
 205:ChibiOS/os/hal/src/hal_buffers.c ****    *
 206:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 207:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 208:ChibiOS/os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 209:ChibiOS/os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 210:ChibiOS/os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 211:ChibiOS/os/hal/src/hal_buffers.c ****    *                      .
 212:ChibiOS/os/hal/src/hal_buffers.c ****    * @return              The operation status.
 213:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 214:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 215:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset.
 216:ChibiOS/os/hal/src/hal_buffers.c ****    *
 217:ChibiOS/os/hal/src/hal_buffers.c ****    * @sclass
 218:ChibiOS/os/hal/src/hal_buffers.c ****    */
 219:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 220:ChibiOS/os/hal/src/hal_buffers.c ****                                  systime_t timeout) {
 267               		.loc 1 220 0
 268               		.cfi_startproc
 269               	.LVL17:
 270 0000 0F93      		push r16
 271               	.LCFI4:
 272               		.cfi_def_cfa_offset 3
 273               		.cfi_offset 16, -2
 274 0002 1F93      		push r17
 275               	.LCFI5:
 276               		.cfi_def_cfa_offset 4
 277               		.cfi_offset 17, -3
 278 0004 CF93      		push r28
 279               	.LCFI6:
 280               		.cfi_def_cfa_offset 5
 281               		.cfi_offset 28, -4
 282 0006 DF93      		push r29
 283               	.LCFI7:
 284               		.cfi_def_cfa_offset 6
 285               		.cfi_offset 29, -5
 286               	/* prologue: function */
 287               	/* frame size = 0 */
 288               	/* stack size = 4 */
 289               	.L__stack_usage = 4
 290 0008 EC01      		movw r28,r24
 291 000a 8B01      		movw r16,r22
 221:ChibiOS/os/hal/src/hal_buffers.c **** 
 222:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 223:ChibiOS/os/hal/src/hal_buffers.c **** 
 224:ChibiOS/os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 292               		.loc 1 224 0
 293 000c 00C0      		rjmp .L15
 294               	.LVL18:
 295               	.L17:
 296               	.LBB204:
 297               	.LBB205:
 298               	.LBB206:
 784:./ChibiOS/os/hal/osal/rt/osal.h **** }
 299               		.loc 3 784 0
 300 000e B801      		movw r22,r16
 301 0010 CE01      		movw r24,r28
 302 0012 0E94 0000 		call chThdEnqueueTimeoutS
 303               	.LVL19:
 304               	.LBE206:
 305               	.LBE205:
 225:ChibiOS/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 226:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 306               		.loc 1 226 0
 307 0016 97FD      		sbrc r25,7
 308 0018 00C0      		rjmp .L16
 309               	.LVL20:
 310               	.L15:
 311               	.LBE204:
 224:ChibiOS/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 312               		.loc 1 224 0
 313 001a 8C81      		ldd r24,Y+4
 314 001c 9D81      		ldd r25,Y+5
 315 001e 892B      		or r24,r25
 316 0020 01F0      		breq .L17
 317               	.LVL21:
 318               	.LBB207:
 319               	.LBB208:
 227:ChibiOS/os/hal/src/hal_buffers.c ****        return msg;
 228:ChibiOS/os/hal/src/hal_buffers.c ****     }
 229:ChibiOS/os/hal/src/hal_buffers.c ****   }
 230:ChibiOS/os/hal/src/hal_buffers.c **** 
 231:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 232:ChibiOS/os/hal/src/hal_buffers.c **** 
 233:ChibiOS/os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 234:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 320               		.loc 1 234 0
 321 0022 E885      		ldd r30,Y+8
 322 0024 F985      		ldd r31,Y+9
 323 0026 9F01      		movw r18,r30
 324 0028 2E5F      		subi r18,-2
 325 002a 3F4F      		sbci r19,-1
 326 002c 3B8B      		std Y+19,r19
 327 002e 2A8B      		std Y+18,r18
 235:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 328               		.loc 1 235 0
 329 0030 8081      		ld r24,Z
 330 0032 9181      		ldd r25,Z+1
 331 0034 820F      		add r24,r18
 332 0036 931F      		adc r25,r19
 333 0038 9D8B      		std Y+21,r25
 334 003a 8C8B      		std Y+20,r24
 335 003c 80E0      		ldi r24,0
 336 003e 90E0      		ldi r25,0
 337               	.LVL22:
 338               	.L16:
 339               	/* epilogue start */
 340               	.LBE208:
 341               	.LBE207:
 236:ChibiOS/os/hal/src/hal_buffers.c **** 
 237:ChibiOS/os/hal/src/hal_buffers.c ****   return MSG_OK;
 238:ChibiOS/os/hal/src/hal_buffers.c **** }
 342               		.loc 1 238 0
 343 0040 DF91      		pop r29
 344 0042 CF91      		pop r28
 345               	.LVL23:
 346 0044 1F91      		pop r17
 347 0046 0F91      		pop r16
 348               	.LVL24:
 349 0048 0895      		ret
 350               		.cfi_endproc
 351               	.LFE141:
 353               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 354               	.global	ibqGetFullBufferTimeout
 356               	ibqGetFullBufferTimeout:
 357               	.LFB140:
 189:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 358               		.loc 1 189 0
 359               		.cfi_startproc
 360               	.LVL25:
 361               	/* prologue: function */
 362               	/* frame size = 0 */
 363               	/* stack size = 0 */
 364               	.L__stack_usage = 0
 365               	.LBB209:
 366               	.LBB210:
 367               	.LBB211:
 368               		.file 4 "./ChibiOS/os/rt/include/chsys.h"
   1:./ChibiOS/os/rt/include/chsys.h **** /*
   2:./ChibiOS/os/rt/include/chsys.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3:./ChibiOS/os/rt/include/chsys.h **** 
   4:./ChibiOS/os/rt/include/chsys.h ****     This file is part of ChibiOS.
   5:./ChibiOS/os/rt/include/chsys.h **** 
   6:./ChibiOS/os/rt/include/chsys.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:./ChibiOS/os/rt/include/chsys.h ****     it under the terms of the GNU General Public License as published by
   8:./ChibiOS/os/rt/include/chsys.h ****     the Free Software Foundation; either version 3 of the License, or
   9:./ChibiOS/os/rt/include/chsys.h ****     (at your option) any later version.
  10:./ChibiOS/os/rt/include/chsys.h **** 
  11:./ChibiOS/os/rt/include/chsys.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:./ChibiOS/os/rt/include/chsys.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:./ChibiOS/os/rt/include/chsys.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:./ChibiOS/os/rt/include/chsys.h ****     GNU General Public License for more details.
  15:./ChibiOS/os/rt/include/chsys.h **** 
  16:./ChibiOS/os/rt/include/chsys.h ****     You should have received a copy of the GNU General Public License
  17:./ChibiOS/os/rt/include/chsys.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:./ChibiOS/os/rt/include/chsys.h **** */
  19:./ChibiOS/os/rt/include/chsys.h **** 
  20:./ChibiOS/os/rt/include/chsys.h **** /**
  21:./ChibiOS/os/rt/include/chsys.h ****  * @file    chsys.h
  22:./ChibiOS/os/rt/include/chsys.h ****  * @brief   System related macros and structures.
  23:./ChibiOS/os/rt/include/chsys.h ****  *
  24:./ChibiOS/os/rt/include/chsys.h ****  * @addtogroup system
  25:./ChibiOS/os/rt/include/chsys.h ****  * @{
  26:./ChibiOS/os/rt/include/chsys.h ****  */
  27:./ChibiOS/os/rt/include/chsys.h **** 
  28:./ChibiOS/os/rt/include/chsys.h **** #ifndef _CHSYS_H_
  29:./ChibiOS/os/rt/include/chsys.h **** #define _CHSYS_H_
  30:./ChibiOS/os/rt/include/chsys.h **** 
  31:./ChibiOS/os/rt/include/chsys.h **** /*lint -sem(chSysHalt, r_no)*/
  32:./ChibiOS/os/rt/include/chsys.h **** 
  33:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  34:./ChibiOS/os/rt/include/chsys.h **** /* Module constants.                                                         */
  35:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  36:./ChibiOS/os/rt/include/chsys.h **** 
  37:./ChibiOS/os/rt/include/chsys.h **** /**
  38:./ChibiOS/os/rt/include/chsys.h ****  * @name    Masks of executable integrity checks.
  39:./ChibiOS/os/rt/include/chsys.h ****  * @{
  40:./ChibiOS/os/rt/include/chsys.h ****  */
  41:./ChibiOS/os/rt/include/chsys.h **** #define CH_INTEGRITY_RLIST                  1U
  42:./ChibiOS/os/rt/include/chsys.h **** #define CH_INTEGRITY_VTLIST                 2U
  43:./ChibiOS/os/rt/include/chsys.h **** #define CH_INTEGRITY_REGISTRY               4U
  44:./ChibiOS/os/rt/include/chsys.h **** #define CH_INTEGRITY_PORT                   8U
  45:./ChibiOS/os/rt/include/chsys.h **** /** @} */
  46:./ChibiOS/os/rt/include/chsys.h **** 
  47:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  48:./ChibiOS/os/rt/include/chsys.h **** /* Module pre-compile time settings.                                         */
  49:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  50:./ChibiOS/os/rt/include/chsys.h **** 
  51:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  52:./ChibiOS/os/rt/include/chsys.h **** /* Derived constants and error checks.                                       */
  53:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  54:./ChibiOS/os/rt/include/chsys.h **** 
  55:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  56:./ChibiOS/os/rt/include/chsys.h **** /* Module data structures and types.                                         */
  57:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  58:./ChibiOS/os/rt/include/chsys.h **** 
  59:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  60:./ChibiOS/os/rt/include/chsys.h **** /* Module macros.                                                            */
  61:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
  62:./ChibiOS/os/rt/include/chsys.h **** 
  63:./ChibiOS/os/rt/include/chsys.h **** /**
  64:./ChibiOS/os/rt/include/chsys.h ****  * @name    ISRs abstraction macros
  65:./ChibiOS/os/rt/include/chsys.h ****  */
  66:./ChibiOS/os/rt/include/chsys.h **** /**
  67:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  68:./ChibiOS/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  69:./ChibiOS/os/rt/include/chsys.h ****  *          level for the underlying architecture.
  70:./ChibiOS/os/rt/include/chsys.h ****  *
  71:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  72:./ChibiOS/os/rt/include/chsys.h ****  * @return              Priority range result.
  73:./ChibiOS/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  74:./ChibiOS/os/rt/include/chsys.h ****  *                      does not support priorities.
  75:./ChibiOS/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  76:./ChibiOS/os/rt/include/chsys.h ****  */
  77:./ChibiOS/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_PRIORITY) || defined(__DOXYGEN__)
  78:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio)                                      \
  79:./ChibiOS/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_PRIORITY(prio)
  80:./ChibiOS/os/rt/include/chsys.h **** #else
  81:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_PRIORITY(prio) false
  82:./ChibiOS/os/rt/include/chsys.h **** #endif
  83:./ChibiOS/os/rt/include/chsys.h **** 
  84:./ChibiOS/os/rt/include/chsys.h **** /**
  85:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Priority level validation macro.
  86:./ChibiOS/os/rt/include/chsys.h ****  * @details This macro determines if the passed value is a valid priority
  87:./ChibiOS/os/rt/include/chsys.h ****  *          level that cannot preempt the kernel critical zone.
  88:./ChibiOS/os/rt/include/chsys.h ****  *
  89:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] prio      the priority level
  90:./ChibiOS/os/rt/include/chsys.h ****  * @return              Priority range result.
  91:./ChibiOS/os/rt/include/chsys.h ****  * @retval false        if the priority is invalid or if the architecture
  92:./ChibiOS/os/rt/include/chsys.h ****  *                      does not support priorities.
  93:./ChibiOS/os/rt/include/chsys.h ****  * @retval true         if the priority is valid.
  94:./ChibiOS/os/rt/include/chsys.h ****  */
  95:./ChibiOS/os/rt/include/chsys.h **** #if defined(PORT_IRQ_IS_VALID_KERNEL_PRIORITY) || defined(__DOXYGEN__)
  96:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio)                               \
  97:./ChibiOS/os/rt/include/chsys.h ****   PORT_IRQ_IS_VALID_KERNEL_PRIORITY(prio)
  98:./ChibiOS/os/rt/include/chsys.h **** #else
  99:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_IS_VALID_KERNEL_PRIORITY(prio) false
 100:./ChibiOS/os/rt/include/chsys.h **** #endif
 101:./ChibiOS/os/rt/include/chsys.h **** 
 102:./ChibiOS/os/rt/include/chsys.h **** /**
 103:./ChibiOS/os/rt/include/chsys.h ****  * @brief   IRQ handler enter code.
 104:./ChibiOS/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers functions are also declared naked.
 105:./ChibiOS/os/rt/include/chsys.h ****  * @note    On some architectures this macro can be empty.
 106:./ChibiOS/os/rt/include/chsys.h ****  *
 107:./ChibiOS/os/rt/include/chsys.h ****  * @special
 108:./ChibiOS/os/rt/include/chsys.h ****  */
 109:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_PROLOGUE()                                                   \
 110:./ChibiOS/os/rt/include/chsys.h ****   PORT_IRQ_PROLOGUE();                                                      \
 111:./ChibiOS/os/rt/include/chsys.h ****   _stats_increase_irq();                                                    \
 112:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_enter_isr()
 113:./ChibiOS/os/rt/include/chsys.h **** 
 114:./ChibiOS/os/rt/include/chsys.h **** /**
 115:./ChibiOS/os/rt/include/chsys.h ****  * @brief   IRQ handler exit code.
 116:./ChibiOS/os/rt/include/chsys.h ****  * @note    Usually IRQ handlers function are also declared naked.
 117:./ChibiOS/os/rt/include/chsys.h ****  * @note    This macro usually performs the final reschedule by using
 118:./ChibiOS/os/rt/include/chsys.h ****  *          @p chSchIsPreemptionRequired() and @p chSchDoReschedule().
 119:./ChibiOS/os/rt/include/chsys.h ****  *
 120:./ChibiOS/os/rt/include/chsys.h ****  * @special
 121:./ChibiOS/os/rt/include/chsys.h ****  */
 122:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_EPILOGUE()                                                   \
 123:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_leave_isr();                                                   \
 124:./ChibiOS/os/rt/include/chsys.h ****   PORT_IRQ_EPILOGUE()
 125:./ChibiOS/os/rt/include/chsys.h **** 
 126:./ChibiOS/os/rt/include/chsys.h **** /**
 127:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Standard normal IRQ handler declaration.
 128:./ChibiOS/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 129:./ChibiOS/os/rt/include/chsys.h ****  *          port implementation.
 130:./ChibiOS/os/rt/include/chsys.h ****  *
 131:./ChibiOS/os/rt/include/chsys.h ****  * @special
 132:./ChibiOS/os/rt/include/chsys.h ****  */
 133:./ChibiOS/os/rt/include/chsys.h **** #define CH_IRQ_HANDLER(id) PORT_IRQ_HANDLER(id)
 134:./ChibiOS/os/rt/include/chsys.h **** /** @} */
 135:./ChibiOS/os/rt/include/chsys.h **** 
 136:./ChibiOS/os/rt/include/chsys.h **** /**
 137:./ChibiOS/os/rt/include/chsys.h ****  * @name    Fast ISRs abstraction macros
 138:./ChibiOS/os/rt/include/chsys.h ****  */
 139:./ChibiOS/os/rt/include/chsys.h **** /**
 140:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Standard fast IRQ handler declaration.
 141:./ChibiOS/os/rt/include/chsys.h ****  * @note    @p id can be a function name or a vector number depending on the
 142:./ChibiOS/os/rt/include/chsys.h ****  *          port implementation.
 143:./ChibiOS/os/rt/include/chsys.h ****  * @note    Not all architectures support fast interrupts.
 144:./ChibiOS/os/rt/include/chsys.h ****  *
 145:./ChibiOS/os/rt/include/chsys.h ****  * @special
 146:./ChibiOS/os/rt/include/chsys.h ****  */
 147:./ChibiOS/os/rt/include/chsys.h **** #define CH_FAST_IRQ_HANDLER(id) PORT_FAST_IRQ_HANDLER(id)
 148:./ChibiOS/os/rt/include/chsys.h **** /** @} */
 149:./ChibiOS/os/rt/include/chsys.h **** 
 150:./ChibiOS/os/rt/include/chsys.h **** /**
 151:./ChibiOS/os/rt/include/chsys.h ****  * @name    Time conversion utilities for the realtime counter
 152:./ChibiOS/os/rt/include/chsys.h ****  * @{
 153:./ChibiOS/os/rt/include/chsys.h ****  */
 154:./ChibiOS/os/rt/include/chsys.h **** /**
 155:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Seconds to realtime counter.
 156:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from seconds to realtime counter cycles.
 157:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 158:./ChibiOS/os/rt/include/chsys.h ****  *
 159:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 160:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] sec       number of seconds
 161:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of cycles.
 162:./ChibiOS/os/rt/include/chsys.h ****  *
 163:./ChibiOS/os/rt/include/chsys.h ****  * @api
 164:./ChibiOS/os/rt/include/chsys.h ****  */
 165:./ChibiOS/os/rt/include/chsys.h **** #define S2RTC(freq, sec) ((freq) * (sec))
 166:./ChibiOS/os/rt/include/chsys.h **** 
 167:./ChibiOS/os/rt/include/chsys.h **** /**
 168:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Milliseconds to realtime counter.
 169:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from milliseconds to realtime counter cycles.
 170:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 171:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 172:./ChibiOS/os/rt/include/chsys.h ****  *
 173:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 174:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] msec      number of milliseconds
 175:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of cycles.
 176:./ChibiOS/os/rt/include/chsys.h ****  *
 177:./ChibiOS/os/rt/include/chsys.h ****  * @api
 178:./ChibiOS/os/rt/include/chsys.h ****  */
 179:./ChibiOS/os/rt/include/chsys.h **** #define MS2RTC(freq, msec) (rtcnt_t)((((freq) + 999UL) / 1000UL) * (msec))
 180:./ChibiOS/os/rt/include/chsys.h **** 
 181:./ChibiOS/os/rt/include/chsys.h **** /**
 182:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Microseconds to realtime counter.
 183:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from microseconds to realtime counter cycles.
 184:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 185:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 186:./ChibiOS/os/rt/include/chsys.h ****  *
 187:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 188:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] usec      number of microseconds
 189:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of cycles.
 190:./ChibiOS/os/rt/include/chsys.h ****  *
 191:./ChibiOS/os/rt/include/chsys.h ****  * @api
 192:./ChibiOS/os/rt/include/chsys.h ****  */
 193:./ChibiOS/os/rt/include/chsys.h **** #define US2RTC(freq, usec) (rtcnt_t)((((freq) + 999999UL) / 1000000UL) * (usec))
 194:./ChibiOS/os/rt/include/chsys.h **** 
 195:./ChibiOS/os/rt/include/chsys.h **** /**
 196:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to seconds.
 197:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to seconds.
 198:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next second boundary.
 199:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1.
 200:./ChibiOS/os/rt/include/chsys.h ****  *
 201:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 202:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 203:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of seconds.
 204:./ChibiOS/os/rt/include/chsys.h ****  *
 205:./ChibiOS/os/rt/include/chsys.h ****  * @api
 206:./ChibiOS/os/rt/include/chsys.h ****  */
 207:./ChibiOS/os/rt/include/chsys.h **** #define RTC2S(freq, n) ((((n) - 1UL) / (freq)) + 1UL)
 208:./ChibiOS/os/rt/include/chsys.h **** 
 209:./ChibiOS/os/rt/include/chsys.h **** /**
 210:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to milliseconds.
 211:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to milliseconds.
 212:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next millisecond boundary.
 213:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 214:./ChibiOS/os/rt/include/chsys.h ****  *
 215:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 216:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 217:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of milliseconds.
 218:./ChibiOS/os/rt/include/chsys.h ****  *
 219:./ChibiOS/os/rt/include/chsys.h ****  * @api
 220:./ChibiOS/os/rt/include/chsys.h ****  */
 221:./ChibiOS/os/rt/include/chsys.h **** #define RTC2MS(freq, n) ((((n) - 1UL) / ((freq) / 1000UL)) + 1UL)
 222:./ChibiOS/os/rt/include/chsys.h **** 
 223:./ChibiOS/os/rt/include/chsys.h **** /**
 224:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Realtime counter cycles to microseconds.
 225:./ChibiOS/os/rt/include/chsys.h ****  * @details Converts from realtime counter cycles number to microseconds.
 226:./ChibiOS/os/rt/include/chsys.h ****  * @note    The result is rounded up to the next microsecond boundary.
 227:./ChibiOS/os/rt/include/chsys.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 228:./ChibiOS/os/rt/include/chsys.h ****  *
 229:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 230:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] n         number of cycles
 231:./ChibiOS/os/rt/include/chsys.h ****  * @return              The number of microseconds.
 232:./ChibiOS/os/rt/include/chsys.h ****  *
 233:./ChibiOS/os/rt/include/chsys.h ****  * @api
 234:./ChibiOS/os/rt/include/chsys.h ****  */
 235:./ChibiOS/os/rt/include/chsys.h **** #define RTC2US(freq, n) ((((n) - 1UL) / ((freq) / 1000000UL)) + 1UL)
 236:./ChibiOS/os/rt/include/chsys.h **** /** @} */
 237:./ChibiOS/os/rt/include/chsys.h **** 
 238:./ChibiOS/os/rt/include/chsys.h **** /**
 239:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Returns the current value of the system real time counter.
 240:./ChibiOS/os/rt/include/chsys.h ****  * @note    This function is only available if the port layer supports the
 241:./ChibiOS/os/rt/include/chsys.h ****  *          option @p PORT_SUPPORTS_RT.
 242:./ChibiOS/os/rt/include/chsys.h ****  *
 243:./ChibiOS/os/rt/include/chsys.h ****  * @return              The value of the system realtime counter of
 244:./ChibiOS/os/rt/include/chsys.h ****  *                      type rtcnt_t.
 245:./ChibiOS/os/rt/include/chsys.h ****  *
 246:./ChibiOS/os/rt/include/chsys.h ****  * @xclass
 247:./ChibiOS/os/rt/include/chsys.h ****  */
 248:./ChibiOS/os/rt/include/chsys.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 249:./ChibiOS/os/rt/include/chsys.h **** #define chSysGetRealtimeCounterX() (rtcnt_t)port_rt_get_counter_value()
 250:./ChibiOS/os/rt/include/chsys.h **** #endif
 251:./ChibiOS/os/rt/include/chsys.h **** 
 252:./ChibiOS/os/rt/include/chsys.h **** /**
 253:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Performs a context switch.
 254:./ChibiOS/os/rt/include/chsys.h ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 255:./ChibiOS/os/rt/include/chsys.h ****  *          itself or from within the port layer.
 256:./ChibiOS/os/rt/include/chsys.h ****  *
 257:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] ntp       the thread to be switched in
 258:./ChibiOS/os/rt/include/chsys.h ****  * @param[in] otp       the thread to be switched out
 259:./ChibiOS/os/rt/include/chsys.h ****  *
 260:./ChibiOS/os/rt/include/chsys.h ****  * @special
 261:./ChibiOS/os/rt/include/chsys.h ****  */
 262:./ChibiOS/os/rt/include/chsys.h **** #define chSysSwitch(ntp, otp) {                                             \
 263:./ChibiOS/os/rt/include/chsys.h ****                                                                             \
 264:./ChibiOS/os/rt/include/chsys.h ****   _dbg_trace(otp);                                                          \
 265:./ChibiOS/os/rt/include/chsys.h ****   _stats_ctxswc(ntp, otp);                                                  \
 266:./ChibiOS/os/rt/include/chsys.h ****   CH_CFG_CONTEXT_SWITCH_HOOK(ntp, otp);                                     \
 267:./ChibiOS/os/rt/include/chsys.h ****   port_switch(ntp, otp);                                                    \
 268:./ChibiOS/os/rt/include/chsys.h **** }
 269:./ChibiOS/os/rt/include/chsys.h **** 
 270:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
 271:./ChibiOS/os/rt/include/chsys.h **** /* External declarations.                                                    */
 272:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
 273:./ChibiOS/os/rt/include/chsys.h **** 
 274:./ChibiOS/os/rt/include/chsys.h **** #ifdef __cplusplus
 275:./ChibiOS/os/rt/include/chsys.h **** extern "C" {
 276:./ChibiOS/os/rt/include/chsys.h **** #endif
 277:./ChibiOS/os/rt/include/chsys.h ****   void chSysInit(void);
 278:./ChibiOS/os/rt/include/chsys.h ****   void chSysHalt(const char *reason);
 279:./ChibiOS/os/rt/include/chsys.h ****   bool chSysIntegrityCheckI(unsigned testmask);
 280:./ChibiOS/os/rt/include/chsys.h ****   void chSysTimerHandlerI(void);
 281:./ChibiOS/os/rt/include/chsys.h ****   syssts_t chSysGetStatusAndLockX(void);
 282:./ChibiOS/os/rt/include/chsys.h ****   void chSysRestoreStatusX(syssts_t sts);
 283:./ChibiOS/os/rt/include/chsys.h **** #if PORT_SUPPORTS_RT
 284:./ChibiOS/os/rt/include/chsys.h ****   bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end);
 285:./ChibiOS/os/rt/include/chsys.h ****   void chSysPolledDelayX(rtcnt_t cycles);
 286:./ChibiOS/os/rt/include/chsys.h **** #endif
 287:./ChibiOS/os/rt/include/chsys.h **** #ifdef __cplusplus
 288:./ChibiOS/os/rt/include/chsys.h **** }
 289:./ChibiOS/os/rt/include/chsys.h **** #endif
 290:./ChibiOS/os/rt/include/chsys.h **** 
 291:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
 292:./ChibiOS/os/rt/include/chsys.h **** /* Module inline functions.                                                  */
 293:./ChibiOS/os/rt/include/chsys.h **** /*===========================================================================*/
 294:./ChibiOS/os/rt/include/chsys.h **** 
 295:./ChibiOS/os/rt/include/chsys.h **** /**
 296:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to the maximum level.
 297:./ChibiOS/os/rt/include/chsys.h ****  * @details All the maskable interrupt sources are disabled regardless their
 298:./ChibiOS/os/rt/include/chsys.h ****  *          hardware priority.
 299:./ChibiOS/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 300:./ChibiOS/os/rt/include/chsys.h ****  *
 301:./ChibiOS/os/rt/include/chsys.h ****  * @special
 302:./ChibiOS/os/rt/include/chsys.h ****  */
 303:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysDisable(void) {
 304:./ChibiOS/os/rt/include/chsys.h **** 
 305:./ChibiOS/os/rt/include/chsys.h ****   port_disable();
 306:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_disable();
 307:./ChibiOS/os/rt/include/chsys.h **** }
 308:./ChibiOS/os/rt/include/chsys.h **** 
 309:./ChibiOS/os/rt/include/chsys.h **** /**
 310:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Raises the system interrupt priority mask to system level.
 311:./ChibiOS/os/rt/include/chsys.h ****  * @details The interrupt sources that should not be able to preempt the kernel
 312:./ChibiOS/os/rt/include/chsys.h ****  *          are disabled, interrupt sources with higher priority are still
 313:./ChibiOS/os/rt/include/chsys.h ****  *          enabled.
 314:./ChibiOS/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 315:./ChibiOS/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysLock(), the @p chSysLock()
 316:./ChibiOS/os/rt/include/chsys.h ****  *          could do more than just disable the interrupts.
 317:./ChibiOS/os/rt/include/chsys.h ****  *
 318:./ChibiOS/os/rt/include/chsys.h ****  * @special
 319:./ChibiOS/os/rt/include/chsys.h ****  */
 320:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysSuspend(void) {
 321:./ChibiOS/os/rt/include/chsys.h **** 
 322:./ChibiOS/os/rt/include/chsys.h ****   port_suspend();
 323:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_suspend();
 324:./ChibiOS/os/rt/include/chsys.h **** }
 325:./ChibiOS/os/rt/include/chsys.h **** 
 326:./ChibiOS/os/rt/include/chsys.h **** /**
 327:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Lowers the system interrupt priority mask to user level.
 328:./ChibiOS/os/rt/include/chsys.h ****  * @details All the interrupt sources are enabled.
 329:./ChibiOS/os/rt/include/chsys.h ****  * @note    Do not invoke this API from within a kernel lock.
 330:./ChibiOS/os/rt/include/chsys.h ****  * @note    This API is no replacement for @p chSysUnlock(), the
 331:./ChibiOS/os/rt/include/chsys.h ****  *          @p chSysUnlock() could do more than just enable the interrupts.
 332:./ChibiOS/os/rt/include/chsys.h ****  *
 333:./ChibiOS/os/rt/include/chsys.h ****  * @special
 334:./ChibiOS/os/rt/include/chsys.h ****  */
 335:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysEnable(void) {
 336:./ChibiOS/os/rt/include/chsys.h **** 
 337:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_enable();
 338:./ChibiOS/os/rt/include/chsys.h ****   port_enable();
 339:./ChibiOS/os/rt/include/chsys.h **** }
 340:./ChibiOS/os/rt/include/chsys.h **** 
 341:./ChibiOS/os/rt/include/chsys.h **** /**
 342:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Enters the kernel lock state.
 343:./ChibiOS/os/rt/include/chsys.h ****  *
 344:./ChibiOS/os/rt/include/chsys.h ****  * @special
 345:./ChibiOS/os/rt/include/chsys.h ****  */
 346:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysLock(void) {
 347:./ChibiOS/os/rt/include/chsys.h **** 
 348:./ChibiOS/os/rt/include/chsys.h ****   port_lock();
 369               		.loc 4 348 0
 370               	/* #APP */
 371               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 372 0000 F894      		cli
 373               	 ;  0 "" 2
 374               	/* #NOAPP */
 375               	.LBE211:
 376               	.LBE210:
 377               	.LBE209:
 193:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 378               		.loc 1 193 0
 379 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 380               	.LVL26:
 381               	.LBB212:
 382               	.LBB213:
 383               	.LBB214:
 349:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 350:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_lock();
 351:./ChibiOS/os/rt/include/chsys.h **** }
 352:./ChibiOS/os/rt/include/chsys.h **** 
 353:./ChibiOS/os/rt/include/chsys.h **** /**
 354:./ChibiOS/os/rt/include/chsys.h ****  * @brief   Leaves the kernel lock state.
 355:./ChibiOS/os/rt/include/chsys.h ****  *
 356:./ChibiOS/os/rt/include/chsys.h ****  * @special
 357:./ChibiOS/os/rt/include/chsys.h ****  */
 358:./ChibiOS/os/rt/include/chsys.h **** static inline void chSysUnlock(void) {
 359:./ChibiOS/os/rt/include/chsys.h **** 
 360:./ChibiOS/os/rt/include/chsys.h ****   _dbg_check_unlock();
 361:./ChibiOS/os/rt/include/chsys.h ****   _stats_stop_measure_crit_thd();
 362:./ChibiOS/os/rt/include/chsys.h **** 
 363:./ChibiOS/os/rt/include/chsys.h ****   /* The following condition can be triggered by the use of i-class functions
 364:./ChibiOS/os/rt/include/chsys.h ****      in a critical section not followed by a chSchResceduleS(), this means
 365:./ChibiOS/os/rt/include/chsys.h ****      that the current thread has a lower priority than the next thread in
 366:./ChibiOS/os/rt/include/chsys.h ****      the ready list.*/
 367:./ChibiOS/os/rt/include/chsys.h ****   chDbgAssert((ch.rlist.r_queue.p_next == (thread_t *)&ch.rlist.r_queue) ||
 368:./ChibiOS/os/rt/include/chsys.h ****               (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
 369:./ChibiOS/os/rt/include/chsys.h ****               "priority order violation");
 370:./ChibiOS/os/rt/include/chsys.h **** 
 371:./ChibiOS/os/rt/include/chsys.h ****   port_unlock();
 384               		.loc 4 371 0
 385               	/* #APP */
 386               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 387 0006 7894      		sei
 388               	 ;  0 "" 2
 389               	/* #NOAPP */
 390               	.LBE214:
 391               	.LBE213:
 392               	.LBE212:
 197:ChibiOS/os/hal/src/hal_buffers.c **** 
 393               		.loc 1 197 0
 394 0008 0895      		ret
 395               		.cfi_endproc
 396               	.LFE140:
 398               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 399               	.global	ibqReleaseEmptyBufferS
 401               	ibqReleaseEmptyBufferS:
 402               	.LFB143:
 239:ChibiOS/os/hal/src/hal_buffers.c **** 
 240:ChibiOS/os/hal/src/hal_buffers.c **** /**
 241:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 242:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 243:ChibiOS/os/hal/src/hal_buffers.c ****  *
 244:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 245:ChibiOS/os/hal/src/hal_buffers.c ****  *
 246:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 247:ChibiOS/os/hal/src/hal_buffers.c ****  */
 248:ChibiOS/os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 249:ChibiOS/os/hal/src/hal_buffers.c **** 
 250:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 251:ChibiOS/os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 252:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 253:ChibiOS/os/hal/src/hal_buffers.c **** }
 254:ChibiOS/os/hal/src/hal_buffers.c **** 
 255:ChibiOS/os/hal/src/hal_buffers.c ****   /**
 256:ChibiOS/os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 257:ChibiOS/os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 258:ChibiOS/os/hal/src/hal_buffers.c ****    *
 259:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 260:ChibiOS/os/hal/src/hal_buffers.c ****    *
 261:ChibiOS/os/hal/src/hal_buffers.c ****    * @sclass
 262:ChibiOS/os/hal/src/hal_buffers.c ****    */
 263:ChibiOS/os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 403               		.loc 1 263 0
 404               		.cfi_startproc
 405               	.LVL27:
 406               	/* prologue: function */
 407               	/* frame size = 0 */
 408               	/* stack size = 0 */
 409               	.L__stack_usage = 0
 410 0000 DC01      		movw r26,r24
 264:ChibiOS/os/hal/src/hal_buffers.c **** 
 265:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 266:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 267:ChibiOS/os/hal/src/hal_buffers.c **** 
 268:ChibiOS/os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 269:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 411               		.loc 1 269 0
 412 0002 1496      		adiw r26,4
 413 0004 8D91      		ld r24,X+
 414 0006 9C91      		ld r25,X
 415 0008 1597      		sbiw r26,4+1
 416               	.LVL28:
 417 000a 0197      		sbiw r24,1
 418 000c 1596      		adiw r26,4+1
 419 000e 9C93      		st X,r25
 420 0010 8E93      		st -X,r24
 421 0012 1497      		sbiw r26,4
 270:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 422               		.loc 1 270 0
 423 0014 1896      		adiw r26,8
 424 0016 2D91      		ld r18,X+
 425 0018 3C91      		ld r19,X
 426 001a 1997      		sbiw r26,8+1
 427 001c 1C96      		adiw r26,12
 428 001e 8D91      		ld r24,X+
 429 0020 9C91      		ld r25,X
 430 0022 1D97      		sbiw r26,12+1
 431 0024 820F      		add r24,r18
 432 0026 931F      		adc r25,r19
 433 0028 1996      		adiw r26,8+1
 434 002a 9C93      		st X,r25
 435 002c 8E93      		st -X,r24
 436 002e 1897      		sbiw r26,8
 271:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 437               		.loc 1 271 0
 438 0030 1A96      		adiw r26,10
 439 0032 2D91      		ld r18,X+
 440 0034 3C91      		ld r19,X
 441 0036 1B97      		sbiw r26,10+1
 442 0038 8217      		cp r24,r18
 443 003a 9307      		cpc r25,r19
 444 003c 00F0      		brlo .L21
 272:ChibiOS/os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 445               		.loc 1 272 0
 446 003e 5096      		adiw r26,16
 447 0040 8D91      		ld r24,X+
 448 0042 9C91      		ld r25,X
 449 0044 5197      		sbiw r26,16+1
 450 0046 1996      		adiw r26,8+1
 451 0048 9C93      		st X,r25
 452 004a 8E93      		st -X,r24
 453 004c 1897      		sbiw r26,8
 454               	.L21:
 273:ChibiOS/os/hal/src/hal_buffers.c ****   }
 274:ChibiOS/os/hal/src/hal_buffers.c **** 
 275:ChibiOS/os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 276:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 455               		.loc 1 276 0
 456 004e 5396      		adiw r26,18+1
 457 0050 1C92      		st X,__zero_reg__
 458 0052 1E92      		st -X,__zero_reg__
 459 0054 5297      		sbiw r26,18
 277:ChibiOS/os/hal/src/hal_buffers.c **** 
 278:ChibiOS/os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 279:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 460               		.loc 1 279 0
 461 0056 5696      		adiw r26,22
 462 0058 ED91      		ld r30,X+
 463 005a FC91      		ld r31,X
 464 005c 5797      		sbiw r26,22+1
 465 005e 3097      		sbiw r30,0
 466 0060 01F0      		breq .L20
 280:ChibiOS/os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 467               		.loc 1 280 0
 468 0062 CD01      		movw r24,r26
 469 0064 0994      		ijmp
 470               	.LVL29:
 471               	.L20:
 472 0066 0895      		ret
 473               		.cfi_endproc
 474               	.LFE143:
 476               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 477               	.global	ibqReleaseEmptyBuffer
 479               	ibqReleaseEmptyBuffer:
 480               	.LFB142:
 248:ChibiOS/os/hal/src/hal_buffers.c **** 
 481               		.loc 1 248 0
 482               		.cfi_startproc
 483               	.LVL30:
 484               	/* prologue: function */
 485               	/* frame size = 0 */
 486               	/* stack size = 0 */
 487               	.L__stack_usage = 0
 488               	.LBB215:
 489               	.LBB216:
 490               	.LBB217:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 491               		.loc 4 348 0
 492               	/* #APP */
 493               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 494 0000 F894      		cli
 495               	 ;  0 "" 2
 496               	/* #NOAPP */
 497               	.LBE217:
 498               	.LBE216:
 499               	.LBE215:
 251:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 500               		.loc 1 251 0
 501 0002 0E94 0000 		call ibqReleaseEmptyBufferS
 502               	.LVL31:
 503               	.LBB218:
 504               	.LBB219:
 505               	.LBB220:
 506               		.loc 4 371 0
 507               	/* #APP */
 508               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 509 0006 7894      		sei
 510               	 ;  0 "" 2
 511               	/* #NOAPP */
 512 0008 0895      		ret
 513               	.LBE220:
 514               	.LBE219:
 515               	.LBE218:
 516               		.cfi_endproc
 517               	.LFE142:
 519               		.section	.text.ibqGetTimeout,"ax",@progbits
 520               	.global	ibqGetTimeout
 522               	ibqGetTimeout:
 523               	.LFB144:
 281:ChibiOS/os/hal/src/hal_buffers.c ****   }
 282:ChibiOS/os/hal/src/hal_buffers.c **** }
 283:ChibiOS/os/hal/src/hal_buffers.c **** 
 284:ChibiOS/os/hal/src/hal_buffers.c **** /**
 285:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 286:ChibiOS/os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 287:ChibiOS/os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 288:ChibiOS/os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 289:ChibiOS/os/hal/src/hal_buffers.c ****  *
 290:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 291:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 292:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 293:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 294:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 295:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 296:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 297:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 298:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset.
 299:ChibiOS/os/hal/src/hal_buffers.c ****  *
 300:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 301:ChibiOS/os/hal/src/hal_buffers.c ****  */
 302:ChibiOS/os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 524               		.loc 1 302 0
 525               		.cfi_startproc
 526               	.LVL32:
 527 0000 0F93      		push r16
 528               	.LCFI8:
 529               		.cfi_def_cfa_offset 3
 530               		.cfi_offset 16, -2
 531 0002 1F93      		push r17
 532               	.LCFI9:
 533               		.cfi_def_cfa_offset 4
 534               		.cfi_offset 17, -3
 535 0004 CF93      		push r28
 536               	.LCFI10:
 537               		.cfi_def_cfa_offset 5
 538               		.cfi_offset 28, -4
 539 0006 DF93      		push r29
 540               	.LCFI11:
 541               		.cfi_def_cfa_offset 6
 542               		.cfi_offset 29, -5
 543               	/* prologue: function */
 544               	/* frame size = 0 */
 545               	/* stack size = 4 */
 546               	.L__stack_usage = 4
 547 0008 8C01      		movw r16,r24
 548               	.LBB221:
 549               	.LBB222:
 550               	.LBB223:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 551               		.loc 4 348 0
 552               	/* #APP */
 553               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 554 000a F894      		cli
 555               	 ;  0 "" 2
 556               	/* #NOAPP */
 557               	.LBE223:
 558               	.LBE222:
 559               	.LBE221:
 303:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 304:ChibiOS/os/hal/src/hal_buffers.c **** 
 305:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 306:ChibiOS/os/hal/src/hal_buffers.c **** 
 307:ChibiOS/os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 308:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 560               		.loc 1 308 0
 561 000c DC01      		movw r26,r24
 562 000e 5296      		adiw r26,18
 563 0010 ED91      		ld r30,X+
 564 0012 FC91      		ld r31,X
 565 0014 5397      		sbiw r26,18+1
 566 0016 3097      		sbiw r30,0
 567 0018 01F0      		breq .L29
 568               	.LVL33:
 569               	.L25:
 309:ChibiOS/os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 310:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 311:ChibiOS/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 312:ChibiOS/os/hal/src/hal_buffers.c ****       return msg;
 313:ChibiOS/os/hal/src/hal_buffers.c ****     }
 314:ChibiOS/os/hal/src/hal_buffers.c ****   }
 315:ChibiOS/os/hal/src/hal_buffers.c **** 
 316:ChibiOS/os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 317:ChibiOS/os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 570               		.loc 1 317 0
 571 001a C191      		ld r28,Z+
 572 001c D0E0      		ldi r29,0
 573               	.LVL34:
 318:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 574               		.loc 1 318 0
 575 001e D801      		movw r26,r16
 576 0020 5396      		adiw r26,18+1
 577 0022 FC93      		st X,r31
 578 0024 EE93      		st -X,r30
 579 0026 5297      		sbiw r26,18
 319:ChibiOS/os/hal/src/hal_buffers.c **** 
 320:ChibiOS/os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 321:ChibiOS/os/hal/src/hal_buffers.c ****      empty in the queue.*/
 322:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 580               		.loc 1 322 0
 581 0028 5496      		adiw r26,20
 582 002a 8D91      		ld r24,X+
 583 002c 9C91      		ld r25,X
 584 002e 5597      		sbiw r26,20+1
 585 0030 E817      		cp r30,r24
 586 0032 F907      		cpc r31,r25
 587 0034 00F4      		brsh .L30
 588               	.L28:
 589               	.LBB224:
 590               	.LBB225:
 591               	.LBB226:
 592               		.loc 4 371 0
 593               	/* #APP */
 594               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 595 0036 7894      		sei
 596               	 ;  0 "" 2
 597               	/* #NOAPP */
 598               	.LBE226:
 599               	.LBE225:
 600               	.LBE224:
 323:ChibiOS/os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 324:ChibiOS/os/hal/src/hal_buffers.c ****   }
 325:ChibiOS/os/hal/src/hal_buffers.c **** 
 326:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 327:ChibiOS/os/hal/src/hal_buffers.c ****   return msg;
 601               		.loc 1 327 0
 602 0038 CE01      		movw r24,r28
 603               	.LVL35:
 604               	.L27:
 605               	/* epilogue start */
 328:ChibiOS/os/hal/src/hal_buffers.c **** }
 606               		.loc 1 328 0
 607 003a DF91      		pop r29
 608 003c CF91      		pop r28
 609 003e 1F91      		pop r17
 610 0040 0F91      		pop r16
 611               	.LVL36:
 612 0042 0895      		ret
 613               	.LVL37:
 614               	.L30:
 323:ChibiOS/os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 615               		.loc 1 323 0
 616 0044 C801      		movw r24,r16
 617 0046 0E94 0000 		call ibqReleaseEmptyBufferS
 618               	.LVL38:
 619 004a 00C0      		rjmp .L28
 620               	.LVL39:
 621               	.L29:
 309:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 622               		.loc 1 309 0
 623 004c 0E94 0000 		call ibqGetFullBufferTimeoutS
 624               	.LVL40:
 310:ChibiOS/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 625               		.loc 1 310 0
 626 0050 0097      		sbiw r24,0
 627 0052 01F4      		brne .L26
 628 0054 D801      		movw r26,r16
 629 0056 5296      		adiw r26,18
 630 0058 ED91      		ld r30,X+
 631 005a FC91      		ld r31,X
 632 005c 5397      		sbiw r26,18+1
 633 005e 00C0      		rjmp .L25
 634               	.L26:
 635               	.LBB227:
 636               	.LBB228:
 637               	.LBB229:
 638               		.loc 4 371 0
 639               	/* #APP */
 640               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 641 0060 7894      		sei
 642               	 ;  0 "" 2
 643               	/* #NOAPP */
 644               	.LBE229:
 645               	.LBE228:
 646               	.LBE227:
 312:ChibiOS/os/hal/src/hal_buffers.c ****     }
 647               		.loc 1 312 0
 648 0062 00C0      		rjmp .L27
 649               		.cfi_endproc
 650               	.LFE144:
 652               		.section	.text.ibqReadTimeout,"ax",@progbits
 653               	.global	ibqReadTimeout
 655               	ibqReadTimeout:
 656               	.LFB145:
 329:ChibiOS/os/hal/src/hal_buffers.c **** 
 330:ChibiOS/os/hal/src/hal_buffers.c **** /**
 331:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 332:ChibiOS/os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 333:ChibiOS/os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 334:ChibiOS/os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 335:ChibiOS/os/hal/src/hal_buffers.c ****  *          been reset.
 336:ChibiOS/os/hal/src/hal_buffers.c ****  *
 337:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 338:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 339:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 340:ChibiOS/os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 341:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 342:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 343:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 344:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 345:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 346:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 347:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 348:ChibiOS/os/hal/src/hal_buffers.c ****  *
 349:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 350:ChibiOS/os/hal/src/hal_buffers.c ****  */
 351:ChibiOS/os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 352:ChibiOS/os/hal/src/hal_buffers.c ****                       size_t n, systime_t timeout) {
 657               		.loc 1 352 0
 658               		.cfi_startproc
 659               	.LVL41:
 660 0000 3F92      		push r3
 661               	.LCFI12:
 662               		.cfi_def_cfa_offset 3
 663               		.cfi_offset 3, -2
 664 0002 4F92      		push r4
 665               	.LCFI13:
 666               		.cfi_def_cfa_offset 4
 667               		.cfi_offset 4, -3
 668 0004 5F92      		push r5
 669               	.LCFI14:
 670               		.cfi_def_cfa_offset 5
 671               		.cfi_offset 5, -4
 672 0006 6F92      		push r6
 673               	.LCFI15:
 674               		.cfi_def_cfa_offset 6
 675               		.cfi_offset 6, -5
 676 0008 7F92      		push r7
 677               	.LCFI16:
 678               		.cfi_def_cfa_offset 7
 679               		.cfi_offset 7, -6
 680 000a 8F92      		push r8
 681               	.LCFI17:
 682               		.cfi_def_cfa_offset 8
 683               		.cfi_offset 8, -7
 684 000c 9F92      		push r9
 685               	.LCFI18:
 686               		.cfi_def_cfa_offset 9
 687               		.cfi_offset 9, -8
 688 000e AF92      		push r10
 689               	.LCFI19:
 690               		.cfi_def_cfa_offset 10
 691               		.cfi_offset 10, -9
 692 0010 BF92      		push r11
 693               	.LCFI20:
 694               		.cfi_def_cfa_offset 11
 695               		.cfi_offset 11, -10
 696 0012 CF92      		push r12
 697               	.LCFI21:
 698               		.cfi_def_cfa_offset 12
 699               		.cfi_offset 12, -11
 700 0014 DF92      		push r13
 701               	.LCFI22:
 702               		.cfi_def_cfa_offset 13
 703               		.cfi_offset 13, -12
 704 0016 EF92      		push r14
 705               	.LCFI23:
 706               		.cfi_def_cfa_offset 14
 707               		.cfi_offset 14, -13
 708 0018 FF92      		push r15
 709               	.LCFI24:
 710               		.cfi_def_cfa_offset 15
 711               		.cfi_offset 15, -14
 712 001a 0F93      		push r16
 713               	.LCFI25:
 714               		.cfi_def_cfa_offset 16
 715               		.cfi_offset 16, -15
 716 001c 1F93      		push r17
 717               	.LCFI26:
 718               		.cfi_def_cfa_offset 17
 719               		.cfi_offset 17, -16
 720 001e CF93      		push r28
 721               	.LCFI27:
 722               		.cfi_def_cfa_offset 18
 723               		.cfi_offset 28, -17
 724 0020 DF93      		push r29
 725               	.LCFI28:
 726               		.cfi_def_cfa_offset 19
 727               		.cfi_offset 29, -18
 728               	/* prologue: function */
 729               	/* frame size = 0 */
 730               	/* stack size = 17 */
 731               	.L__stack_usage = 17
 732 0022 8C01      		movw r16,r24
 733 0024 7B01      		movw r14,r22
 734 0026 6A01      		movw r12,r20
 735 0028 5901      		movw r10,r18
 736               	.LVL42:
 737               	.LBB230:
 738               	.LBB231:
 739               	.LBB232:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 740               		.loc 4 348 0
 741               	/* #APP */
 742               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 743 002a F894      		cli
 744               	 ;  0 "" 2
 745               	/* #NOAPP */
 746               	.LBE232:
 747               	.LBE231:
 748               	.LBE230:
 749               	.LBB233:
 750               	.LBB234:
 751               	.LBB235:
 752               	.LBB236:
 753               	.LBB237:
 754               		.file 5 "./ChibiOS/os/hal/ports/AVR/st_lld.h"
   1:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*
   2:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
   4:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     you may not use this file except in compliance with the License.
   6:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     You may obtain a copy of the License at
   7:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
   8:./ChibiOS/os/hal/ports/AVR/st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  10:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     See the License for the specific language governing permissions and
  14:./ChibiOS/os/hal/ports/AVR/st_lld.h ****     limitations under the License.
  15:./ChibiOS/os/hal/ports/AVR/st_lld.h **** */
  16:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  17:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /**
  18:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @file    AVR/st_lld.h
  19:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @details This header is designed to be include-able without having to
  21:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  *          include other files from the HAL.
  22:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  *
  23:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @addtogroup AVR
  24:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @{
  25:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  */
  26:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  27:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #ifndef _ST_LLD_H_
  28:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #define _ST_LLD_H_
  29:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  30:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  31:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver constants.                                                         */
  32:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  33:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  34:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  35:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver pre-compile time settings.                                         */
  36:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  37:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  38:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*
  39:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * TODO: for models that have many timers,
  40:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  *       could add AVR_ST_USE_TIMER
  41:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  */
  42:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  43:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  44:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Derived constants and error checks.                                       */
  45:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  46:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  47:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*
  48:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * TODO: error checks for valid timer selected
  49:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  */
  50:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  51:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  52:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver data structures and types.                                         */
  53:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  54:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  55:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  56:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver macros.                                                            */
  57:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  58:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  59:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  60:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /* External declarations.                                                    */
  61:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  62:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  63:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #ifdef __cplusplus
  64:./ChibiOS/os/hal/ports/AVR/st_lld.h **** extern "C" {
  65:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #endif
  66:./ChibiOS/os/hal/ports/AVR/st_lld.h ****   void st_lld_init(void);
  67:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #ifdef __cplusplus
  68:./ChibiOS/os/hal/ports/AVR/st_lld.h **** }
  69:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #endif
  70:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  71:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #ifdef __AVR_ATmega128__
  72:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #define TIFR_REG TIFR
  73:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #define TIMSK_REG TIMSK
  74:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #else
  75:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #define TIFR_REG TIFR1
  76:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #define TIMSK_REG TIMSK1
  77:./ChibiOS/os/hal/ports/AVR/st_lld.h **** #endif
  78:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  79:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  80:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver inline functions.                                                  */
  81:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  82:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  83:./ChibiOS/os/hal/ports/AVR/st_lld.h **** /**
  84:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @brief   Returns the time counter value.
  85:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  *
  86:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @return              The counter value.
  87:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  *
  88:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @notapi
  89:./ChibiOS/os/hal/ports/AVR/st_lld.h ****  */
  90:./ChibiOS/os/hal/ports/AVR/st_lld.h **** static inline systime_t st_lld_get_counter(void) {
  91:./ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  92:./ChibiOS/os/hal/ports/AVR/st_lld.h ****   return (systime_t) TCNT1;
 755               		.loc 5 92 0
 756 002c 4090 8400 		lds r4,132
 757 0030 5090 8500 		lds r5,132+1
 758               	.LBE237:
 759               	.LBE236:
 760               	.LBE235:
 761               	.LBE234:
 762               	.LBE233:
 353:ChibiOS/os/hal/src/hal_buffers.c ****   size_t r = 0;
 354:ChibiOS/os/hal/src/hal_buffers.c ****   systime_t deadline;
 355:ChibiOS/os/hal/src/hal_buffers.c **** 
 356:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 357:ChibiOS/os/hal/src/hal_buffers.c **** 
 358:ChibiOS/os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 359:ChibiOS/os/hal/src/hal_buffers.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 763               		.loc 1 359 0
 764 0034 420E      		add r4,r18
 765 0036 531E      		adc r5,r19
 766               	.LVL43:
 353:ChibiOS/os/hal/src/hal_buffers.c ****   size_t r = 0;
 767               		.loc 1 353 0
 768 0038 612C      		mov r6,__zero_reg__
 769 003a 712C      		mov r7,__zero_reg__
 770               	.LBB238:
 771               	.LBB239:
 360:ChibiOS/os/hal/src/hal_buffers.c **** 
 361:ChibiOS/os/hal/src/hal_buffers.c ****   while (true) {
 362:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size;
 363:ChibiOS/os/hal/src/hal_buffers.c **** 
 364:ChibiOS/os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 365:ChibiOS/os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 366:ChibiOS/os/hal/src/hal_buffers.c ****       msg_t msg;
 367:ChibiOS/os/hal/src/hal_buffers.c **** 
 368:ChibiOS/os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 369:ChibiOS/os/hal/src/hal_buffers.c ****          deadline.*/
 370:ChibiOS/os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 772               		.loc 1 370 0
 773 003c 4901      		movw r8,r18
 774 003e 21E0      		ldi r18,1
 775 0040 821A      		sub r8,r18
 776 0042 9108      		sbc r9,__zero_reg__
 777               	.LVL44:
 778               	.LBE239:
 371:ChibiOS/os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 372:ChibiOS/os/hal/src/hal_buffers.c ****       }
 373:ChibiOS/os/hal/src/hal_buffers.c ****       else {
 374:ChibiOS/os/hal/src/hal_buffers.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 375:ChibiOS/os/hal/src/hal_buffers.c **** 
 376:ChibiOS/os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 377:ChibiOS/os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 378:ChibiOS/os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 379:ChibiOS/os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 380:ChibiOS/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 381:ChibiOS/os/hal/src/hal_buffers.c ****           return r;
 382:ChibiOS/os/hal/src/hal_buffers.c ****         }
 383:ChibiOS/os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 384:ChibiOS/os/hal/src/hal_buffers.c ****       }
 385:ChibiOS/os/hal/src/hal_buffers.c **** 
 386:ChibiOS/os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 387:ChibiOS/os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 388:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 389:ChibiOS/os/hal/src/hal_buffers.c ****         return r;
 390:ChibiOS/os/hal/src/hal_buffers.c ****       }
 391:ChibiOS/os/hal/src/hal_buffers.c ****     }
 392:ChibiOS/os/hal/src/hal_buffers.c **** 
 393:ChibiOS/os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 394:ChibiOS/os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 395:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 396:ChibiOS/os/hal/src/hal_buffers.c ****       size = n - r;
 397:ChibiOS/os/hal/src/hal_buffers.c ****     }
 398:ChibiOS/os/hal/src/hal_buffers.c **** 
 399:ChibiOS/os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 400:ChibiOS/os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 401:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > 64U) {
 402:ChibiOS/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 403:ChibiOS/os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, 64U);
 779               		.loc 1 403 0
 780 0044 80E4      		ldi r24,lo8(64)
 781 0046 382E      		mov r3,r24
 782               	.LVL45:
 783 0048 00C0      		rjmp .L42
 784               	.LVL46:
 785               	.L45:
 786 004a FB01      		movw r30,r22
 787 004c D701      		movw r26,r14
 788 004e 832D      		mov r24,r3
 789               		0:
 790 0050 0190      		ld r0,Z+
 791 0052 0D92      		st X+,r0
 792 0054 8A95      		dec r24
 793 0056 01F4      		brne 0b
 404:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += 64U;
 794               		.loc 1 404 0
 795 0058 F0E4      		ldi r31,64
 796 005a EF0E      		add r14,r31
 797 005c F11C      		adc r15,__zero_reg__
 798               	.LVL47:
 405:ChibiOS/os/hal/src/hal_buffers.c ****       ibqp->ptr += 64U;
 799               		.loc 1 405 0
 800 005e F801      		movw r30,r16
 801 0060 8289      		ldd r24,Z+18
 802 0062 9389      		ldd r25,Z+19
 803 0064 805C      		subi r24,-64
 804 0066 9F4F      		sbci r25,-1
 805 0068 938B      		std Z+19,r25
 806 006a 828B      		std Z+18,r24
 406:ChibiOS/os/hal/src/hal_buffers.c ****       r         += 64U;
 807               		.loc 1 406 0
 808 006c F0E4      		ldi r31,64
 809 006e 6F0E      		add r6,r31
 810 0070 711C      		adc r7,__zero_reg__
 811               	.LVL48:
 407:ChibiOS/os/hal/src/hal_buffers.c ****     }
 408:ChibiOS/os/hal/src/hal_buffers.c ****     else {
 409:ChibiOS/os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 410:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += size;
 411:ChibiOS/os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 412:ChibiOS/os/hal/src/hal_buffers.c ****       r         += size;
 413:ChibiOS/os/hal/src/hal_buffers.c ****     }
 414:ChibiOS/os/hal/src/hal_buffers.c **** 
 415:ChibiOS/os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 416:ChibiOS/os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 812               		.loc 1 416 0
 813 0072 F801      		movw r30,r16
 814 0074 2489      		ldd r18,Z+20
 815 0076 3589      		ldd r19,Z+21
 816 0078 8217      		cp r24,r18
 817 007a 9307      		cpc r25,r19
 818 007c 00F4      		brsh .L43
 819               	.L41:
 820               	.LBB249:
 821               	.LBB250:
 822               	.LBB251:
 823               		.loc 4 371 0
 824               	/* #APP */
 825               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 826 007e 7894      		sei
 827               	 ;  0 "" 2
 828               	/* #NOAPP */
 829               	.LBE251:
 830               	.LBE250:
 831               	.LBE249:
 417:ChibiOS/os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 418:ChibiOS/os/hal/src/hal_buffers.c ****     }
 419:ChibiOS/os/hal/src/hal_buffers.c **** 
 420:ChibiOS/os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 421:ChibiOS/os/hal/src/hal_buffers.c ****     osalSysUnlock();
 422:ChibiOS/os/hal/src/hal_buffers.c ****     if (r >= n) {
 832               		.loc 1 422 0
 833 0080 6C14      		cp r6,r12
 834 0082 7D04      		cpc r7,r13
 835 0084 00F4      		brsh .L36
 836               	.L46:
 837               	.LBB254:
 838               	.LBB255:
 839               	.LBB256:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 840               		.loc 4 348 0
 841               	/* #APP */
 842               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 843 0086 F894      		cli
 844               	 ;  0 "" 2
 845               	.LVL49:
 846               	/* #NOAPP */
 847               	.L42:
 848               	.LBE256:
 849               	.LBE255:
 850               	.LBE254:
 365:ChibiOS/os/hal/src/hal_buffers.c ****       msg_t msg;
 851               		.loc 1 365 0
 852 0088 F801      		movw r30,r16
 853 008a 6289      		ldd r22,Z+18
 854 008c 7389      		ldd r23,Z+19
 855 008e 6115      		cp r22,__zero_reg__
 856 0090 7105      		cpc r23,__zero_reg__
 857 0092 01F4      		brne .+2
 858 0094 00C0      		rjmp .L44
 859               	.L32:
 394:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 860               		.loc 1 394 0
 861 0096 F801      		movw r30,r16
 862 0098 C489      		ldd r28,Z+20
 863 009a D589      		ldd r29,Z+21
 864               	.LVL50:
 395:ChibiOS/os/hal/src/hal_buffers.c ****       size = n - r;
 865               		.loc 1 395 0
 866 009c C601      		movw r24,r12
 867 009e 8619      		sub r24,r6
 868 00a0 9709      		sbc r25,r7
 869 00a2 C61B      		sub r28,r22
 870 00a4 D70B      		sbc r29,r23
 871               	.LVL51:
 872 00a6 8C17      		cp r24,r28
 873 00a8 9D07      		cpc r25,r29
 874 00aa 00F4      		brsh .L38
 875 00ac EC01      		movw r28,r24
 876               	.LVL52:
 877               	.L38:
 401:ChibiOS/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 878               		.loc 1 401 0
 879 00ae C134      		cpi r28,65
 880 00b0 D105      		cpc r29,__zero_reg__
 881 00b2 00F4      		brsh .L45
 409:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += size;
 882               		.loc 1 409 0
 883 00b4 AE01      		movw r20,r28
 884 00b6 C701      		movw r24,r14
 885 00b8 0E94 0000 		call memcpy
 886               	.LVL53:
 410:ChibiOS/os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 887               		.loc 1 410 0
 888 00bc EC0E      		add r14,r28
 889 00be FD1E      		adc r15,r29
 890               	.LVL54:
 411:ChibiOS/os/hal/src/hal_buffers.c ****       r         += size;
 891               		.loc 1 411 0
 892 00c0 F801      		movw r30,r16
 893 00c2 8289      		ldd r24,Z+18
 894 00c4 9389      		ldd r25,Z+19
 895 00c6 8C0F      		add r24,r28
 896 00c8 9D1F      		adc r25,r29
 897 00ca 938B      		std Z+19,r25
 898 00cc 828B      		std Z+18,r24
 412:ChibiOS/os/hal/src/hal_buffers.c ****     }
 899               		.loc 1 412 0
 900 00ce 6C0E      		add r6,r28
 901 00d0 7D1E      		adc r7,r29
 902               	.LVL55:
 416:ChibiOS/os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 903               		.loc 1 416 0
 904 00d2 F801      		movw r30,r16
 905 00d4 2489      		ldd r18,Z+20
 906 00d6 3589      		ldd r19,Z+21
 907 00d8 8217      		cp r24,r18
 908 00da 9307      		cpc r25,r19
 909 00dc 00F0      		brlo .L41
 910               	.L43:
 417:ChibiOS/os/hal/src/hal_buffers.c ****     }
 911               		.loc 1 417 0
 912 00de C801      		movw r24,r16
 913 00e0 0E94 0000 		call ibqReleaseEmptyBufferS
 914               	.LVL56:
 915               	.LBB257:
 916               	.LBB253:
 917               	.LBB252:
 918               		.loc 4 371 0
 919               	/* #APP */
 920               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 921 00e4 7894      		sei
 922               	 ;  0 "" 2
 923               	/* #NOAPP */
 924               	.LBE252:
 925               	.LBE253:
 926               	.LBE257:
 927               		.loc 1 422 0
 928 00e6 6C14      		cp r6,r12
 929 00e8 7D04      		cpc r7,r13
 930 00ea 00F0      		brlo .L46
 931               	.LVL57:
 932               	.L36:
 933               	.LBE238:
 423:ChibiOS/os/hal/src/hal_buffers.c ****       return r;
 424:ChibiOS/os/hal/src/hal_buffers.c ****     }
 425:ChibiOS/os/hal/src/hal_buffers.c ****     osalSysLock();
 426:ChibiOS/os/hal/src/hal_buffers.c ****   }
 427:ChibiOS/os/hal/src/hal_buffers.c **** }
 934               		.loc 1 427 0
 935 00ec C301      		movw r24,r6
 936               	/* epilogue start */
 937 00ee DF91      		pop r29
 938 00f0 CF91      		pop r28
 939 00f2 1F91      		pop r17
 940 00f4 0F91      		pop r16
 941               	.LVL58:
 942 00f6 FF90      		pop r15
 943 00f8 EF90      		pop r14
 944               	.LVL59:
 945 00fa DF90      		pop r13
 946 00fc CF90      		pop r12
 947               	.LVL60:
 948 00fe BF90      		pop r11
 949 0100 AF90      		pop r10
 950               	.LVL61:
 951 0102 9F90      		pop r9
 952 0104 8F90      		pop r8
 953               	.LVL62:
 954 0106 7F90      		pop r7
 955 0108 6F90      		pop r6
 956               	.LVL63:
 957 010a 5F90      		pop r5
 958 010c 4F90      		pop r4
 959               	.LVL64:
 960 010e 3F90      		pop r3
 961 0110 0895      		ret
 962               	.LVL65:
 963               	.L44:
 964               	.LBB259:
 965               	.LBB258:
 370:ChibiOS/os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 966               		.loc 1 370 0
 967 0112 FEEF      		ldi r31,-2
 968 0114 8F16      		cp r8,r31
 969 0116 FFEF      		ldi r31,-1
 970 0118 9F06      		cpc r9,r31
 971 011a 00F4      		brsh .L47
 972               	.LBB240:
 973               	.LBB241:
 974               	.LBB242:
 975               	.LBB243:
 976               	.LBB244:
 977               	.LBB245:
 978               		.loc 5 92 0
 979 011c 8091 8400 		lds r24,132
 980 0120 9091 8500 		lds r25,132+1
 981               	.LBE245:
 982               	.LBE244:
 983               	.LBE243:
 984               	.LBE242:
 985               	.LBE241:
 374:ChibiOS/os/hal/src/hal_buffers.c **** 
 986               		.loc 1 374 0
 987 0124 B201      		movw r22,r4
 988 0126 681B      		sub r22,r24
 989 0128 790B      		sbc r23,r25
 990               	.LVL66:
 379:ChibiOS/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 991               		.loc 1 379 0
 992 012a A616      		cp r10,r22
 993 012c B706      		cpc r11,r23
 994 012e 00F0      		brlo .L37
 383:ChibiOS/os/hal/src/hal_buffers.c ****       }
 995               		.loc 1 383 0
 996 0130 C801      		movw r24,r16
 997 0132 0E94 0000 		call ibqGetFullBufferTimeoutS
 998               	.LVL67:
 999               	.LBE240:
 387:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1000               		.loc 1 387 0
 1001 0136 892B      		or r24,r25
 1002 0138 01F4      		brne .L37
 1003               	.L48:
 1004 013a F801      		movw r30,r16
 1005 013c 6289      		ldd r22,Z+18
 1006 013e 7389      		ldd r23,Z+19
 1007 0140 00C0      		rjmp .L32
 1008               	.LVL68:
 1009               	.L47:
 371:ChibiOS/os/hal/src/hal_buffers.c ****       }
 1010               		.loc 1 371 0
 1011 0142 B501      		movw r22,r10
 1012 0144 C801      		movw r24,r16
 1013 0146 0E94 0000 		call ibqGetFullBufferTimeoutS
 1014               	.LVL69:
 387:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1015               		.loc 1 387 0
 1016 014a 892B      		or r24,r25
 1017 014c 01F0      		breq .L48
 1018               	.LVL70:
 1019               	.L37:
 1020               	.LBB246:
 1021               	.LBB247:
 1022               	.LBB248:
 1023               		.loc 4 371 0
 1024               	/* #APP */
 1025               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 1026 014e 7894      		sei
 1027               	 ;  0 "" 2
 1028               	/* #NOAPP */
 1029               	.LBE248:
 1030               	.LBE247:
 1031               	.LBE246:
 389:ChibiOS/os/hal/src/hal_buffers.c ****       }
 1032               		.loc 1 389 0
 1033 0150 00C0      		rjmp .L36
 1034               	.LBE258:
 1035               	.LBE259:
 1036               		.cfi_endproc
 1037               	.LFE145:
 1039               		.section	.text.obqObjectInit,"ax",@progbits
 1040               	.global	obqObjectInit
 1042               	obqObjectInit:
 1043               	.LFB146:
 428:ChibiOS/os/hal/src/hal_buffers.c **** 
 429:ChibiOS/os/hal/src/hal_buffers.c **** /**
 430:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 431:ChibiOS/os/hal/src/hal_buffers.c ****  *
 432:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 433:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 434:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 435:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 436:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 437:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 438:ChibiOS/os/hal/src/hal_buffers.c ****  *
 439:ChibiOS/os/hal/src/hal_buffers.c ****  * @init
 440:ChibiOS/os/hal/src/hal_buffers.c ****  */
 441:ChibiOS/os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
 442:ChibiOS/os/hal/src/hal_buffers.c ****                    size_t size, size_t n,
 443:ChibiOS/os/hal/src/hal_buffers.c ****                    bqnotify_t onfy, void *link) {
 1044               		.loc 1 443 0
 1045               		.cfi_startproc
 1046               	.LVL71:
 1047 0000 EF92      		push r14
 1048               	.LCFI29:
 1049               		.cfi_def_cfa_offset 3
 1050               		.cfi_offset 14, -2
 1051 0002 FF92      		push r15
 1052               	.LCFI30:
 1053               		.cfi_def_cfa_offset 4
 1054               		.cfi_offset 15, -3
 1055 0004 0F93      		push r16
 1056               	.LCFI31:
 1057               		.cfi_def_cfa_offset 5
 1058               		.cfi_offset 16, -4
 1059 0006 1F93      		push r17
 1060               	.LCFI32:
 1061               		.cfi_def_cfa_offset 6
 1062               		.cfi_offset 17, -5
 1063               	/* prologue: function */
 1064               	/* frame size = 0 */
 1065               	/* stack size = 4 */
 1066               	.L__stack_usage = 4
 1067 0008 FC01      		movw r30,r24
 1068               	.LVL72:
 1069               	.LBB260:
 1070               	.LBB261:
 1071               	.LBB262:
 1072               	.LBB263:
 604:./ChibiOS/os/rt/include/chschd.h ****   tqp->p_prev = (thread_t *)tqp;
 1073               		.loc 2 604 0
 1074 000a 9183      		std Z+1,r25
 1075 000c 8083      		st Z,r24
 1076               		.loc 2 605 0
 1077 000e 9383      		std Z+3,r25
 1078 0010 8283      		std Z+2,r24
 1079               	.LBE263:
 1080               	.LBE262:
 1081               	.LBE261:
 1082               	.LBE260:
 444:ChibiOS/os/hal/src/hal_buffers.c **** 
 445:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 446:ChibiOS/os/hal/src/hal_buffers.c **** 
 447:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 448:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bcounter = n;
 1083               		.loc 1 448 0
 1084 0012 3583      		std Z+5,r19
 1085 0014 2483      		std Z+4,r18
 449:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->brdptr   = bp;
 1086               		.loc 1 449 0
 1087 0016 7187      		std Z+9,r23
 1088 0018 6087      		std Z+8,r22
 450:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bwrptr   = bp;
 1089               		.loc 1 450 0
 1090 001a 7783      		std Z+7,r23
 1091 001c 6683      		std Z+6,r22
 451:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 1092               		.loc 1 451 0
 1093 001e 4E5F      		subi r20,-2
 1094 0020 5F4F      		sbci r21,-1
 1095               	.LVL73:
 1096 0022 249F      		mul r18,r20
 1097 0024 C001      		movw r24,r0
 1098 0026 259F      		mul r18,r21
 1099 0028 900D      		add r25,r0
 1100 002a 349F      		mul r19,r20
 1101 002c 900D      		add r25,r0
 1102 002e 1124      		clr r1
 1103               	.LVL74:
 1104 0030 860F      		add r24,r22
 1105 0032 971F      		adc r25,r23
 1106 0034 9387      		std Z+11,r25
 1107 0036 8287      		std Z+10,r24
 452:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bsize    = size + sizeof (size_t);
 1108               		.loc 1 452 0
 1109 0038 5587      		std Z+13,r21
 1110 003a 4487      		std Z+12,r20
 453:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bn       = n;
 1111               		.loc 1 453 0
 1112 003c 3787      		std Z+15,r19
 1113 003e 2687      		std Z+14,r18
 454:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->buffers  = bp;
 1114               		.loc 1 454 0
 1115 0040 718B      		std Z+17,r23
 1116 0042 608B      		std Z+16,r22
 455:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr      = NULL;
 1117               		.loc 1 455 0
 1118 0044 138A      		std Z+19,__zero_reg__
 1119 0046 128A      		std Z+18,__zero_reg__
 456:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->top      = NULL;
 1120               		.loc 1 456 0
 1121 0048 158A      		std Z+21,__zero_reg__
 1122 004a 148A      		std Z+20,__zero_reg__
 457:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->notify   = onfy;
 1123               		.loc 1 457 0
 1124 004c 178B      		std Z+23,r17
 1125 004e 068B      		std Z+22,r16
 458:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->link     = link;
 1126               		.loc 1 458 0
 1127 0050 F18E      		std Z+25,r15
 1128 0052 E08E      		std Z+24,r14
 1129               	/* epilogue start */
 459:ChibiOS/os/hal/src/hal_buffers.c **** }
 1130               		.loc 1 459 0
 1131 0054 1F91      		pop r17
 1132 0056 0F91      		pop r16
 1133               	.LVL75:
 1134 0058 FF90      		pop r15
 1135 005a EF90      		pop r14
 1136               	.LVL76:
 1137 005c 0895      		ret
 1138               		.cfi_endproc
 1139               	.LFE146:
 1141               		.section	.text.obqResetI,"ax",@progbits
 1142               	.global	obqResetI
 1144               	obqResetI:
 1145               	.LFB147:
 460:ChibiOS/os/hal/src/hal_buffers.c **** 
 461:ChibiOS/os/hal/src/hal_buffers.c **** /**
 462:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 463:ChibiOS/os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 464:ChibiOS/os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 465:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 466:ChibiOS/os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 467:ChibiOS/os/hal/src/hal_buffers.c ****  *
 468:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 469:ChibiOS/os/hal/src/hal_buffers.c ****  *
 470:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 471:ChibiOS/os/hal/src/hal_buffers.c ****  */
 472:ChibiOS/os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1146               		.loc 1 472 0
 1147               		.cfi_startproc
 1148               	.LVL77:
 1149               	/* prologue: function */
 1150               	/* frame size = 0 */
 1151               	/* stack size = 0 */
 1152               	.L__stack_usage = 0
 1153 0000 FC01      		movw r30,r24
 473:ChibiOS/os/hal/src/hal_buffers.c **** 
 474:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 475:ChibiOS/os/hal/src/hal_buffers.c **** 
 476:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bcounter = bqSizeX(obqp);
 1154               		.loc 1 476 0
 1155 0002 8685      		ldd r24,Z+14
 1156 0004 9785      		ldd r25,Z+15
 1157               	.LVL78:
 1158 0006 9583      		std Z+5,r25
 1159 0008 8483      		std Z+4,r24
 477:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->brdptr   = obqp->buffers;
 1160               		.loc 1 477 0
 1161 000a 8089      		ldd r24,Z+16
 1162 000c 9189      		ldd r25,Z+17
 1163 000e 9187      		std Z+9,r25
 1164 0010 8087      		std Z+8,r24
 478:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bwrptr   = obqp->buffers;
 1165               		.loc 1 478 0
 1166 0012 9783      		std Z+7,r25
 1167 0014 8683      		std Z+6,r24
 479:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr      = NULL;
 1168               		.loc 1 479 0
 1169 0016 138A      		std Z+19,__zero_reg__
 1170 0018 128A      		std Z+18,__zero_reg__
 480:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->top      = NULL;
 1171               		.loc 1 480 0
 1172 001a 158A      		std Z+21,__zero_reg__
 1173 001c 148A      		std Z+20,__zero_reg__
 1174               	.LVL79:
 1175               	.LBB264:
 1176               	.LBB265:
 1177               		.loc 3 810 0
 1178 001e 6EEF      		ldi r22,lo8(-2)
 1179 0020 7FEF      		ldi r23,lo8(-1)
 1180 0022 CF01      		movw r24,r30
 1181 0024 0C94 0000 		jmp chThdDequeueAllI
 1182               	.LVL80:
 1183               	.LBE265:
 1184               	.LBE264:
 1185               		.cfi_endproc
 1186               	.LFE147:
 1188               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1189               	.global	obqGetFullBufferI
 1191               	obqGetFullBufferI:
 1192               	.LFB148:
 481:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 482:ChibiOS/os/hal/src/hal_buffers.c **** }
 483:ChibiOS/os/hal/src/hal_buffers.c **** 
 484:ChibiOS/os/hal/src/hal_buffers.c **** /**
 485:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 486:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 487:ChibiOS/os/hal/src/hal_buffers.c ****  *
 488:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 489:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 490:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 491:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 492:ChibiOS/os/hal/src/hal_buffers.c ****  *
 493:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 494:ChibiOS/os/hal/src/hal_buffers.c ****  */
 495:ChibiOS/os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 496:ChibiOS/os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1193               		.loc 1 496 0
 1194               		.cfi_startproc
 1195               	.LVL81:
 1196               	/* prologue: function */
 1197               	/* frame size = 0 */
 1198               	/* stack size = 0 */
 1199               	.L__stack_usage = 0
 1200 0000 FC01      		movw r30,r24
 497:ChibiOS/os/hal/src/hal_buffers.c **** 
 498:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 499:ChibiOS/os/hal/src/hal_buffers.c **** 
 500:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1201               		.loc 1 500 0
 1202 0002 2085      		ldd r18,Z+8
 1203 0004 3185      		ldd r19,Z+9
 1204 0006 8681      		ldd r24,Z+6
 1205 0008 9781      		ldd r25,Z+7
 1206               	.LVL82:
 1207 000a 8217      		cp r24,r18
 1208 000c 9307      		cpc r25,r19
 1209 000e 01F0      		breq .L58
 1210               	.L52:
 501:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 502:ChibiOS/os/hal/src/hal_buffers.c ****   }
 503:ChibiOS/os/hal/src/hal_buffers.c **** 
 504:ChibiOS/os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 505:ChibiOS/os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)obqp->brdptr);
 1211               		.loc 1 505 0
 1212 0010 F901      		movw r30,r18
 1213               	.LVL83:
 1214 0012 2191      		ld r18,Z+
 1215 0014 3191      		ld r19,Z+
 1216 0016 CF01      		movw r24,r30
 1217 0018 FB01      		movw r30,r22
 1218 001a 3183      		std Z+1,r19
 1219 001c 2083      		st Z,r18
 506:ChibiOS/os/hal/src/hal_buffers.c **** 
 507:ChibiOS/os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 508:ChibiOS/os/hal/src/hal_buffers.c **** }
 1220               		.loc 1 508 0
 1221 001e 0895      		ret
 1222               	.LVL84:
 1223               	.L58:
 500:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 1224               		.loc 1 500 0 discriminator 1
 1225 0020 8481      		ldd r24,Z+4
 1226 0022 9581      		ldd r25,Z+5
 1227 0024 892B      		or r24,r25
 1228 0026 01F0      		breq .L52
 501:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 1229               		.loc 1 501 0
 1230 0028 80E0      		ldi r24,0
 1231 002a 90E0      		ldi r25,0
 1232 002c 0895      		ret
 1233               		.cfi_endproc
 1234               	.LFE148:
 1236               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1237               	.global	obqReleaseEmptyBufferI
 1239               	obqReleaseEmptyBufferI:
 1240               	.LFB149:
 509:ChibiOS/os/hal/src/hal_buffers.c **** 
 510:ChibiOS/os/hal/src/hal_buffers.c **** /**
 511:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 512:ChibiOS/os/hal/src/hal_buffers.c ****  *
 513:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 514:ChibiOS/os/hal/src/hal_buffers.c ****  *
 515:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 516:ChibiOS/os/hal/src/hal_buffers.c ****  */
 517:ChibiOS/os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1241               		.loc 1 517 0
 1242               		.cfi_startproc
 1243               	.LVL85:
 1244               	/* prologue: function */
 1245               	/* frame size = 0 */
 1246               	/* stack size = 0 */
 1247               	.L__stack_usage = 0
 1248 0000 FC01      		movw r30,r24
 518:ChibiOS/os/hal/src/hal_buffers.c **** 
 519:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 520:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 521:ChibiOS/os/hal/src/hal_buffers.c **** 
 522:ChibiOS/os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 523:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1249               		.loc 1 523 0
 1250 0002 8481      		ldd r24,Z+4
 1251 0004 9581      		ldd r25,Z+5
 1252               	.LVL86:
 1253 0006 0196      		adiw r24,1
 1254 0008 9583      		std Z+5,r25
 1255 000a 8483      		std Z+4,r24
 524:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1256               		.loc 1 524 0
 1257 000c 2085      		ldd r18,Z+8
 1258 000e 3185      		ldd r19,Z+9
 1259 0010 8485      		ldd r24,Z+12
 1260 0012 9585      		ldd r25,Z+13
 1261 0014 820F      		add r24,r18
 1262 0016 931F      		adc r25,r19
 1263 0018 9187      		std Z+9,r25
 1264 001a 8087      		std Z+8,r24
 525:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1265               		.loc 1 525 0
 1266 001c 2285      		ldd r18,Z+10
 1267 001e 3385      		ldd r19,Z+11
 1268 0020 8217      		cp r24,r18
 1269 0022 9307      		cpc r25,r19
 1270 0024 00F0      		brlo .L60
 526:ChibiOS/os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1271               		.loc 1 526 0
 1272 0026 8089      		ldd r24,Z+16
 1273 0028 9189      		ldd r25,Z+17
 1274 002a 9187      		std Z+9,r25
 1275 002c 8087      		std Z+8,r24
 1276               	.L60:
 1277               	.LVL87:
 1278               	.LBB266:
 1279               	.LBB267:
 797:./ChibiOS/os/hal/osal/rt/osal.h **** }
 1280               		.loc 3 797 0
 1281 002e 60E0      		ldi r22,0
 1282 0030 70E0      		ldi r23,0
 1283 0032 CF01      		movw r24,r30
 1284 0034 0C94 0000 		jmp chThdDequeueNextI
 1285               	.LVL88:
 1286               	.LBE267:
 1287               	.LBE266:
 1288               		.cfi_endproc
 1289               	.LFE149:
 1291               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1292               	.global	obqGetEmptyBufferTimeoutS
 1294               	obqGetEmptyBufferTimeoutS:
 1295               	.LFB151:
 527:ChibiOS/os/hal/src/hal_buffers.c ****   }
 528:ChibiOS/os/hal/src/hal_buffers.c **** 
 529:ChibiOS/os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 530:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 531:ChibiOS/os/hal/src/hal_buffers.c **** }
 532:ChibiOS/os/hal/src/hal_buffers.c **** 
 533:ChibiOS/os/hal/src/hal_buffers.c **** /**
 534:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 535:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 536:ChibiOS/os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 537:ChibiOS/os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 538:ChibiOS/os/hal/src/hal_buffers.c ****  *          is empty.
 539:ChibiOS/os/hal/src/hal_buffers.c ****  *
 540:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 541:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 542:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 543:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 544:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 545:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 546:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 547:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 548:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 549:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset.
 550:ChibiOS/os/hal/src/hal_buffers.c ****  *
 551:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 552:ChibiOS/os/hal/src/hal_buffers.c ****  */
 553:ChibiOS/os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 554:ChibiOS/os/hal/src/hal_buffers.c ****                                 systime_t timeout) {
 555:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 556:ChibiOS/os/hal/src/hal_buffers.c **** 
 557:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 558:ChibiOS/os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 559:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 560:ChibiOS/os/hal/src/hal_buffers.c **** 
 561:ChibiOS/os/hal/src/hal_buffers.c ****   return msg;
 562:ChibiOS/os/hal/src/hal_buffers.c **** }
 563:ChibiOS/os/hal/src/hal_buffers.c **** 
 564:ChibiOS/os/hal/src/hal_buffers.c ****   /**
 565:ChibiOS/os/hal/src/hal_buffers.c ****    * @brief   Gets the next empty buffer from the queue.
 566:ChibiOS/os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 567:ChibiOS/os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 568:ChibiOS/os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 569:ChibiOS/os/hal/src/hal_buffers.c ****    *          is empty.
 570:ChibiOS/os/hal/src/hal_buffers.c ****    *
 571:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 572:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 573:ChibiOS/os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 574:ChibiOS/os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 575:ChibiOS/os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 576:ChibiOS/os/hal/src/hal_buffers.c ****    *                      .
 577:ChibiOS/os/hal/src/hal_buffers.c ****    * @return              The operation status.
 578:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 579:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 580:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset.
 581:ChibiOS/os/hal/src/hal_buffers.c ****    *
 582:ChibiOS/os/hal/src/hal_buffers.c ****    * @sclass
 583:ChibiOS/os/hal/src/hal_buffers.c ****    */
 584:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 585:ChibiOS/os/hal/src/hal_buffers.c ****                                   systime_t timeout) {
 1296               		.loc 1 585 0
 1297               		.cfi_startproc
 1298               	.LVL89:
 1299 0000 0F93      		push r16
 1300               	.LCFI33:
 1301               		.cfi_def_cfa_offset 3
 1302               		.cfi_offset 16, -2
 1303 0002 1F93      		push r17
 1304               	.LCFI34:
 1305               		.cfi_def_cfa_offset 4
 1306               		.cfi_offset 17, -3
 1307 0004 CF93      		push r28
 1308               	.LCFI35:
 1309               		.cfi_def_cfa_offset 5
 1310               		.cfi_offset 28, -4
 1311 0006 DF93      		push r29
 1312               	.LCFI36:
 1313               		.cfi_def_cfa_offset 6
 1314               		.cfi_offset 29, -5
 1315               	/* prologue: function */
 1316               	/* frame size = 0 */
 1317               	/* stack size = 4 */
 1318               	.L__stack_usage = 4
 1319 0008 EC01      		movw r28,r24
 1320 000a 8B01      		movw r16,r22
 586:ChibiOS/os/hal/src/hal_buffers.c **** 
 587:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 588:ChibiOS/os/hal/src/hal_buffers.c **** 
 589:ChibiOS/os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1321               		.loc 1 589 0
 1322 000c 00C0      		rjmp .L62
 1323               	.LVL90:
 1324               	.L64:
 1325               	.LBB276:
 1326               	.LBB277:
 1327               	.LBB278:
 784:./ChibiOS/os/hal/osal/rt/osal.h **** }
 1328               		.loc 3 784 0
 1329 000e B801      		movw r22,r16
 1330 0010 CE01      		movw r24,r28
 1331 0012 0E94 0000 		call chThdEnqueueTimeoutS
 1332               	.LVL91:
 1333               	.LBE278:
 1334               	.LBE277:
 590:ChibiOS/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 591:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1335               		.loc 1 591 0
 1336 0016 97FD      		sbrc r25,7
 1337 0018 00C0      		rjmp .L63
 1338               	.LVL92:
 1339               	.L62:
 1340               	.LBE276:
 589:ChibiOS/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 1341               		.loc 1 589 0
 1342 001a 8C81      		ldd r24,Y+4
 1343 001c 9D81      		ldd r25,Y+5
 1344 001e 892B      		or r24,r25
 1345 0020 01F0      		breq .L64
 1346               	.LVL93:
 1347               	.LBB279:
 1348               	.LBB280:
 592:ChibiOS/os/hal/src/hal_buffers.c ****       return msg;
 593:ChibiOS/os/hal/src/hal_buffers.c ****     }
 594:ChibiOS/os/hal/src/hal_buffers.c ****   }
 595:ChibiOS/os/hal/src/hal_buffers.c **** 
 596:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 597:ChibiOS/os/hal/src/hal_buffers.c **** 
 598:ChibiOS/os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 599:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1349               		.loc 1 599 0
 1350 0022 2E81      		ldd r18,Y+6
 1351 0024 3F81      		ldd r19,Y+7
 1352 0026 C901      		movw r24,r18
 1353 0028 0296      		adiw r24,2
 1354 002a 9B8B      		std Y+19,r25
 1355 002c 8A8B      		std Y+18,r24
 600:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1356               		.loc 1 600 0
 1357 002e 8C85      		ldd r24,Y+12
 1358 0030 9D85      		ldd r25,Y+13
 1359 0032 820F      		add r24,r18
 1360 0034 931F      		adc r25,r19
 1361 0036 9D8B      		std Y+21,r25
 1362 0038 8C8B      		std Y+20,r24
 1363 003a 80E0      		ldi r24,0
 1364 003c 90E0      		ldi r25,0
 1365               	.LVL94:
 1366               	.L63:
 1367               	/* epilogue start */
 1368               	.LBE280:
 1369               	.LBE279:
 601:ChibiOS/os/hal/src/hal_buffers.c **** 
 602:ChibiOS/os/hal/src/hal_buffers.c ****   return MSG_OK;
 603:ChibiOS/os/hal/src/hal_buffers.c **** }
 1370               		.loc 1 603 0
 1371 003e DF91      		pop r29
 1372 0040 CF91      		pop r28
 1373               	.LVL95:
 1374 0042 1F91      		pop r17
 1375 0044 0F91      		pop r16
 1376               	.LVL96:
 1377 0046 0895      		ret
 1378               		.cfi_endproc
 1379               	.LFE151:
 1381               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1382               	.global	obqGetEmptyBufferTimeout
 1384               	obqGetEmptyBufferTimeout:
 1385               	.LFB150:
 554:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 1386               		.loc 1 554 0
 1387               		.cfi_startproc
 1388               	.LVL97:
 1389               	/* prologue: function */
 1390               	/* frame size = 0 */
 1391               	/* stack size = 0 */
 1392               	.L__stack_usage = 0
 1393               	.LBB281:
 1394               	.LBB282:
 1395               	.LBB283:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1396               		.loc 4 348 0
 1397               	/* #APP */
 1398               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 1399 0000 F894      		cli
 1400               	 ;  0 "" 2
 1401               	/* #NOAPP */
 1402               	.LBE283:
 1403               	.LBE282:
 1404               	.LBE281:
 558:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1405               		.loc 1 558 0
 1406 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1407               	.LVL98:
 1408               	.LBB284:
 1409               	.LBB285:
 1410               	.LBB286:
 1411               		.loc 4 371 0
 1412               	/* #APP */
 1413               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 1414 0006 7894      		sei
 1415               	 ;  0 "" 2
 1416               	/* #NOAPP */
 1417               	.LBE286:
 1418               	.LBE285:
 1419               	.LBE284:
 562:ChibiOS/os/hal/src/hal_buffers.c **** 
 1420               		.loc 1 562 0
 1421 0008 0895      		ret
 1422               		.cfi_endproc
 1423               	.LFE150:
 1425               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1426               	.global	obqPostFullBufferS
 1428               	obqPostFullBufferS:
 1429               	.LFB153:
 604:ChibiOS/os/hal/src/hal_buffers.c **** 
 605:ChibiOS/os/hal/src/hal_buffers.c **** /**
 606:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 607:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 608:ChibiOS/os/hal/src/hal_buffers.c ****  *
 609:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 610:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 611:ChibiOS/os/hal/src/hal_buffers.c ****  *
 612:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 613:ChibiOS/os/hal/src/hal_buffers.c ****  */
 614:ChibiOS/os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 615:ChibiOS/os/hal/src/hal_buffers.c **** 
 616:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 617:ChibiOS/os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 618:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 619:ChibiOS/os/hal/src/hal_buffers.c **** }
 620:ChibiOS/os/hal/src/hal_buffers.c **** 
 621:ChibiOS/os/hal/src/hal_buffers.c **** /**
 622:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 623:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 624:ChibiOS/os/hal/src/hal_buffers.c ****  *
 625:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 626:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 627:ChibiOS/os/hal/src/hal_buffers.c ****  *
 628:ChibiOS/os/hal/src/hal_buffers.c ****  * @sclass
 629:ChibiOS/os/hal/src/hal_buffers.c ****  */
 630:ChibiOS/os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 1430               		.loc 1 630 0
 1431               		.cfi_startproc
 1432               	.LVL99:
 1433               	/* prologue: function */
 1434               	/* frame size = 0 */
 1435               	/* stack size = 0 */
 1436               	.L__stack_usage = 0
 1437 0000 DC01      		movw r26,r24
 631:ChibiOS/os/hal/src/hal_buffers.c **** 
 632:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 633:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 634:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 635:ChibiOS/os/hal/src/hal_buffers.c **** 
 636:ChibiOS/os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 637:ChibiOS/os/hal/src/hal_buffers.c ****   *((size_t *)obqp->bwrptr) = size;
 1438               		.loc 1 637 0
 1439 0002 1696      		adiw r26,6
 1440 0004 ED91      		ld r30,X+
 1441 0006 FC91      		ld r31,X
 1442 0008 1797      		sbiw r26,6+1
 1443 000a 7183      		std Z+1,r23
 1444 000c 6083      		st Z,r22
 638:ChibiOS/os/hal/src/hal_buffers.c **** 
 639:ChibiOS/os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 640:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1445               		.loc 1 640 0
 1446 000e 1496      		adiw r26,4
 1447 0010 2D91      		ld r18,X+
 1448 0012 3C91      		ld r19,X
 1449 0014 1597      		sbiw r26,4+1
 1450 0016 2150      		subi r18,1
 1451 0018 3109      		sbc r19,__zero_reg__
 1452 001a 1596      		adiw r26,4+1
 1453 001c 3C93      		st X,r19
 1454 001e 2E93      		st -X,r18
 1455 0020 1497      		sbiw r26,4
 641:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1456               		.loc 1 641 0
 1457 0022 1C96      		adiw r26,12
 1458 0024 8D91      		ld r24,X+
 1459 0026 9C91      		ld r25,X
 1460 0028 1D97      		sbiw r26,12+1
 1461               	.LVL100:
 1462 002a 8E0F      		add r24,r30
 1463 002c 9F1F      		adc r25,r31
 1464 002e 1796      		adiw r26,6+1
 1465 0030 9C93      		st X,r25
 1466 0032 8E93      		st -X,r24
 1467 0034 1697      		sbiw r26,6
 642:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1468               		.loc 1 642 0
 1469 0036 1A96      		adiw r26,10
 1470 0038 2D91      		ld r18,X+
 1471 003a 3C91      		ld r19,X
 1472 003c 1B97      		sbiw r26,10+1
 1473 003e 8217      		cp r24,r18
 1474 0040 9307      		cpc r25,r19
 1475 0042 00F0      		brlo .L68
 643:ChibiOS/os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1476               		.loc 1 643 0
 1477 0044 5096      		adiw r26,16
 1478 0046 8D91      		ld r24,X+
 1479 0048 9C91      		ld r25,X
 1480 004a 5197      		sbiw r26,16+1
 1481 004c 1796      		adiw r26,6+1
 1482 004e 9C93      		st X,r25
 1483 0050 8E93      		st -X,r24
 1484 0052 1697      		sbiw r26,6
 1485               	.L68:
 644:ChibiOS/os/hal/src/hal_buffers.c ****   }
 645:ChibiOS/os/hal/src/hal_buffers.c **** 
 646:ChibiOS/os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 647:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1486               		.loc 1 647 0
 1487 0054 5396      		adiw r26,18+1
 1488 0056 1C92      		st X,__zero_reg__
 1489 0058 1E92      		st -X,__zero_reg__
 1490 005a 5297      		sbiw r26,18
 648:ChibiOS/os/hal/src/hal_buffers.c **** 
 649:ChibiOS/os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 650:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1491               		.loc 1 650 0
 1492 005c 5696      		adiw r26,22
 1493 005e ED91      		ld r30,X+
 1494 0060 FC91      		ld r31,X
 1495 0062 5797      		sbiw r26,22+1
 1496 0064 3097      		sbiw r30,0
 1497 0066 01F0      		breq .L67
 651:ChibiOS/os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1498               		.loc 1 651 0
 1499 0068 CD01      		movw r24,r26
 1500 006a 0994      		ijmp
 1501               	.LVL101:
 1502               	.L67:
 1503 006c 0895      		ret
 1504               		.cfi_endproc
 1505               	.LFE153:
 1507               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1508               	.global	obqPostFullBuffer
 1510               	obqPostFullBuffer:
 1511               	.LFB152:
 614:ChibiOS/os/hal/src/hal_buffers.c **** 
 1512               		.loc 1 614 0
 1513               		.cfi_startproc
 1514               	.LVL102:
 1515               	/* prologue: function */
 1516               	/* frame size = 0 */
 1517               	/* stack size = 0 */
 1518               	.L__stack_usage = 0
 1519               	.LBB287:
 1520               	.LBB288:
 1521               	.LBB289:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1522               		.loc 4 348 0
 1523               	/* #APP */
 1524               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 1525 0000 F894      		cli
 1526               	 ;  0 "" 2
 1527               	/* #NOAPP */
 1528               	.LBE289:
 1529               	.LBE288:
 1530               	.LBE287:
 617:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1531               		.loc 1 617 0
 1532 0002 0E94 0000 		call obqPostFullBufferS
 1533               	.LVL103:
 1534               	.LBB290:
 1535               	.LBB291:
 1536               	.LBB292:
 1537               		.loc 4 371 0
 1538               	/* #APP */
 1539               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 1540 0006 7894      		sei
 1541               	 ;  0 "" 2
 1542               	/* #NOAPP */
 1543 0008 0895      		ret
 1544               	.LBE292:
 1545               	.LBE291:
 1546               	.LBE290:
 1547               		.cfi_endproc
 1548               	.LFE152:
 1550               		.section	.text.obqPutTimeout,"ax",@progbits
 1551               	.global	obqPutTimeout
 1553               	obqPutTimeout:
 1554               	.LFB154:
 652:ChibiOS/os/hal/src/hal_buffers.c ****   }
 653:ChibiOS/os/hal/src/hal_buffers.c **** }
 654:ChibiOS/os/hal/src/hal_buffers.c **** 
 655:ChibiOS/os/hal/src/hal_buffers.c **** /**
 656:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 657:ChibiOS/os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 658:ChibiOS/os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 659:ChibiOS/os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 660:ChibiOS/os/hal/src/hal_buffers.c ****  *
 661:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 662:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 663:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 664:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 665:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 666:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 667:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 668:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 669:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 670:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset.
 671:ChibiOS/os/hal/src/hal_buffers.c ****  *
 672:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 673:ChibiOS/os/hal/src/hal_buffers.c ****  */
 674:ChibiOS/os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 675:ChibiOS/os/hal/src/hal_buffers.c ****                     systime_t timeout) {
 1555               		.loc 1 675 0
 1556               		.cfi_startproc
 1557               	.LVL104:
 1558 0000 1F93      		push r17
 1559               	.LCFI37:
 1560               		.cfi_def_cfa_offset 3
 1561               		.cfi_offset 17, -2
 1562 0002 CF93      		push r28
 1563               	.LCFI38:
 1564               		.cfi_def_cfa_offset 4
 1565               		.cfi_offset 28, -3
 1566 0004 DF93      		push r29
 1567               	.LCFI39:
 1568               		.cfi_def_cfa_offset 5
 1569               		.cfi_offset 29, -4
 1570               	/* prologue: function */
 1571               	/* frame size = 0 */
 1572               	/* stack size = 3 */
 1573               	.L__stack_usage = 3
 1574 0006 EC01      		movw r28,r24
 1575 0008 162F      		mov r17,r22
 1576               	.LBB293:
 1577               	.LBB294:
 1578               	.LBB295:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1579               		.loc 4 348 0
 1580               	/* #APP */
 1581               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 1582 000a F894      		cli
 1583               	 ;  0 "" 2
 1584               	/* #NOAPP */
 1585               	.LBE295:
 1586               	.LBE294:
 1587               	.LBE293:
 676:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 677:ChibiOS/os/hal/src/hal_buffers.c **** 
 678:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 679:ChibiOS/os/hal/src/hal_buffers.c **** 
 680:ChibiOS/os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 681:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1588               		.loc 1 681 0
 1589 000c EA89      		ldd r30,Y+18
 1590 000e FB89      		ldd r31,Y+19
 1591 0010 3097      		sbiw r30,0
 1592 0012 01F0      		breq .L76
 1593               	.LVL105:
 1594               	.L72:
 682:ChibiOS/os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 683:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 684:ChibiOS/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 685:ChibiOS/os/hal/src/hal_buffers.c ****       return msg;
 686:ChibiOS/os/hal/src/hal_buffers.c ****     }
 687:ChibiOS/os/hal/src/hal_buffers.c ****   }
 688:ChibiOS/os/hal/src/hal_buffers.c **** 
 689:ChibiOS/os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 690:ChibiOS/os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1595               		.loc 1 690 0
 1596 0014 1083      		st Z,r17
 691:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1597               		.loc 1 691 0
 1598 0016 8A89      		ldd r24,Y+18
 1599 0018 9B89      		ldd r25,Y+19
 1600 001a 0196      		adiw r24,1
 1601 001c 9B8B      		std Y+19,r25
 1602 001e 8A8B      		std Y+18,r24
 692:ChibiOS/os/hal/src/hal_buffers.c **** 
 693:ChibiOS/os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 694:ChibiOS/os/hal/src/hal_buffers.c ****      full in the queue.*/
 695:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1603               		.loc 1 695 0
 1604 0020 2C89      		ldd r18,Y+20
 1605 0022 3D89      		ldd r19,Y+21
 1606 0024 8217      		cp r24,r18
 1607 0026 9307      		cpc r25,r19
 1608 0028 00F4      		brsh .L77
 1609               	.L75:
 1610               	.LBB296:
 1611               	.LBB297:
 1612               	.LBB298:
 1613               		.loc 4 371 0
 1614               	/* #APP */
 1615               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 1616 002a 7894      		sei
 1617               	 ;  0 "" 2
 1618               	/* #NOAPP */
 1619               	.LBE298:
 1620               	.LBE297:
 1621               	.LBE296:
 696:ChibiOS/os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 697:ChibiOS/os/hal/src/hal_buffers.c ****   }
 698:ChibiOS/os/hal/src/hal_buffers.c **** 
 699:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 700:ChibiOS/os/hal/src/hal_buffers.c ****   return MSG_OK;
 1622               		.loc 1 700 0
 1623 002c 80E0      		ldi r24,0
 1624 002e 90E0      		ldi r25,0
 1625               	.L74:
 1626               	/* epilogue start */
 701:ChibiOS/os/hal/src/hal_buffers.c **** }
 1627               		.loc 1 701 0
 1628 0030 DF91      		pop r29
 1629 0032 CF91      		pop r28
 1630               	.LVL106:
 1631 0034 1F91      		pop r17
 1632               	.LVL107:
 1633 0036 0895      		ret
 1634               	.LVL108:
 1635               	.L77:
 696:ChibiOS/os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1636               		.loc 1 696 0
 1637 0038 6C85      		ldd r22,Y+12
 1638 003a 7D85      		ldd r23,Y+13
 1639 003c 6250      		subi r22,2
 1640 003e 7109      		sbc r23,__zero_reg__
 1641 0040 CE01      		movw r24,r28
 1642 0042 0E94 0000 		call obqPostFullBufferS
 1643               	.LVL109:
 1644 0046 00C0      		rjmp .L75
 1645               	.LVL110:
 1646               	.L76:
 682:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1647               		.loc 1 682 0
 1648 0048 BA01      		movw r22,r20
 1649 004a 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1650               	.LVL111:
 683:ChibiOS/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1651               		.loc 1 683 0
 1652 004e 0097      		sbiw r24,0
 1653 0050 01F4      		brne .L73
 1654 0052 EA89      		ldd r30,Y+18
 1655 0054 FB89      		ldd r31,Y+19
 1656 0056 00C0      		rjmp .L72
 1657               	.L73:
 1658               	.LBB299:
 1659               	.LBB300:
 1660               	.LBB301:
 1661               		.loc 4 371 0
 1662               	/* #APP */
 1663               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 1664 0058 7894      		sei
 1665               	 ;  0 "" 2
 1666               	/* #NOAPP */
 1667               	.LBE301:
 1668               	.LBE300:
 1669               	.LBE299:
 685:ChibiOS/os/hal/src/hal_buffers.c ****     }
 1670               		.loc 1 685 0
 1671 005a 00C0      		rjmp .L74
 1672               		.cfi_endproc
 1673               	.LFE154:
 1675               		.section	.text.obqWriteTimeout,"ax",@progbits
 1676               	.global	obqWriteTimeout
 1678               	obqWriteTimeout:
 1679               	.LFB155:
 702:ChibiOS/os/hal/src/hal_buffers.c **** 
 703:ChibiOS/os/hal/src/hal_buffers.c **** /**
 704:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 705:ChibiOS/os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 706:ChibiOS/os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 707:ChibiOS/os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 708:ChibiOS/os/hal/src/hal_buffers.c ****  *          been reset.
 709:ChibiOS/os/hal/src/hal_buffers.c ****  *
 710:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 711:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 712:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 713:ChibiOS/os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 714:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 715:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 716:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 717:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 718:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 719:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 720:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 721:ChibiOS/os/hal/src/hal_buffers.c ****  *
 722:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 723:ChibiOS/os/hal/src/hal_buffers.c ****  */
 724:ChibiOS/os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 725:ChibiOS/os/hal/src/hal_buffers.c ****                        size_t n, systime_t timeout) {
 1680               		.loc 1 725 0
 1681               		.cfi_startproc
 1682               	.LVL112:
 1683 0000 3F92      		push r3
 1684               	.LCFI40:
 1685               		.cfi_def_cfa_offset 3
 1686               		.cfi_offset 3, -2
 1687 0002 4F92      		push r4
 1688               	.LCFI41:
 1689               		.cfi_def_cfa_offset 4
 1690               		.cfi_offset 4, -3
 1691 0004 5F92      		push r5
 1692               	.LCFI42:
 1693               		.cfi_def_cfa_offset 5
 1694               		.cfi_offset 5, -4
 1695 0006 6F92      		push r6
 1696               	.LCFI43:
 1697               		.cfi_def_cfa_offset 6
 1698               		.cfi_offset 6, -5
 1699 0008 7F92      		push r7
 1700               	.LCFI44:
 1701               		.cfi_def_cfa_offset 7
 1702               		.cfi_offset 7, -6
 1703 000a 8F92      		push r8
 1704               	.LCFI45:
 1705               		.cfi_def_cfa_offset 8
 1706               		.cfi_offset 8, -7
 1707 000c 9F92      		push r9
 1708               	.LCFI46:
 1709               		.cfi_def_cfa_offset 9
 1710               		.cfi_offset 9, -8
 1711 000e AF92      		push r10
 1712               	.LCFI47:
 1713               		.cfi_def_cfa_offset 10
 1714               		.cfi_offset 10, -9
 1715 0010 BF92      		push r11
 1716               	.LCFI48:
 1717               		.cfi_def_cfa_offset 11
 1718               		.cfi_offset 11, -10
 1719 0012 CF92      		push r12
 1720               	.LCFI49:
 1721               		.cfi_def_cfa_offset 12
 1722               		.cfi_offset 12, -11
 1723 0014 DF92      		push r13
 1724               	.LCFI50:
 1725               		.cfi_def_cfa_offset 13
 1726               		.cfi_offset 13, -12
 1727 0016 EF92      		push r14
 1728               	.LCFI51:
 1729               		.cfi_def_cfa_offset 14
 1730               		.cfi_offset 14, -13
 1731 0018 FF92      		push r15
 1732               	.LCFI52:
 1733               		.cfi_def_cfa_offset 15
 1734               		.cfi_offset 15, -14
 1735 001a 0F93      		push r16
 1736               	.LCFI53:
 1737               		.cfi_def_cfa_offset 16
 1738               		.cfi_offset 16, -15
 1739 001c 1F93      		push r17
 1740               	.LCFI54:
 1741               		.cfi_def_cfa_offset 17
 1742               		.cfi_offset 17, -16
 1743 001e CF93      		push r28
 1744               	.LCFI55:
 1745               		.cfi_def_cfa_offset 18
 1746               		.cfi_offset 28, -17
 1747 0020 DF93      		push r29
 1748               	.LCFI56:
 1749               		.cfi_def_cfa_offset 19
 1750               		.cfi_offset 29, -18
 1751               	/* prologue: function */
 1752               	/* frame size = 0 */
 1753               	/* stack size = 17 */
 1754               	.L__stack_usage = 17
 1755 0022 8C01      		movw r16,r24
 1756 0024 7B01      		movw r14,r22
 1757 0026 6A01      		movw r12,r20
 1758 0028 5901      		movw r10,r18
 1759               	.LVL113:
 1760               	.LBB302:
 1761               	.LBB303:
 1762               	.LBB304:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1763               		.loc 4 348 0
 1764               	/* #APP */
 1765               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 1766 002a F894      		cli
 1767               	 ;  0 "" 2
 1768               	/* #NOAPP */
 1769               	.LBE304:
 1770               	.LBE303:
 1771               	.LBE302:
 1772               	.LBB305:
 1773               	.LBB306:
 1774               	.LBB307:
 1775               	.LBB308:
 1776               	.LBB309:
 1777               		.loc 5 92 0
 1778 002c 4090 8400 		lds r4,132
 1779 0030 5090 8500 		lds r5,132+1
 1780               	.LBE309:
 1781               	.LBE308:
 1782               	.LBE307:
 1783               	.LBE306:
 1784               	.LBE305:
 726:ChibiOS/os/hal/src/hal_buffers.c ****   size_t w = 0;
 727:ChibiOS/os/hal/src/hal_buffers.c ****   systime_t deadline;
 728:ChibiOS/os/hal/src/hal_buffers.c **** 
 729:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 730:ChibiOS/os/hal/src/hal_buffers.c **** 
 731:ChibiOS/os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 732:ChibiOS/os/hal/src/hal_buffers.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 1785               		.loc 1 732 0
 1786 0034 420E      		add r4,r18
 1787 0036 531E      		adc r5,r19
 1788               	.LVL114:
 726:ChibiOS/os/hal/src/hal_buffers.c ****   size_t w = 0;
 1789               		.loc 1 726 0
 1790 0038 612C      		mov r6,__zero_reg__
 1791 003a 712C      		mov r7,__zero_reg__
 1792               	.LBB310:
 1793               	.LBB311:
 733:ChibiOS/os/hal/src/hal_buffers.c **** 
 734:ChibiOS/os/hal/src/hal_buffers.c ****   while (true) {
 735:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size;
 736:ChibiOS/os/hal/src/hal_buffers.c **** 
 737:ChibiOS/os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 738:ChibiOS/os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 739:ChibiOS/os/hal/src/hal_buffers.c ****       msg_t msg;
 740:ChibiOS/os/hal/src/hal_buffers.c **** 
 741:ChibiOS/os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 742:ChibiOS/os/hal/src/hal_buffers.c ****          deadline.*/
 743:ChibiOS/os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 1794               		.loc 1 743 0
 1795 003c 4901      		movw r8,r18
 1796 003e 21E0      		ldi r18,1
 1797 0040 821A      		sub r8,r18
 1798 0042 9108      		sbc r9,__zero_reg__
 1799               	.LVL115:
 1800               	.LBE311:
 744:ChibiOS/os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 745:ChibiOS/os/hal/src/hal_buffers.c ****       }
 746:ChibiOS/os/hal/src/hal_buffers.c ****       else {
 747:ChibiOS/os/hal/src/hal_buffers.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 748:ChibiOS/os/hal/src/hal_buffers.c **** 
 749:ChibiOS/os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 750:ChibiOS/os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 751:ChibiOS/os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 752:ChibiOS/os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 753:ChibiOS/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 754:ChibiOS/os/hal/src/hal_buffers.c ****           return w;
 755:ChibiOS/os/hal/src/hal_buffers.c ****         }
 756:ChibiOS/os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 757:ChibiOS/os/hal/src/hal_buffers.c ****       }
 758:ChibiOS/os/hal/src/hal_buffers.c **** 
 759:ChibiOS/os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 760:ChibiOS/os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 761:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 762:ChibiOS/os/hal/src/hal_buffers.c ****         return w;
 763:ChibiOS/os/hal/src/hal_buffers.c ****       }
 764:ChibiOS/os/hal/src/hal_buffers.c ****     }
 765:ChibiOS/os/hal/src/hal_buffers.c **** 
 766:ChibiOS/os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 767:ChibiOS/os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 768:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 769:ChibiOS/os/hal/src/hal_buffers.c ****       size = n - w;
 770:ChibiOS/os/hal/src/hal_buffers.c ****     }
 771:ChibiOS/os/hal/src/hal_buffers.c **** 
 772:ChibiOS/os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 773:ChibiOS/os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 774:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > 64U) {
 775:ChibiOS/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 776:ChibiOS/os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, 64U);
 1801               		.loc 1 776 0
 1802 0044 80E4      		ldi r24,lo8(64)
 1803 0046 382E      		mov r3,r24
 1804               	.LVL116:
 1805 0048 00C0      		rjmp .L89
 1806               	.LVL117:
 1807               	.L92:
 1808 004a F701      		movw r30,r14
 1809 004c DC01      		movw r26,r24
 1810 004e 832D      		mov r24,r3
 1811               		0:
 1812 0050 0190      		ld r0,Z+
 1813 0052 0D92      		st X+,r0
 1814 0054 8A95      		dec r24
 1815 0056 01F4      		brne 0b
 777:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += 64U;
 1816               		.loc 1 777 0
 1817 0058 F0E4      		ldi r31,64
 1818 005a EF0E      		add r14,r31
 1819 005c F11C      		adc r15,__zero_reg__
 1820               	.LVL118:
 778:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->ptr += 64U;
 1821               		.loc 1 778 0
 1822 005e F801      		movw r30,r16
 1823 0060 8289      		ldd r24,Z+18
 1824 0062 9389      		ldd r25,Z+19
 1825 0064 805C      		subi r24,-64
 1826 0066 9F4F      		sbci r25,-1
 1827 0068 938B      		std Z+19,r25
 1828 006a 828B      		std Z+18,r24
 779:ChibiOS/os/hal/src/hal_buffers.c ****       w         += 64U;
 1829               		.loc 1 779 0
 1830 006c F0E4      		ldi r31,64
 1831 006e 6F0E      		add r6,r31
 1832 0070 711C      		adc r7,__zero_reg__
 1833               	.LVL119:
 780:ChibiOS/os/hal/src/hal_buffers.c ****     }
 781:ChibiOS/os/hal/src/hal_buffers.c ****     else {
 782:ChibiOS/os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 783:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += size;
 784:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 785:ChibiOS/os/hal/src/hal_buffers.c ****       w         += size;
 786:ChibiOS/os/hal/src/hal_buffers.c ****     }
 787:ChibiOS/os/hal/src/hal_buffers.c **** 
 788:ChibiOS/os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 789:ChibiOS/os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 1834               		.loc 1 789 0
 1835 0072 F801      		movw r30,r16
 1836 0074 2489      		ldd r18,Z+20
 1837 0076 3589      		ldd r19,Z+21
 1838 0078 8217      		cp r24,r18
 1839 007a 9307      		cpc r25,r19
 1840 007c 00F4      		brsh .L90
 1841               	.L88:
 1842               	.LBB321:
 1843               	.LBB322:
 1844               	.LBB323:
 1845               		.loc 4 371 0
 1846               	/* #APP */
 1847               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 1848 007e 7894      		sei
 1849               	 ;  0 "" 2
 1850               	/* #NOAPP */
 1851               	.LBE323:
 1852               	.LBE322:
 1853               	.LBE321:
 790:ChibiOS/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 791:ChibiOS/os/hal/src/hal_buffers.c ****     }
 792:ChibiOS/os/hal/src/hal_buffers.c **** 
 793:ChibiOS/os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 794:ChibiOS/os/hal/src/hal_buffers.c ****     osalSysUnlock();
 795:ChibiOS/os/hal/src/hal_buffers.c ****     if (w >= n) {
 1854               		.loc 1 795 0
 1855 0080 6C14      		cp r6,r12
 1856 0082 7D04      		cpc r7,r13
 1857 0084 00F4      		brsh .L83
 1858               	.L93:
 1859               	.LBB326:
 1860               	.LBB327:
 1861               	.LBB328:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 1862               		.loc 4 348 0
 1863               	/* #APP */
 1864               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 1865 0086 F894      		cli
 1866               	 ;  0 "" 2
 1867               	.LVL120:
 1868               	/* #NOAPP */
 1869               	.L89:
 1870               	.LBE328:
 1871               	.LBE327:
 1872               	.LBE326:
 738:ChibiOS/os/hal/src/hal_buffers.c ****       msg_t msg;
 1873               		.loc 1 738 0
 1874 0088 F801      		movw r30,r16
 1875 008a 8289      		ldd r24,Z+18
 1876 008c 9389      		ldd r25,Z+19
 1877 008e 0097      		sbiw r24,0
 1878 0090 01F4      		brne .+2
 1879 0092 00C0      		rjmp .L91
 1880               	.L79:
 767:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 1881               		.loc 1 767 0
 1882 0094 F801      		movw r30,r16
 1883 0096 C489      		ldd r28,Z+20
 1884 0098 D589      		ldd r29,Z+21
 1885               	.LVL121:
 768:ChibiOS/os/hal/src/hal_buffers.c ****       size = n - w;
 1886               		.loc 1 768 0
 1887 009a 9601      		movw r18,r12
 1888 009c 2619      		sub r18,r6
 1889 009e 3709      		sbc r19,r7
 1890 00a0 C81B      		sub r28,r24
 1891 00a2 D90B      		sbc r29,r25
 1892               	.LVL122:
 1893 00a4 2C17      		cp r18,r28
 1894 00a6 3D07      		cpc r19,r29
 1895 00a8 00F4      		brsh .L85
 1896 00aa E901      		movw r28,r18
 1897               	.LVL123:
 1898               	.L85:
 774:ChibiOS/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 1899               		.loc 1 774 0
 1900 00ac C134      		cpi r28,65
 1901 00ae D105      		cpc r29,__zero_reg__
 1902 00b0 00F4      		brsh .L92
 782:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += size;
 1903               		.loc 1 782 0
 1904 00b2 AE01      		movw r20,r28
 1905 00b4 B701      		movw r22,r14
 1906 00b6 0E94 0000 		call memcpy
 1907               	.LVL124:
 783:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 1908               		.loc 1 783 0
 1909 00ba EC0E      		add r14,r28
 1910 00bc FD1E      		adc r15,r29
 1911               	.LVL125:
 784:ChibiOS/os/hal/src/hal_buffers.c ****       w         += size;
 1912               		.loc 1 784 0
 1913 00be F801      		movw r30,r16
 1914 00c0 8289      		ldd r24,Z+18
 1915 00c2 9389      		ldd r25,Z+19
 1916 00c4 8C0F      		add r24,r28
 1917 00c6 9D1F      		adc r25,r29
 1918 00c8 938B      		std Z+19,r25
 1919 00ca 828B      		std Z+18,r24
 785:ChibiOS/os/hal/src/hal_buffers.c ****     }
 1920               		.loc 1 785 0
 1921 00cc 6C0E      		add r6,r28
 1922 00ce 7D1E      		adc r7,r29
 1923               	.LVL126:
 789:ChibiOS/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1924               		.loc 1 789 0
 1925 00d0 F801      		movw r30,r16
 1926 00d2 2489      		ldd r18,Z+20
 1927 00d4 3589      		ldd r19,Z+21
 1928 00d6 8217      		cp r24,r18
 1929 00d8 9307      		cpc r25,r19
 1930 00da 00F0      		brlo .L88
 1931               	.L90:
 790:ChibiOS/os/hal/src/hal_buffers.c ****     }
 1932               		.loc 1 790 0
 1933 00dc 6485      		ldd r22,Z+12
 1934 00de 7585      		ldd r23,Z+13
 1935 00e0 6250      		subi r22,2
 1936 00e2 7109      		sbc r23,__zero_reg__
 1937 00e4 C801      		movw r24,r16
 1938 00e6 0E94 0000 		call obqPostFullBufferS
 1939               	.LVL127:
 1940               	.LBB329:
 1941               	.LBB325:
 1942               	.LBB324:
 1943               		.loc 4 371 0
 1944               	/* #APP */
 1945               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 1946 00ea 7894      		sei
 1947               	 ;  0 "" 2
 1948               	/* #NOAPP */
 1949               	.LBE324:
 1950               	.LBE325:
 1951               	.LBE329:
 1952               		.loc 1 795 0
 1953 00ec 6C14      		cp r6,r12
 1954 00ee 7D04      		cpc r7,r13
 1955 00f0 00F0      		brlo .L93
 1956               	.LVL128:
 1957               	.L83:
 1958               	.LBE310:
 796:ChibiOS/os/hal/src/hal_buffers.c ****       return w;
 797:ChibiOS/os/hal/src/hal_buffers.c ****     }
 798:ChibiOS/os/hal/src/hal_buffers.c ****     osalSysLock();
 799:ChibiOS/os/hal/src/hal_buffers.c ****   }
 800:ChibiOS/os/hal/src/hal_buffers.c **** }
 1959               		.loc 1 800 0
 1960 00f2 C301      		movw r24,r6
 1961               	/* epilogue start */
 1962 00f4 DF91      		pop r29
 1963 00f6 CF91      		pop r28
 1964 00f8 1F91      		pop r17
 1965 00fa 0F91      		pop r16
 1966               	.LVL129:
 1967 00fc FF90      		pop r15
 1968 00fe EF90      		pop r14
 1969               	.LVL130:
 1970 0100 DF90      		pop r13
 1971 0102 CF90      		pop r12
 1972               	.LVL131:
 1973 0104 BF90      		pop r11
 1974 0106 AF90      		pop r10
 1975               	.LVL132:
 1976 0108 9F90      		pop r9
 1977 010a 8F90      		pop r8
 1978               	.LVL133:
 1979 010c 7F90      		pop r7
 1980 010e 6F90      		pop r6
 1981               	.LVL134:
 1982 0110 5F90      		pop r5
 1983 0112 4F90      		pop r4
 1984               	.LVL135:
 1985 0114 3F90      		pop r3
 1986 0116 0895      		ret
 1987               	.LVL136:
 1988               	.L91:
 1989               	.LBB331:
 1990               	.LBB330:
 743:ChibiOS/os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 1991               		.loc 1 743 0
 1992 0118 FEEF      		ldi r31,-2
 1993 011a 8F16      		cp r8,r31
 1994 011c FFEF      		ldi r31,-1
 1995 011e 9F06      		cpc r9,r31
 1996 0120 00F4      		brsh .L94
 1997               	.LBB312:
 1998               	.LBB313:
 1999               	.LBB314:
 2000               	.LBB315:
 2001               	.LBB316:
 2002               	.LBB317:
 2003               		.loc 5 92 0
 2004 0122 8091 8400 		lds r24,132
 2005 0126 9091 8500 		lds r25,132+1
 2006               	.LBE317:
 2007               	.LBE316:
 2008               	.LBE315:
 2009               	.LBE314:
 2010               	.LBE313:
 747:ChibiOS/os/hal/src/hal_buffers.c **** 
 2011               		.loc 1 747 0
 2012 012a B201      		movw r22,r4
 2013 012c 681B      		sub r22,r24
 2014 012e 790B      		sbc r23,r25
 2015               	.LVL137:
 752:ChibiOS/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 2016               		.loc 1 752 0
 2017 0130 A616      		cp r10,r22
 2018 0132 B706      		cpc r11,r23
 2019 0134 00F0      		brlo .L84
 756:ChibiOS/os/hal/src/hal_buffers.c ****       }
 2020               		.loc 1 756 0
 2021 0136 C801      		movw r24,r16
 2022 0138 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2023               	.LVL138:
 2024               	.LBE312:
 760:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2025               		.loc 1 760 0
 2026 013c 892B      		or r24,r25
 2027 013e 01F4      		brne .L84
 2028               	.L95:
 2029 0140 F801      		movw r30,r16
 2030 0142 8289      		ldd r24,Z+18
 2031 0144 9389      		ldd r25,Z+19
 2032               	.LVL139:
 2033 0146 00C0      		rjmp .L79
 2034               	.L94:
 744:ChibiOS/os/hal/src/hal_buffers.c ****       }
 2035               		.loc 1 744 0
 2036 0148 B501      		movw r22,r10
 2037 014a C801      		movw r24,r16
 2038 014c 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2039               	.LVL140:
 760:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2040               		.loc 1 760 0
 2041 0150 892B      		or r24,r25
 2042 0152 01F0      		breq .L95
 2043               	.LVL141:
 2044               	.L84:
 2045               	.LBB318:
 2046               	.LBB319:
 2047               	.LBB320:
 2048               		.loc 4 371 0
 2049               	/* #APP */
 2050               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 2051 0154 7894      		sei
 2052               	 ;  0 "" 2
 2053               	/* #NOAPP */
 2054               	.LBE320:
 2055               	.LBE319:
 2056               	.LBE318:
 762:ChibiOS/os/hal/src/hal_buffers.c ****       }
 2057               		.loc 1 762 0
 2058 0156 00C0      		rjmp .L83
 2059               	.LBE330:
 2060               	.LBE331:
 2061               		.cfi_endproc
 2062               	.LFE155:
 2064               		.section	.text.obqTryFlushI,"ax",@progbits
 2065               	.global	obqTryFlushI
 2067               	obqTryFlushI:
 2068               	.LFB156:
 801:ChibiOS/os/hal/src/hal_buffers.c **** 
 802:ChibiOS/os/hal/src/hal_buffers.c **** /**
 803:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 804:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 805:ChibiOS/os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 806:ChibiOS/os/hal/src/hal_buffers.c ****  *          returned instead.
 807:ChibiOS/os/hal/src/hal_buffers.c ****  *
 808:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 809:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 810:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 811:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 812:ChibiOS/os/hal/src/hal_buffers.c ****  *
 813:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 814:ChibiOS/os/hal/src/hal_buffers.c ****  */
 815:ChibiOS/os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2069               		.loc 1 815 0
 2070               		.cfi_startproc
 2071               	.LVL142:
 2072               	/* prologue: function */
 2073               	/* frame size = 0 */
 2074               	/* stack size = 0 */
 2075               	.L__stack_usage = 0
 2076 0000 FC01      		movw r30,r24
 816:ChibiOS/os/hal/src/hal_buffers.c **** 
 817:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 818:ChibiOS/os/hal/src/hal_buffers.c **** 
 819:ChibiOS/os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 820:ChibiOS/os/hal/src/hal_buffers.c ****      it is not being written.*/
 821:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2077               		.loc 1 821 0
 2078 0002 A681      		ldd r26,Z+6
 2079 0004 B781      		ldd r27,Z+7
 2080 0006 8085      		ldd r24,Z+8
 2081 0008 9185      		ldd r25,Z+9
 2082               	.LVL143:
 2083 000a A817      		cp r26,r24
 2084 000c B907      		cpc r27,r25
 2085 000e 01F0      		breq .L105
 2086               	.L104:
 822:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 823:ChibiOS/os/hal/src/hal_buffers.c **** 
 824:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > 0U) {
 825:ChibiOS/os/hal/src/hal_buffers.c **** 
 826:ChibiOS/os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 827:ChibiOS/os/hal/src/hal_buffers.c ****       *((size_t *)obqp->bwrptr) = size;
 828:ChibiOS/os/hal/src/hal_buffers.c **** 
 829:ChibiOS/os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 830:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 831:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 832:ChibiOS/os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 833:ChibiOS/os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 834:ChibiOS/os/hal/src/hal_buffers.c ****       }
 835:ChibiOS/os/hal/src/hal_buffers.c **** 
 836:ChibiOS/os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 837:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 838:ChibiOS/os/hal/src/hal_buffers.c **** 
 839:ChibiOS/os/hal/src/hal_buffers.c ****       return true;
 840:ChibiOS/os/hal/src/hal_buffers.c ****     }
 841:ChibiOS/os/hal/src/hal_buffers.c ****   }
 842:ChibiOS/os/hal/src/hal_buffers.c ****   return false;
 2087               		.loc 1 842 0
 2088 0010 80E0      		ldi r24,0
 843:ChibiOS/os/hal/src/hal_buffers.c **** }
 2089               		.loc 1 843 0
 2090 0012 0895      		ret
 2091               	.L105:
 821:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2092               		.loc 1 821 0 discriminator 1
 2093 0014 8481      		ldd r24,Z+4
 2094 0016 9581      		ldd r25,Z+5
 2095 0018 892B      		or r24,r25
 2096 001a 01F0      		breq .L104
 821:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2097               		.loc 1 821 0 is_stmt 0
 2098 001c 8289      		ldd r24,Z+18
 2099 001e 9389      		ldd r25,Z+19
 2100 0020 0097      		sbiw r24,0
 2101 0022 01F0      		breq .L104
 2102 0024 0297      		sbiw r24,2
 2103               	.LBB332:
 822:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2104               		.loc 1 822 0 is_stmt 1
 2105 0026 8A1B      		sub r24,r26
 2106 0028 9B0B      		sbc r25,r27
 2107               	.LVL144:
 824:ChibiOS/os/hal/src/hal_buffers.c **** 
 2108               		.loc 1 824 0
 2109 002a 01F0      		breq .L104
 827:ChibiOS/os/hal/src/hal_buffers.c **** 
 2110               		.loc 1 827 0
 2111 002c 1196      		adiw r26,1
 2112 002e 9C93      		st X,r25
 2113 0030 8E93      		st -X,r24
 830:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2114               		.loc 1 830 0
 2115 0032 8481      		ldd r24,Z+4
 2116 0034 9581      		ldd r25,Z+5
 2117               	.LVL145:
 2118 0036 0197      		sbiw r24,1
 2119 0038 9583      		std Z+5,r25
 2120 003a 8483      		std Z+4,r24
 2121               	.LVL146:
 831:ChibiOS/os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2122               		.loc 1 831 0
 2123 003c 8485      		ldd r24,Z+12
 2124 003e 9585      		ldd r25,Z+13
 2125 0040 A80F      		add r26,r24
 2126 0042 B91F      		adc r27,r25
 2127               	.LVL147:
 2128 0044 B783      		std Z+7,r27
 2129 0046 A683      		std Z+6,r26
 2130               	.LVL148:
 832:ChibiOS/os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2131               		.loc 1 832 0
 2132 0048 8285      		ldd r24,Z+10
 2133 004a 9385      		ldd r25,Z+11
 2134 004c A817      		cp r26,r24
 2135 004e B907      		cpc r27,r25
 2136 0050 00F0      		brlo .L99
 833:ChibiOS/os/hal/src/hal_buffers.c ****       }
 2137               		.loc 1 833 0
 2138 0052 8089      		ldd r24,Z+16
 2139 0054 9189      		ldd r25,Z+17
 2140 0056 9783      		std Z+7,r25
 2141 0058 8683      		std Z+6,r24
 2142               	.L99:
 837:ChibiOS/os/hal/src/hal_buffers.c **** 
 2143               		.loc 1 837 0
 2144 005a 138A      		std Z+19,__zero_reg__
 2145 005c 128A      		std Z+18,__zero_reg__
 839:ChibiOS/os/hal/src/hal_buffers.c ****     }
 2146               		.loc 1 839 0
 2147 005e 81E0      		ldi r24,lo8(1)
 2148 0060 0895      		ret
 2149               	.LBE332:
 2150               		.cfi_endproc
 2151               	.LFE156:
 2153               		.section	.text.obqFlush,"ax",@progbits
 2154               	.global	obqFlush
 2156               	obqFlush:
 2157               	.LFB157:
 844:ChibiOS/os/hal/src/hal_buffers.c **** 
 845:ChibiOS/os/hal/src/hal_buffers.c **** /**
 846:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 847:ChibiOS/os/hal/src/hal_buffers.c ****  *
 848:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 849:ChibiOS/os/hal/src/hal_buffers.c ****  *
 850:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 851:ChibiOS/os/hal/src/hal_buffers.c ****  */
 852:ChibiOS/os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2158               		.loc 1 852 0
 2159               		.cfi_startproc
 2160               	.LVL149:
 2161               	/* prologue: function */
 2162               	/* frame size = 0 */
 2163               	/* stack size = 0 */
 2164               	.L__stack_usage = 0
 2165               	.LBB333:
 2166               	.LBB334:
 2167               	.LBB335:
 348:./ChibiOS/os/rt/include/chsys.h ****   _stats_start_measure_crit_thd();
 2168               		.loc 4 348 0
 2169               	/* #APP */
 2170               	 ;  348 "./ChibiOS/os/rt/include/chsys.h" 1
 2171 0000 F894      		cli
 2172               	 ;  0 "" 2
 2173               	/* #NOAPP */
 2174               	.LBE335:
 2175               	.LBE334:
 2176               	.LBE333:
 853:ChibiOS/os/hal/src/hal_buffers.c **** 
 854:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 855:ChibiOS/os/hal/src/hal_buffers.c **** 
 856:ChibiOS/os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 857:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2177               		.loc 1 857 0
 2178 0002 FC01      		movw r30,r24
 2179 0004 6289      		ldd r22,Z+18
 2180 0006 7389      		ldd r23,Z+19
 2181 0008 6115      		cp r22,__zero_reg__
 2182 000a 7105      		cpc r23,__zero_reg__
 2183 000c 01F0      		breq .L107
 2184 000e 6250      		subi r22,2
 2185 0010 7109      		sbc r23,__zero_reg__
 2186               	.LBB336:
 858:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - (size_t)obqp->bwrptr - sizeof (size_t);
 2187               		.loc 1 858 0
 2188 0012 2681      		ldd r18,Z+6
 2189 0014 3781      		ldd r19,Z+7
 2190 0016 621B      		sub r22,r18
 2191 0018 730B      		sbc r23,r19
 2192               	.LVL150:
 859:ChibiOS/os/hal/src/hal_buffers.c **** 
 860:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2193               		.loc 1 860 0
 2194 001a 01F0      		breq .L107
 861:ChibiOS/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, size);
 2195               		.loc 1 861 0
 2196 001c 0E94 0000 		call obqPostFullBufferS
 2197               	.LVL151:
 2198               	.L107:
 2199               	.LBE336:
 2200               	.LBB337:
 2201               	.LBB338:
 2202               	.LBB339:
 2203               		.loc 4 371 0
 2204               	/* #APP */
 2205               	 ;  371 "./ChibiOS/os/rt/include/chsys.h" 1
 2206 0020 7894      		sei
 2207               	 ;  0 "" 2
 2208               	/* #NOAPP */
 2209 0022 0895      		ret
 2210               	.LBE339:
 2211               	.LBE338:
 2212               	.LBE337:
 2213               		.cfi_endproc
 2214               	.LFE157:
 2216               		.text
 2217               	.Letext0:
 2218               		.file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gc
 2219               		.file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 2220               		.file 8 "./ChibiOS/os/rt/ports/AVR/compilers/GCC/chtypes.h"
 2221               		.file 9 "./ChibiOS/os/rt/include/chsystypes.h"
 2222               		.file 10 "./ChibiOS/os/rt/ports/AVR/chcore.h"
 2223               		.file 11 "./ChibiOS/os/rt/include/chsem.h"
 2224               		.file 12 "./ChibiOS/os/rt/include/chmtx.h"
 2225               		.file 13 "./ChibiOS/os/hal/include/hal_buffers.h"
 2226               		.file 14 "./ChibiOS/os/rt/ports/AVR/chcore_timer.h"
 2227               		.file 15 "./ChibiOS/os/rt/include/chvt.h"
 2228               		.file 16 "./ChibiOS/os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:00000000 hal_buffers.c
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:2      *ABS*:0000003e __SP_H__
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:3      *ABS*:0000003d __SP_L__
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:4      *ABS*:0000003f __SREG__
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:13     .text.ibqObjectInit:00000000 ibqObjectInit
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:117    .text.ibqResetI:00000000 ibqResetI
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:163    .text.ibqGetEmptyBufferI:00000000 ibqGetEmptyBufferI
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:204    .text.ibqPostFullBufferI:00000000 ibqPostFullBufferI
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:265    .text.ibqGetFullBufferTimeoutS:00000000 ibqGetFullBufferTimeoutS
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:356    .text.ibqGetFullBufferTimeout:00000000 ibqGetFullBufferTimeout
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:401    .text.ibqReleaseEmptyBufferS:00000000 ibqReleaseEmptyBufferS
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:479    .text.ibqReleaseEmptyBuffer:00000000 ibqReleaseEmptyBuffer
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:522    .text.ibqGetTimeout:00000000 ibqGetTimeout
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:655    .text.ibqReadTimeout:00000000 ibqReadTimeout
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1042   .text.obqObjectInit:00000000 obqObjectInit
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1144   .text.obqResetI:00000000 obqResetI
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1191   .text.obqGetFullBufferI:00000000 obqGetFullBufferI
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1239   .text.obqReleaseEmptyBufferI:00000000 obqReleaseEmptyBufferI
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1294   .text.obqGetEmptyBufferTimeoutS:00000000 obqGetEmptyBufferTimeoutS
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1384   .text.obqGetEmptyBufferTimeout:00000000 obqGetEmptyBufferTimeout
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1428   .text.obqPostFullBufferS:00000000 obqPostFullBufferS
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1510   .text.obqPostFullBuffer:00000000 obqPostFullBuffer
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1553   .text.obqPutTimeout:00000000 obqPutTimeout
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:1678   .text.obqWriteTimeout:00000000 obqWriteTimeout
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:2067   .text.obqTryFlushI:00000000 obqTryFlushI
C:\Users\Noah\AppData\Local\Temp\ccqUPJQz.s:2156   .text.obqFlush:00000000 obqFlush

UNDEFINED SYMBOLS
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy
