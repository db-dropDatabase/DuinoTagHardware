   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB53:
  15               		.file 1 "ChibiOS/os/hal/src/hal_buffers.c"
   1:ChibiOS/os/hal/src/hal_buffers.c **** /*
   2:ChibiOS/os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:ChibiOS/os/hal/src/hal_buffers.c **** 
   4:ChibiOS/os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:ChibiOS/os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:ChibiOS/os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:ChibiOS/os/hal/src/hal_buffers.c **** 
   8:ChibiOS/os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:ChibiOS/os/hal/src/hal_buffers.c **** 
  10:ChibiOS/os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:ChibiOS/os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:ChibiOS/os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:ChibiOS/os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:ChibiOS/os/hal/src/hal_buffers.c ****     limitations under the License.
  15:ChibiOS/os/hal/src/hal_buffers.c **** */
  16:ChibiOS/os/hal/src/hal_buffers.c **** 
  17:ChibiOS/os/hal/src/hal_buffers.c **** /**
  18:ChibiOS/os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:ChibiOS/os/hal/src/hal_buffers.c ****  *
  21:ChibiOS/os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:ChibiOS/os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:ChibiOS/os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:ChibiOS/os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:ChibiOS/os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:ChibiOS/os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:ChibiOS/os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:ChibiOS/os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:ChibiOS/os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:ChibiOS/os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:ChibiOS/os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  32:ChibiOS/os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:ChibiOS/os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:ChibiOS/os/hal/src/hal_buffers.c ****  *            together.
  35:ChibiOS/os/hal/src/hal_buffers.c ****  *          .
  36:ChibiOS/os/hal/src/hal_buffers.c ****  * @{
  37:ChibiOS/os/hal/src/hal_buffers.c ****  */
  38:ChibiOS/os/hal/src/hal_buffers.c **** 
  39:ChibiOS/os/hal/src/hal_buffers.c **** #include <string.h>
  40:ChibiOS/os/hal/src/hal_buffers.c **** 
  41:ChibiOS/os/hal/src/hal_buffers.c **** #include "hal.h"
  42:ChibiOS/os/hal/src/hal_buffers.c **** 
  43:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:ChibiOS/os/hal/src/hal_buffers.c **** 
  47:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:ChibiOS/os/hal/src/hal_buffers.c **** 
  51:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:ChibiOS/os/hal/src/hal_buffers.c **** 
  55:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:ChibiOS/os/hal/src/hal_buffers.c **** 
  59:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:ChibiOS/os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:ChibiOS/os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:ChibiOS/os/hal/src/hal_buffers.c **** 
  63:ChibiOS/os/hal/src/hal_buffers.c **** /**
  64:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:ChibiOS/os/hal/src/hal_buffers.c ****  *
  66:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  68:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  69:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  70:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  71:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  72:ChibiOS/os/hal/src/hal_buffers.c ****  *
  73:ChibiOS/os/hal/src/hal_buffers.c ****  * @init
  74:ChibiOS/os/hal/src/hal_buffers.c ****  */
  75:ChibiOS/os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
  76:ChibiOS/os/hal/src/hal_buffers.c ****                    size_t size, size_t n,
  77:ChibiOS/os/hal/src/hal_buffers.c ****                    bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 EF92      		push r14
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 14, -2
  23 0002 FF92      		push r15
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 15, -3
  27 0004 0F93      		push r16
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 16, -4
  31 0006 1F93      		push r17
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 17, -5
  35               	/* prologue: function */
  36               	/* frame size = 0 */
  37               	/* stack size = 4 */
  38               	.L__stack_usage = 4
  39 0008 FC01      		movw r30,r24
  40               	.LVL1:
  41               	.LBB159:
  42               	.LBB160:
  43               		.file 2 "ChibiOS/os/hal/osal/nil/osal.h"
   1:ChibiOS/os/hal/osal/nil/osal.h **** /*
   2:ChibiOS/os/hal/osal/nil/osal.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:ChibiOS/os/hal/osal/nil/osal.h **** 
   4:ChibiOS/os/hal/osal/nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:ChibiOS/os/hal/osal/nil/osal.h ****     you may not use this file except in compliance with the License.
   6:ChibiOS/os/hal/osal/nil/osal.h ****     You may obtain a copy of the License at
   7:ChibiOS/os/hal/osal/nil/osal.h **** 
   8:ChibiOS/os/hal/osal/nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:ChibiOS/os/hal/osal/nil/osal.h **** 
  10:ChibiOS/os/hal/osal/nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:ChibiOS/os/hal/osal/nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:ChibiOS/os/hal/osal/nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:ChibiOS/os/hal/osal/nil/osal.h ****     See the License for the specific language governing permissions and
  14:ChibiOS/os/hal/osal/nil/osal.h ****     limitations under the License.
  15:ChibiOS/os/hal/osal/nil/osal.h **** */
  16:ChibiOS/os/hal/osal/nil/osal.h **** 
  17:ChibiOS/os/hal/osal/nil/osal.h **** /**
  18:ChibiOS/os/hal/osal/nil/osal.h ****  * @file    osal.h
  19:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   OSAL module header.
  20:ChibiOS/os/hal/osal/nil/osal.h ****  *
  21:ChibiOS/os/hal/osal/nil/osal.h ****  * @addtogroup OSAL
  22:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  23:ChibiOS/os/hal/osal/nil/osal.h ****  */
  24:ChibiOS/os/hal/osal/nil/osal.h **** 
  25:ChibiOS/os/hal/osal/nil/osal.h **** #ifndef _OSAL_H_
  26:ChibiOS/os/hal/osal/nil/osal.h **** #define _OSAL_H_
  27:ChibiOS/os/hal/osal/nil/osal.h **** 
  28:ChibiOS/os/hal/osal/nil/osal.h **** #include <stddef.h>
  29:ChibiOS/os/hal/osal/nil/osal.h **** #include <stdint.h>
  30:ChibiOS/os/hal/osal/nil/osal.h **** #include <stdbool.h>
  31:ChibiOS/os/hal/osal/nil/osal.h **** 
  32:ChibiOS/os/hal/osal/nil/osal.h **** #include "nil.h"
  33:ChibiOS/os/hal/osal/nil/osal.h **** 
  34:ChibiOS/os/hal/osal/nil/osal.h **** #if defined(__SPC5_HAL__)
  35:ChibiOS/os/hal/osal/nil/osal.h **** #include "platform.h"
  36:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  37:ChibiOS/os/hal/osal/nil/osal.h **** 
  38:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
  39:ChibiOS/os/hal/osal/nil/osal.h **** /* Module constants.                                                         */
  40:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
  41:ChibiOS/os/hal/osal/nil/osal.h **** 
  42:ChibiOS/os/hal/osal/nil/osal.h **** /**
  43:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Common constants
  44:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  45:ChibiOS/os/hal/osal/nil/osal.h ****  */
  46:ChibiOS/os/hal/osal/nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  47:ChibiOS/os/hal/osal/nil/osal.h **** #define FALSE                               0
  48:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  49:ChibiOS/os/hal/osal/nil/osal.h **** 
  50:ChibiOS/os/hal/osal/nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  51:ChibiOS/os/hal/osal/nil/osal.h **** #define TRUE                                (!FALSE)
  52:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  53:ChibiOS/os/hal/osal/nil/osal.h **** 
  54:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_SUCCESS                        FALSE
  55:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_FAILED                         TRUE
  56:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
  57:ChibiOS/os/hal/osal/nil/osal.h **** 
  58:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
  59:ChibiOS/os/hal/osal/nil/osal.h **** /**
  60:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Messages
  61:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  62:ChibiOS/os/hal/osal/nil/osal.h ****  */
  63:ChibiOS/os/hal/osal/nil/osal.h **** #define MSG_OK                              RDY_OK
  64:ChibiOS/os/hal/osal/nil/osal.h **** #define MSG_RESET                           RDY_RESET
  65:ChibiOS/os/hal/osal/nil/osal.h **** #define MSG_TIMEOUT                         RDY_TIMEOUT
  66:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
  67:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  68:ChibiOS/os/hal/osal/nil/osal.h **** 
  69:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
  70:ChibiOS/os/hal/osal/nil/osal.h **** /**
  71:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Special time constants
  72:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  73:ChibiOS/os/hal/osal/nil/osal.h ****  */
  74:ChibiOS/os/hal/osal/nil/osal.h **** #define TIME_IMMEDIATE                      ((systime_t)0)
  75:ChibiOS/os/hal/osal/nil/osal.h **** #define TIME_INFINITE                       ((systime_t)-1)
  76:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
  77:ChibiOS/os/hal/osal/nil/osal.h **** #endif
  78:ChibiOS/os/hal/osal/nil/osal.h **** 
  79:ChibiOS/os/hal/osal/nil/osal.h **** /**
  80:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Systick modes.
  81:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  82:ChibiOS/os/hal/osal/nil/osal.h ****  */
  83:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  84:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  85:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  86:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
  87:ChibiOS/os/hal/osal/nil/osal.h **** 
  88:ChibiOS/os/hal/osal/nil/osal.h **** /**
  89:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Systick parameters.
  90:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
  91:ChibiOS/os/hal/osal/nil/osal.h ****  */
  92:ChibiOS/os/hal/osal/nil/osal.h **** /**
  93:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  94:ChibiOS/os/hal/osal/nil/osal.h ****  */
  95:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_RESOLUTION                  NIL_CFG_ST_RESOLUTION
  96:ChibiOS/os/hal/osal/nil/osal.h **** 
  97:ChibiOS/os/hal/osal/nil/osal.h **** /**
  98:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Required systick frequency or resolution.
  99:ChibiOS/os/hal/osal/nil/osal.h ****  */
 100:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_FREQUENCY                   NIL_CFG_ST_FREQUENCY
 101:ChibiOS/os/hal/osal/nil/osal.h **** 
 102:ChibiOS/os/hal/osal/nil/osal.h **** /**
 103:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 104:ChibiOS/os/hal/osal/nil/osal.h ****  */
 105:ChibiOS/os/hal/osal/nil/osal.h **** #if (NIL_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 106:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 107:ChibiOS/os/hal/osal/nil/osal.h **** #else
 108:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 109:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 110:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 111:ChibiOS/os/hal/osal/nil/osal.h **** 
 112:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 113:ChibiOS/os/hal/osal/nil/osal.h **** /* Module pre-compile time settings.                                         */
 114:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 115:ChibiOS/os/hal/osal/nil/osal.h **** 
 116:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 117:ChibiOS/os/hal/osal/nil/osal.h **** /* Derived constants and error checks.                                       */
 118:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 119:ChibiOS/os/hal/osal/nil/osal.h **** 
 120:ChibiOS/os/hal/osal/nil/osal.h **** #if NIL_CFG_USE_EVENTS == FALSE
 121:ChibiOS/os/hal/osal/nil/osal.h **** #error "OSAL requires NIL_CFG_USE_EVENTS=TRUE"
 122:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 123:ChibiOS/os/hal/osal/nil/osal.h **** 
 124:ChibiOS/os/hal/osal/nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 125:ChibiOS/os/hal/osal/nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 126:ChibiOS/os/hal/osal/nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 127:ChibiOS/os/hal/osal/nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 128:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 129:ChibiOS/os/hal/osal/nil/osal.h **** 
 130:ChibiOS/os/hal/osal/nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32)
 131:ChibiOS/os/hal/osal/nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16 or 32"
 132:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 133:ChibiOS/os/hal/osal/nil/osal.h **** 
 134:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 135:ChibiOS/os/hal/osal/nil/osal.h **** /* Module data structures and types.                                         */
 136:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 137:ChibiOS/os/hal/osal/nil/osal.h **** 
 138:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 139:ChibiOS/os/hal/osal/nil/osal.h **** /**
 140:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a system status word.
 141:ChibiOS/os/hal/osal/nil/osal.h ****  */
 142:ChibiOS/os/hal/osal/nil/osal.h **** typedef uint32_t syssts_t;
 143:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 144:ChibiOS/os/hal/osal/nil/osal.h **** 
 145:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 146:ChibiOS/os/hal/osal/nil/osal.h **** /**
 147:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a message.
 148:ChibiOS/os/hal/osal/nil/osal.h ****  */
 149:ChibiOS/os/hal/osal/nil/osal.h **** typedef int32_t msg_t;
 150:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 151:ChibiOS/os/hal/osal/nil/osal.h **** 
 152:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 153:ChibiOS/os/hal/osal/nil/osal.h **** /**
 154:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of system time counter.
 155:ChibiOS/os/hal/osal/nil/osal.h ****  */
 156:ChibiOS/os/hal/osal/nil/osal.h **** typedef uint32_t systime_t;
 157:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 158:ChibiOS/os/hal/osal/nil/osal.h **** 
 159:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 160:ChibiOS/os/hal/osal/nil/osal.h **** /**
 161:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of realtime counter.
 162:ChibiOS/os/hal/osal/nil/osal.h ****  */
 163:ChibiOS/os/hal/osal/nil/osal.h **** typedef uint32_t rtcnt_t;
 164:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 165:ChibiOS/os/hal/osal/nil/osal.h **** 
 166:ChibiOS/os/hal/osal/nil/osal.h **** #if 0
 167:ChibiOS/os/hal/osal/nil/osal.h **** /**
 168:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a thread reference.
 169:ChibiOS/os/hal/osal/nil/osal.h ****  */
 170:ChibiOS/os/hal/osal/nil/osal.h **** typedef thread_t * thread_reference_t;
 171:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 172:ChibiOS/os/hal/osal/nil/osal.h **** 
 173:ChibiOS/os/hal/osal/nil/osal.h **** /**
 174:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of an event flags object.
 175:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 176:ChibiOS/os/hal/osal/nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 177:ChibiOS/os/hal/osal/nil/osal.h ****  *          an entirely different way.
 178:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 179:ChibiOS/os/hal/osal/nil/osal.h ****  *          API and are implementation-dependent.
 180:ChibiOS/os/hal/osal/nil/osal.h ****  */
 181:ChibiOS/os/hal/osal/nil/osal.h **** typedef struct event_source event_source_t;
 182:ChibiOS/os/hal/osal/nil/osal.h **** 
 183:ChibiOS/os/hal/osal/nil/osal.h **** /**
 184:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of an event source callback.
 185:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 186:ChibiOS/os/hal/osal/nil/osal.h ****  *          exclusively as an example and for convenience.
 187:ChibiOS/os/hal/osal/nil/osal.h ****  */
 188:ChibiOS/os/hal/osal/nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *p);
 189:ChibiOS/os/hal/osal/nil/osal.h **** 
 190:ChibiOS/os/hal/osal/nil/osal.h **** /**
 191:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of an event flags mask.
 192:ChibiOS/os/hal/osal/nil/osal.h ****  */
 193:ChibiOS/os/hal/osal/nil/osal.h **** typedef uint32_t eventflags_t;
 194:ChibiOS/os/hal/osal/nil/osal.h **** 
 195:ChibiOS/os/hal/osal/nil/osal.h **** /**
 196:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Events source object.
 197:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 198:ChibiOS/os/hal/osal/nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 199:ChibiOS/os/hal/osal/nil/osal.h ****  *          an entirely different way.
 200:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 201:ChibiOS/os/hal/osal/nil/osal.h ****  *          API and are implementation-dependent.
 202:ChibiOS/os/hal/osal/nil/osal.h ****  */
 203:ChibiOS/os/hal/osal/nil/osal.h **** struct event_source {
 204:ChibiOS/os/hal/osal/nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 205:ChibiOS/os/hal/osal/nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 206:ChibiOS/os/hal/osal/nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 207:ChibiOS/os/hal/osal/nil/osal.h **** };
 208:ChibiOS/os/hal/osal/nil/osal.h **** 
 209:ChibiOS/os/hal/osal/nil/osal.h **** /**
 210:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a mutex.
 211:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then them
 212:ChibiOS/os/hal/osal/nil/osal.h ****  *          mechanism can be simulated.
 213:ChibiOS/os/hal/osal/nil/osal.h ****  */
 214:ChibiOS/os/hal/osal/nil/osal.h **** typedef semaphore_t mutex_t;
 215:ChibiOS/os/hal/osal/nil/osal.h **** 
 216:ChibiOS/os/hal/osal/nil/osal.h **** /**
 217:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Type of a thread queue.
 218:ChibiOS/os/hal/osal/nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 219:ChibiOS/os/hal/osal/nil/osal.h ****  *          can be dequeued one at time or all together.
 220:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 221:ChibiOS/os/hal/osal/nil/osal.h ****  *          because there are no real threads.
 222:ChibiOS/os/hal/osal/nil/osal.h ****  */
 223:ChibiOS/os/hal/osal/nil/osal.h **** typedef struct {
 224:ChibiOS/os/hal/osal/nil/osal.h ****   semaphore_t   sem;
 225:ChibiOS/os/hal/osal/nil/osal.h **** } threads_queue_t;
 226:ChibiOS/os/hal/osal/nil/osal.h **** 
 227:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 228:ChibiOS/os/hal/osal/nil/osal.h **** /* Module macros.                                                            */
 229:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 230:ChibiOS/os/hal/osal/nil/osal.h **** 
 231:ChibiOS/os/hal/osal/nil/osal.h **** /**
 232:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Debug related macros
 233:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 234:ChibiOS/os/hal/osal/nil/osal.h ****  */
 235:ChibiOS/os/hal/osal/nil/osal.h **** /**
 236:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Condition assertion.
 237:ChibiOS/os/hal/osal/nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 238:ChibiOS/os/hal/osal/nil/osal.h ****  *          message and halts.
 239:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 240:ChibiOS/os/hal/osal/nil/osal.h ****  *          switch is enabled.
 241:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 242:ChibiOS/os/hal/osal/nil/osal.h ****  *          comment in the code about the assertion.
 243:ChibiOS/os/hal/osal/nil/osal.h ****  *
 244:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 245:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] remark    a remark string
 246:ChibiOS/os/hal/osal/nil/osal.h ****  *
 247:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 248:ChibiOS/os/hal/osal/nil/osal.h ****  */
 249:ChibiOS/os/hal/osal/nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 250:ChibiOS/os/hal/osal/nil/osal.h **** 
 251:ChibiOS/os/hal/osal/nil/osal.h **** /**
 252:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Function parameters check.
 253:ChibiOS/os/hal/osal/nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 254:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 255:ChibiOS/os/hal/osal/nil/osal.h ****  *          is enabled.
 256:ChibiOS/os/hal/osal/nil/osal.h ****  *
 257:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 258:ChibiOS/os/hal/osal/nil/osal.h ****  *
 259:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 260:ChibiOS/os/hal/osal/nil/osal.h ****  */
 261:ChibiOS/os/hal/osal/nil/osal.h **** #define osalDbgCheck(c) chDbgAssert(c, "parameter check")
 262:ChibiOS/os/hal/osal/nil/osal.h **** 
 263:ChibiOS/os/hal/osal/nil/osal.h **** /**
 264:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   I-Class state check.
 265:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 266:ChibiOS/os/hal/osal/nil/osal.h ****  */
 267:ChibiOS/os/hal/osal/nil/osal.h **** #define osalDbgCheckClassI() /*chDbgCheckClassI()*/
 268:ChibiOS/os/hal/osal/nil/osal.h **** 
 269:ChibiOS/os/hal/osal/nil/osal.h **** /**
 270:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   S-Class state check.
 271:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 272:ChibiOS/os/hal/osal/nil/osal.h ****  */
 273:ChibiOS/os/hal/osal/nil/osal.h **** #define osalDbgCheckClassS() /*chDbgCheckClassS()*/
 274:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 275:ChibiOS/os/hal/osal/nil/osal.h **** 
 276:ChibiOS/os/hal/osal/nil/osal.h **** /**
 277:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    IRQ service routines wrappers
 278:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 279:ChibiOS/os/hal/osal/nil/osal.h ****  */
 280:ChibiOS/os/hal/osal/nil/osal.h **** /**
 281:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Priority level verification macro.
 282:ChibiOS/os/hal/osal/nil/osal.h ****  */
 283:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 284:ChibiOS/os/hal/osal/nil/osal.h **** 
 285:ChibiOS/os/hal/osal/nil/osal.h **** /**
 286:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   IRQ prologue code.
 287:ChibiOS/os/hal/osal/nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 288:ChibiOS/os/hal/osal/nil/osal.h ****  */
 289:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 290:ChibiOS/os/hal/osal/nil/osal.h **** 
 291:ChibiOS/os/hal/osal/nil/osal.h **** /**
 292:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   IRQ epilogue code.
 293:ChibiOS/os/hal/osal/nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 294:ChibiOS/os/hal/osal/nil/osal.h ****  */
 295:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 296:ChibiOS/os/hal/osal/nil/osal.h **** 
 297:ChibiOS/os/hal/osal/nil/osal.h **** /**
 298:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   IRQ handler function declaration.
 299:ChibiOS/os/hal/osal/nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 300:ChibiOS/os/hal/osal/nil/osal.h ****  *
 301:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 302:ChibiOS/os/hal/osal/nil/osal.h ****  */
 303:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 304:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 305:ChibiOS/os/hal/osal/nil/osal.h **** 
 306:ChibiOS/os/hal/osal/nil/osal.h **** /**
 307:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Time conversion utilities
 308:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 309:ChibiOS/os/hal/osal/nil/osal.h ****  */
 310:ChibiOS/os/hal/osal/nil/osal.h **** /**
 311:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Seconds to system ticks.
 312:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from seconds to system ticks number.
 313:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 314:ChibiOS/os/hal/osal/nil/osal.h ****  *
 315:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] sec       number of seconds
 316:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of ticks.
 317:ChibiOS/os/hal/osal/nil/osal.h ****  *
 318:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 319:ChibiOS/os/hal/osal/nil/osal.h ****  */
 320:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_S2ST(sec) S2ST(sec)
 321:ChibiOS/os/hal/osal/nil/osal.h **** 
 322:ChibiOS/os/hal/osal/nil/osal.h **** /**
 323:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Milliseconds to system ticks.
 324:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 325:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 326:ChibiOS/os/hal/osal/nil/osal.h ****  *
 327:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msec      number of milliseconds
 328:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of ticks.
 329:ChibiOS/os/hal/osal/nil/osal.h ****  *
 330:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 331:ChibiOS/os/hal/osal/nil/osal.h ****  */
 332:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_MS2ST(msec) MS2ST(msec)
 333:ChibiOS/os/hal/osal/nil/osal.h **** 
 334:ChibiOS/os/hal/osal/nil/osal.h **** /**
 335:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Microseconds to system ticks.
 336:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 337:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 338:ChibiOS/os/hal/osal/nil/osal.h ****  *
 339:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] usec      number of microseconds
 340:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of ticks.
 341:ChibiOS/os/hal/osal/nil/osal.h ****  *
 342:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 343:ChibiOS/os/hal/osal/nil/osal.h ****  */
 344:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_US2ST(usec) US2ST(usec)
 345:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 346:ChibiOS/os/hal/osal/nil/osal.h **** 
 347:ChibiOS/os/hal/osal/nil/osal.h **** /**
 348:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 349:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 350:ChibiOS/os/hal/osal/nil/osal.h ****  */
 351:ChibiOS/os/hal/osal/nil/osal.h **** /**
 352:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Seconds to realtime counter.
 353:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 354:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 355:ChibiOS/os/hal/osal/nil/osal.h ****  *
 356:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 357:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] sec       number of seconds
 358:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of cycles.
 359:ChibiOS/os/hal/osal/nil/osal.h ****  *
 360:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 361:ChibiOS/os/hal/osal/nil/osal.h ****  */
 362:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 363:ChibiOS/os/hal/osal/nil/osal.h **** 
 364:ChibiOS/os/hal/osal/nil/osal.h **** /**
 365:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 366:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 367:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 368:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 369:ChibiOS/os/hal/osal/nil/osal.h ****  *
 370:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 371:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msec      number of milliseconds
 372:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of cycles.
 373:ChibiOS/os/hal/osal/nil/osal.h ****  *
 374:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 375:ChibiOS/os/hal/osal/nil/osal.h ****  */
 376:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 377:ChibiOS/os/hal/osal/nil/osal.h **** 
 378:ChibiOS/os/hal/osal/nil/osal.h **** /**
 379:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Microseconds to realtime counter.
 380:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 381:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 382:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 383:ChibiOS/os/hal/osal/nil/osal.h ****  *
 384:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 385:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] usec      number of microseconds
 386:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The number of cycles.
 387:ChibiOS/os/hal/osal/nil/osal.h ****  *
 388:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 389:ChibiOS/os/hal/osal/nil/osal.h ****  */
 390:ChibiOS/os/hal/osal/nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 391:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 392:ChibiOS/os/hal/osal/nil/osal.h **** 
 393:ChibiOS/os/hal/osal/nil/osal.h **** /**
 394:ChibiOS/os/hal/osal/nil/osal.h ****  * @name    Sleep macros using absolute time
 395:ChibiOS/os/hal/osal/nil/osal.h ****  * @{
 396:ChibiOS/os/hal/osal/nil/osal.h ****  */
 397:ChibiOS/os/hal/osal/nil/osal.h **** /**
 398:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 399:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 400:ChibiOS/os/hal/osal/nil/osal.h ****  *          system tick clock.
 401:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 402:ChibiOS/os/hal/osal/nil/osal.h ****  *
 403:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] sec       time in seconds, must be different from zero
 404:ChibiOS/os/hal/osal/nil/osal.h ****  *
 405:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 406:ChibiOS/os/hal/osal/nil/osal.h ****  */
 407:ChibiOS/os/hal/osal/nil/osal.h **** #define osalThreadSleepSeconds(sec) osalThreadSleep(OSAL_S2ST(sec))
 408:ChibiOS/os/hal/osal/nil/osal.h **** 
 409:ChibiOS/os/hal/osal/nil/osal.h **** /**
 410:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 411:ChibiOS/os/hal/osal/nil/osal.h ****  *          milliseconds.
 412:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 413:ChibiOS/os/hal/osal/nil/osal.h ****  *          system tick clock.
 414:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 415:ChibiOS/os/hal/osal/nil/osal.h ****  *
 416:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 417:ChibiOS/os/hal/osal/nil/osal.h ****  *
 418:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 419:ChibiOS/os/hal/osal/nil/osal.h ****  */
 420:ChibiOS/os/hal/osal/nil/osal.h **** #define osalThreadSleepMilliseconds(msec) osalThreadSleep(OSAL_MS2ST(msec))
 421:ChibiOS/os/hal/osal/nil/osal.h **** 
 422:ChibiOS/os/hal/osal/nil/osal.h **** /**
 423:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 424:ChibiOS/os/hal/osal/nil/osal.h ****  *          microseconds.
 425:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 426:ChibiOS/os/hal/osal/nil/osal.h ****  *          system tick clock.
 427:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 428:ChibiOS/os/hal/osal/nil/osal.h ****  *
 429:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] usec      time in microseconds, must be different from zero
 430:ChibiOS/os/hal/osal/nil/osal.h ****  *
 431:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 432:ChibiOS/os/hal/osal/nil/osal.h ****  */
 433:ChibiOS/os/hal/osal/nil/osal.h **** #define osalThreadSleepMicroseconds(usec) osalThreadSleep(OSAL_US2ST(usec))
 434:ChibiOS/os/hal/osal/nil/osal.h **** /** @} */
 435:ChibiOS/os/hal/osal/nil/osal.h **** 
 436:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 437:ChibiOS/os/hal/osal/nil/osal.h **** /* External declarations.                                                    */
 438:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 439:ChibiOS/os/hal/osal/nil/osal.h **** 
 440:ChibiOS/os/hal/osal/nil/osal.h **** #ifdef __cplusplus
 441:ChibiOS/os/hal/osal/nil/osal.h **** extern "C" {
 442:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 443:ChibiOS/os/hal/osal/nil/osal.h ****   void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg);
 444:ChibiOS/os/hal/osal/nil/osal.h ****   void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg);
 445:ChibiOS/os/hal/osal/nil/osal.h **** #ifdef __cplusplus
 446:ChibiOS/os/hal/osal/nil/osal.h **** }
 447:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 448:ChibiOS/os/hal/osal/nil/osal.h **** 
 449:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 450:ChibiOS/os/hal/osal/nil/osal.h **** /* Module inline functions.                                                  */
 451:ChibiOS/os/hal/osal/nil/osal.h **** /*===========================================================================*/
 452:ChibiOS/os/hal/osal/nil/osal.h **** 
 453:ChibiOS/os/hal/osal/nil/osal.h **** /**
 454:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   OSAL module initialization.
 455:ChibiOS/os/hal/osal/nil/osal.h ****  *
 456:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 457:ChibiOS/os/hal/osal/nil/osal.h ****  */
 458:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalInit(void) {
 459:ChibiOS/os/hal/osal/nil/osal.h **** 
 460:ChibiOS/os/hal/osal/nil/osal.h **** }
 461:ChibiOS/os/hal/osal/nil/osal.h **** 
 462:ChibiOS/os/hal/osal/nil/osal.h **** /**
 463:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   System halt with error message.
 464:ChibiOS/os/hal/osal/nil/osal.h ****  *
 465:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] reason    the halt message pointer
 466:ChibiOS/os/hal/osal/nil/osal.h ****  *
 467:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 468:ChibiOS/os/hal/osal/nil/osal.h ****  */
 469:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 470:ChibiOS/os/hal/osal/nil/osal.h **** 
 471:ChibiOS/os/hal/osal/nil/osal.h ****   chSysHalt(reason);
 472:ChibiOS/os/hal/osal/nil/osal.h **** }
 473:ChibiOS/os/hal/osal/nil/osal.h **** 
 474:ChibiOS/os/hal/osal/nil/osal.h **** /**
 475:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Disables interrupts globally.
 476:ChibiOS/os/hal/osal/nil/osal.h ****  *
 477:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 478:ChibiOS/os/hal/osal/nil/osal.h ****  */
 479:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysDisable(void) {
 480:ChibiOS/os/hal/osal/nil/osal.h **** 
 481:ChibiOS/os/hal/osal/nil/osal.h ****   chSysDisable();
 482:ChibiOS/os/hal/osal/nil/osal.h **** }
 483:ChibiOS/os/hal/osal/nil/osal.h **** 
 484:ChibiOS/os/hal/osal/nil/osal.h **** /**
 485:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Enables interrupts globally.
 486:ChibiOS/os/hal/osal/nil/osal.h ****  *
 487:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 488:ChibiOS/os/hal/osal/nil/osal.h ****  */
 489:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysEnable(void) {
 490:ChibiOS/os/hal/osal/nil/osal.h **** 
 491:ChibiOS/os/hal/osal/nil/osal.h ****   chSysEnable();
 492:ChibiOS/os/hal/osal/nil/osal.h **** }
 493:ChibiOS/os/hal/osal/nil/osal.h **** 
 494:ChibiOS/os/hal/osal/nil/osal.h **** /**
 495:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 496:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 497:ChibiOS/os/hal/osal/nil/osal.h ****  *
 498:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 499:ChibiOS/os/hal/osal/nil/osal.h ****  */
 500:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysLock(void) {
 501:ChibiOS/os/hal/osal/nil/osal.h **** 
 502:ChibiOS/os/hal/osal/nil/osal.h ****   chSysLock();
 503:ChibiOS/os/hal/osal/nil/osal.h **** }
 504:ChibiOS/os/hal/osal/nil/osal.h **** 
 505:ChibiOS/os/hal/osal/nil/osal.h **** /**
 506:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 507:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 508:ChibiOS/os/hal/osal/nil/osal.h ****  *
 509:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 510:ChibiOS/os/hal/osal/nil/osal.h ****  */
 511:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysUnlock(void) {
 512:ChibiOS/os/hal/osal/nil/osal.h **** 
 513:ChibiOS/os/hal/osal/nil/osal.h ****   chSysUnlock();
 514:ChibiOS/os/hal/osal/nil/osal.h **** }
 515:ChibiOS/os/hal/osal/nil/osal.h **** 
 516:ChibiOS/os/hal/osal/nil/osal.h **** /**
 517:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 518:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 519:ChibiOS/os/hal/osal/nil/osal.h ****  *
 520:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 521:ChibiOS/os/hal/osal/nil/osal.h ****  */
 522:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysLockFromISR(void) {
 523:ChibiOS/os/hal/osal/nil/osal.h **** 
 524:ChibiOS/os/hal/osal/nil/osal.h ****   chSysLockFromISR();
 525:ChibiOS/os/hal/osal/nil/osal.h **** }
 526:ChibiOS/os/hal/osal/nil/osal.h **** 
 527:ChibiOS/os/hal/osal/nil/osal.h **** /**
 528:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 529:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 530:ChibiOS/os/hal/osal/nil/osal.h ****  *
 531:ChibiOS/os/hal/osal/nil/osal.h ****  * @special
 532:ChibiOS/os/hal/osal/nil/osal.h ****  */
 533:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 534:ChibiOS/os/hal/osal/nil/osal.h **** 
 535:ChibiOS/os/hal/osal/nil/osal.h ****   chSysUnlockFromISR();
 536:ChibiOS/os/hal/osal/nil/osal.h **** }
 537:ChibiOS/os/hal/osal/nil/osal.h **** 
 538:ChibiOS/os/hal/osal/nil/osal.h **** /**
 539:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 540:ChibiOS/os/hal/osal/nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 541:ChibiOS/os/hal/osal/nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 542:ChibiOS/os/hal/osal/nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 543:ChibiOS/os/hal/osal/nil/osal.h ****  *          is known.
 544:ChibiOS/os/hal/osal/nil/osal.h ****  * @post    The system is in a critical zone.
 545:ChibiOS/os/hal/osal/nil/osal.h ****  *
 546:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The previous system status, the encoding of this
 547:ChibiOS/os/hal/osal/nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 548:ChibiOS/os/hal/osal/nil/osal.h ****  *
 549:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 550:ChibiOS/os/hal/osal/nil/osal.h ****  */
 551:ChibiOS/os/hal/osal/nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 552:ChibiOS/os/hal/osal/nil/osal.h **** 
 553:ChibiOS/os/hal/osal/nil/osal.h ****   return chSysGetStatusAndLockX();
 554:ChibiOS/os/hal/osal/nil/osal.h **** }
 555:ChibiOS/os/hal/osal/nil/osal.h **** 
 556:ChibiOS/os/hal/osal/nil/osal.h **** /**
 557:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 558:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 559:ChibiOS/os/hal/osal/nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 560:ChibiOS/os/hal/osal/nil/osal.h ****  *
 561:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] sts       the system status to be restored.
 562:ChibiOS/os/hal/osal/nil/osal.h ****  *
 563:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 564:ChibiOS/os/hal/osal/nil/osal.h ****  */
 565:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 566:ChibiOS/os/hal/osal/nil/osal.h **** 
 567:ChibiOS/os/hal/osal/nil/osal.h ****   chSysRestoreStatusX(sts);
 568:ChibiOS/os/hal/osal/nil/osal.h **** }
 569:ChibiOS/os/hal/osal/nil/osal.h **** 
 570:ChibiOS/os/hal/osal/nil/osal.h **** /**
 571:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Polled delay.
 572:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 573:ChibiOS/os/hal/osal/nil/osal.h ****  *          value.
 574:ChibiOS/os/hal/osal/nil/osal.h ****  *
 575:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] cycles    number of cycles
 576:ChibiOS/os/hal/osal/nil/osal.h ****  *
 577:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 578:ChibiOS/os/hal/osal/nil/osal.h ****  */
 579:ChibiOS/os/hal/osal/nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 580:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 581:ChibiOS/os/hal/osal/nil/osal.h **** 
 582:ChibiOS/os/hal/osal/nil/osal.h ****   chSysPolledDelayX(cycles);
 583:ChibiOS/os/hal/osal/nil/osal.h **** }
 584:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 585:ChibiOS/os/hal/osal/nil/osal.h **** 
 586:ChibiOS/os/hal/osal/nil/osal.h **** /**
 587:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 588:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 589:ChibiOS/os/hal/osal/nil/osal.h ****  *          service from the HAL.
 590:ChibiOS/os/hal/osal/nil/osal.h ****  */
 591:ChibiOS/os/hal/osal/nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 592:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 593:ChibiOS/os/hal/osal/nil/osal.h **** 
 594:ChibiOS/os/hal/osal/nil/osal.h ****   chSysTimerHandlerI();
 595:ChibiOS/os/hal/osal/nil/osal.h **** }
 596:ChibiOS/os/hal/osal/nil/osal.h **** #endif
 597:ChibiOS/os/hal/osal/nil/osal.h **** 
 598:ChibiOS/os/hal/osal/nil/osal.h **** /**
 599:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 600:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 601:ChibiOS/os/hal/osal/nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 602:ChibiOS/os/hal/osal/nil/osal.h ****  *          required in this scenario.
 603:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 604:ChibiOS/os/hal/osal/nil/osal.h ****  *
 605:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 606:ChibiOS/os/hal/osal/nil/osal.h ****  */
 607:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalOsRescheduleS(void) {
 608:ChibiOS/os/hal/osal/nil/osal.h **** 
 609:ChibiOS/os/hal/osal/nil/osal.h ****   chSchRescheduleS();
 610:ChibiOS/os/hal/osal/nil/osal.h **** }
 611:ChibiOS/os/hal/osal/nil/osal.h **** 
 612:ChibiOS/os/hal/osal/nil/osal.h **** /**
 613:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Current system time.
 614:ChibiOS/os/hal/osal/nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 615:ChibiOS/os/hal/osal/nil/osal.h ****  *          invocation.
 616:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 617:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 618:ChibiOS/os/hal/osal/nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 619:ChibiOS/os/hal/osal/nil/osal.h ****  *          @p systime_t size.
 620:ChibiOS/os/hal/osal/nil/osal.h ****  *
 621:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The system time in ticks.
 622:ChibiOS/os/hal/osal/nil/osal.h ****  *
 623:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 624:ChibiOS/os/hal/osal/nil/osal.h ****  */
 625:ChibiOS/os/hal/osal/nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 626:ChibiOS/os/hal/osal/nil/osal.h **** 
 627:ChibiOS/os/hal/osal/nil/osal.h ****   return chVTGetSystemTimeX();
 628:ChibiOS/os/hal/osal/nil/osal.h **** }
 629:ChibiOS/os/hal/osal/nil/osal.h **** 
 630:ChibiOS/os/hal/osal/nil/osal.h **** /**
 631:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 632:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    When start==end then the function returns always true because the
 633:ChibiOS/os/hal/osal/nil/osal.h ****  *          whole time range is specified.
 634:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function can be called from any context.
 635:ChibiOS/os/hal/osal/nil/osal.h ****  *
 636:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] time      the time to be verified
 637:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 638:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 639:ChibiOS/os/hal/osal/nil/osal.h ****  * @retval true         current time within the specified time window.
 640:ChibiOS/os/hal/osal/nil/osal.h ****  * @retval false        current time not within the specified time window.
 641:ChibiOS/os/hal/osal/nil/osal.h ****  *
 642:ChibiOS/os/hal/osal/nil/osal.h ****  * @xclass
 643:ChibiOS/os/hal/osal/nil/osal.h ****  */
 644:ChibiOS/os/hal/osal/nil/osal.h **** static inline bool osalOsIsTimeWithinX(systime_t time,
 645:ChibiOS/os/hal/osal/nil/osal.h ****                                        systime_t start,
 646:ChibiOS/os/hal/osal/nil/osal.h ****                                        systime_t end) {
 647:ChibiOS/os/hal/osal/nil/osal.h **** 
 648:ChibiOS/os/hal/osal/nil/osal.h ****   return chVTIsTimeWithinX(time, start, end);
 649:ChibiOS/os/hal/osal/nil/osal.h **** }
 650:ChibiOS/os/hal/osal/nil/osal.h **** 
 651:ChibiOS/os/hal/osal/nil/osal.h **** /**
 652:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 653:ChibiOS/os/hal/osal/nil/osal.h ****  *
 654:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 655:ChibiOS/os/hal/osal/nil/osal.h ****  *                      handled as follow:
 656:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 657:ChibiOS/os/hal/osal/nil/osal.h ****  *                        normal time specification.
 658:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 659:ChibiOS/os/hal/osal/nil/osal.h ****  *                      .
 660:ChibiOS/os/hal/osal/nil/osal.h ****  *
 661:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 662:ChibiOS/os/hal/osal/nil/osal.h ****  */
 663:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadSleepS(systime_t time) {
 664:ChibiOS/os/hal/osal/nil/osal.h **** 
 665:ChibiOS/os/hal/osal/nil/osal.h ****   chThdSleepS(time);
 666:ChibiOS/os/hal/osal/nil/osal.h **** }
 667:ChibiOS/os/hal/osal/nil/osal.h **** 
 668:ChibiOS/os/hal/osal/nil/osal.h **** /**
 669:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 670:ChibiOS/os/hal/osal/nil/osal.h ****  *
 671:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] time      the delay in system ticks, the special values are
 672:ChibiOS/os/hal/osal/nil/osal.h ****  *                      handled as follow:
 673:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 674:ChibiOS/os/hal/osal/nil/osal.h ****  *                        normal time specification.
 675:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 676:ChibiOS/os/hal/osal/nil/osal.h ****  *                      .
 677:ChibiOS/os/hal/osal/nil/osal.h ****  *
 678:ChibiOS/os/hal/osal/nil/osal.h ****  * @api
 679:ChibiOS/os/hal/osal/nil/osal.h ****  */
 680:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadSleep(systime_t time) {
 681:ChibiOS/os/hal/osal/nil/osal.h **** 
 682:ChibiOS/os/hal/osal/nil/osal.h ****   chThdSleep(time);
 683:ChibiOS/os/hal/osal/nil/osal.h **** }
 684:ChibiOS/os/hal/osal/nil/osal.h **** 
 685:ChibiOS/os/hal/osal/nil/osal.h **** /**
 686:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 687:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 688:ChibiOS/os/hal/osal/nil/osal.h ****  *          context.
 689:ChibiOS/os/hal/osal/nil/osal.h ****  *
 690:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 691:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The wake up message.
 692:ChibiOS/os/hal/osal/nil/osal.h ****  *
 693:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 694:ChibiOS/os/hal/osal/nil/osal.h ****  */
 695:ChibiOS/os/hal/osal/nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 696:ChibiOS/os/hal/osal/nil/osal.h **** 
 697:ChibiOS/os/hal/osal/nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 698:ChibiOS/os/hal/osal/nil/osal.h **** }
 699:ChibiOS/os/hal/osal/nil/osal.h **** 
 700:ChibiOS/os/hal/osal/nil/osal.h **** /**
 701:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 702:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 703:ChibiOS/os/hal/osal/nil/osal.h ****  *          context.
 704:ChibiOS/os/hal/osal/nil/osal.h ****  *
 705:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 706:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 707:ChibiOS/os/hal/osal/nil/osal.h ****  *                      handled as follow:
 708:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 709:ChibiOS/os/hal/osal/nil/osal.h ****  *                        state.
 710:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 711:ChibiOS/os/hal/osal/nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 712:ChibiOS/os/hal/osal/nil/osal.h ****  *                        occurred.
 713:ChibiOS/os/hal/osal/nil/osal.h ****  *                      .
 714:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The wake up message.
 715:ChibiOS/os/hal/osal/nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 716:ChibiOS/os/hal/osal/nil/osal.h ****  *
 717:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 718:ChibiOS/os/hal/osal/nil/osal.h ****  */
 719:ChibiOS/os/hal/osal/nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 720:ChibiOS/os/hal/osal/nil/osal.h ****                                               systime_t timeout) {
 721:ChibiOS/os/hal/osal/nil/osal.h **** 
 722:ChibiOS/os/hal/osal/nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 723:ChibiOS/os/hal/osal/nil/osal.h **** }
 724:ChibiOS/os/hal/osal/nil/osal.h **** 
 725:ChibiOS/os/hal/osal/nil/osal.h **** /**
 726:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 727:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 728:ChibiOS/os/hal/osal/nil/osal.h ****  *          ISR context.
 729:ChibiOS/os/hal/osal/nil/osal.h ****  *
 730:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 731:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msg       the message code
 732:ChibiOS/os/hal/osal/nil/osal.h ****  *
 733:ChibiOS/os/hal/osal/nil/osal.h ****  * @iclass
 734:ChibiOS/os/hal/osal/nil/osal.h ****  */
 735:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 736:ChibiOS/os/hal/osal/nil/osal.h **** 
 737:ChibiOS/os/hal/osal/nil/osal.h ****   chThdResumeI(trp, msg);
 738:ChibiOS/os/hal/osal/nil/osal.h **** }
 739:ChibiOS/os/hal/osal/nil/osal.h **** 
 740:ChibiOS/os/hal/osal/nil/osal.h **** /**
 741:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 742:ChibiOS/os/hal/osal/nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 743:ChibiOS/os/hal/osal/nil/osal.h ****  *          context.
 744:ChibiOS/os/hal/osal/nil/osal.h ****  *
 745:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 746:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] msg       the message code
 747:ChibiOS/os/hal/osal/nil/osal.h ****  *
 748:ChibiOS/os/hal/osal/nil/osal.h ****  * @iclass
 749:ChibiOS/os/hal/osal/nil/osal.h ****  */
 750:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 751:ChibiOS/os/hal/osal/nil/osal.h **** 
 752:ChibiOS/os/hal/osal/nil/osal.h ****   chThdResumeI(trp, msg);
 753:ChibiOS/os/hal/osal/nil/osal.h ****   chSchRescheduleS();
 754:ChibiOS/os/hal/osal/nil/osal.h **** }
 755:ChibiOS/os/hal/osal/nil/osal.h **** 
 756:ChibiOS/os/hal/osal/nil/osal.h **** /**
 757:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Initializes a threads queue object.
 758:ChibiOS/os/hal/osal/nil/osal.h ****  *
 759:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 760:ChibiOS/os/hal/osal/nil/osal.h ****  *
 761:ChibiOS/os/hal/osal/nil/osal.h ****  * @init
 762:ChibiOS/os/hal/osal/nil/osal.h ****  */
 763:ChibiOS/os/hal/osal/nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 764:ChibiOS/os/hal/osal/nil/osal.h **** 
 765:ChibiOS/os/hal/osal/nil/osal.h ****   chSemObjectInit(&tqp->sem, (cnt_t)0);
  44               		.loc 2 765 0
  45 000a 1082      		st Z,__zero_reg__
  46               	.LBE160:
  47               	.LBE159:
  78:ChibiOS/os/hal/src/hal_buffers.c **** 
  79:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:ChibiOS/os/hal/src/hal_buffers.c **** 
  81:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bcounter = 0;
  48               		.loc 1 82 0
  49 000c 1282      		std Z+2,__zero_reg__
  50 000e 1182      		std Z+1,__zero_reg__
  83:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->brdptr   = bp;
  51               		.loc 1 83 0
  52 0010 7683      		std Z+6,r23
  53 0012 6583      		std Z+5,r22
  84:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bwrptr   = bp;
  54               		.loc 1 84 0
  55 0014 7483      		std Z+4,r23
  56 0016 6383      		std Z+3,r22
  85:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  57               		.loc 1 85 0
  58 0018 4E5F      		subi r20,-2
  59 001a 5F4F      		sbci r21,-1
  60               	.LVL2:
  61 001c 429F      		mul r20,r18
  62 001e C001      		movw r24,r0
  63 0020 439F      		mul r20,r19
  64 0022 900D      		add r25,r0
  65 0024 529F      		mul r21,r18
  66 0026 900D      		add r25,r0
  67 0028 1124      		clr r1
  68               	.LVL3:
  69 002a 860F      		add r24,r22
  70 002c 971F      		adc r25,r23
  71 002e 9087      		std Z+8,r25
  72 0030 8783      		std Z+7,r24
  86:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bsize    = size + sizeof (size_t);
  73               		.loc 1 86 0
  74 0032 5287      		std Z+10,r21
  75 0034 4187      		std Z+9,r20
  87:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bn       = n;
  76               		.loc 1 87 0
  77 0036 3487      		std Z+12,r19
  78 0038 2387      		std Z+11,r18
  88:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->buffers  = bp;
  79               		.loc 1 88 0
  80 003a 7687      		std Z+14,r23
  81 003c 6587      		std Z+13,r22
  89:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr      = NULL;
  82               		.loc 1 89 0
  83 003e 108A      		std Z+16,__zero_reg__
  84 0040 1786      		std Z+15,__zero_reg__
  90:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->top      = NULL;
  85               		.loc 1 90 0
  86 0042 128A      		std Z+18,__zero_reg__
  87 0044 118A      		std Z+17,__zero_reg__
  91:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->notify   = infy;
  88               		.loc 1 91 0
  89 0046 148B      		std Z+20,r17
  90 0048 038B      		std Z+19,r16
  92:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->link     = link;
  91               		.loc 1 92 0
  92 004a F68A      		std Z+22,r15
  93 004c E58A      		std Z+21,r14
  94               	/* epilogue start */
  93:ChibiOS/os/hal/src/hal_buffers.c **** }
  95               		.loc 1 93 0
  96 004e 1F91      		pop r17
  97 0050 0F91      		pop r16
  98               	.LVL4:
  99 0052 FF90      		pop r15
 100 0054 EF90      		pop r14
 101               	.LVL5:
 102 0056 0895      		ret
 103               		.cfi_endproc
 104               	.LFE53:
 106               		.section	.text.ibqResetI,"ax",@progbits
 107               	.global	ibqResetI
 109               	ibqResetI:
 110               	.LFB54:
  94:ChibiOS/os/hal/src/hal_buffers.c **** 
  95:ChibiOS/os/hal/src/hal_buffers.c **** /**
  96:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  97:ChibiOS/os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  98:ChibiOS/os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
  99:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 100:ChibiOS/os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 101:ChibiOS/os/hal/src/hal_buffers.c ****  *
 102:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 103:ChibiOS/os/hal/src/hal_buffers.c ****  *
 104:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 105:ChibiOS/os/hal/src/hal_buffers.c ****  */
 106:ChibiOS/os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 111               		.loc 1 106 0
 112               		.cfi_startproc
 113               	.LVL6:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
 116               	/* stack size = 0 */
 117               	.L__stack_usage = 0
 118 0000 FC01      		movw r30,r24
 107:ChibiOS/os/hal/src/hal_buffers.c **** 
 108:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 109:ChibiOS/os/hal/src/hal_buffers.c **** 
 110:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bcounter = 0;
 119               		.loc 1 110 0
 120 0002 1282      		std Z+2,__zero_reg__
 121 0004 1182      		std Z+1,__zero_reg__
 111:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->brdptr   = ibqp->buffers;
 122               		.loc 1 111 0
 123 0006 8585      		ldd r24,Z+13
 124 0008 9685      		ldd r25,Z+14
 125               	.LVL7:
 126 000a 9683      		std Z+6,r25
 127 000c 8583      		std Z+5,r24
 112:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bwrptr   = ibqp->buffers;
 128               		.loc 1 112 0
 129 000e 9483      		std Z+4,r25
 130 0010 8383      		std Z+3,r24
 113:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr      = NULL;
 131               		.loc 1 113 0
 132 0012 108A      		std Z+16,__zero_reg__
 133 0014 1786      		std Z+15,__zero_reg__
 114:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->top      = NULL;
 134               		.loc 1 114 0
 135 0016 128A      		std Z+18,__zero_reg__
 136 0018 118A      		std Z+17,__zero_reg__
 115:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 137               		.loc 1 115 0
 138 001a 6EEF      		ldi r22,lo8(-2)
 139 001c 7FEF      		ldi r23,lo8(-1)
 140 001e CF01      		movw r24,r30
 141 0020 0C94 0000 		jmp osalThreadDequeueAllI
 142               	.LVL8:
 143               		.cfi_endproc
 144               	.LFE54:
 146               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 147               	.global	ibqGetEmptyBufferI
 149               	ibqGetEmptyBufferI:
 150               	.LFB55:
 116:ChibiOS/os/hal/src/hal_buffers.c **** }
 117:ChibiOS/os/hal/src/hal_buffers.c **** 
 118:ChibiOS/os/hal/src/hal_buffers.c **** /**
 119:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 120:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 121:ChibiOS/os/hal/src/hal_buffers.c ****  *
 122:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 123:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 124:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 125:ChibiOS/os/hal/src/hal_buffers.c ****  *
 126:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 127:ChibiOS/os/hal/src/hal_buffers.c ****  */
 128:ChibiOS/os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 151               		.loc 1 128 0
 152               		.cfi_startproc
 153               	.LVL9:
 154               	/* prologue: function */
 155               	/* frame size = 0 */
 156               	/* stack size = 0 */
 157               	.L__stack_usage = 0
 158 0000 FC01      		movw r30,r24
 129:ChibiOS/os/hal/src/hal_buffers.c **** 
 130:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 131:ChibiOS/os/hal/src/hal_buffers.c **** 
 132:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 159               		.loc 1 132 0
 160 0002 2381      		ldd r18,Z+3
 161 0004 3481      		ldd r19,Z+4
 162 0006 8581      		ldd r24,Z+5
 163 0008 9681      		ldd r25,Z+6
 164               	.LVL10:
 165 000a 2817      		cp r18,r24
 166 000c 3907      		cpc r19,r25
 167 000e 01F0      		breq .L11
 168               	.L4:
 133:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 134:ChibiOS/os/hal/src/hal_buffers.c ****   }
 135:ChibiOS/os/hal/src/hal_buffers.c **** 
 136:ChibiOS/os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 169               		.loc 1 136 0
 170 0010 C901      		movw r24,r18
 171 0012 0296      		adiw r24,2
 137:ChibiOS/os/hal/src/hal_buffers.c **** }
 172               		.loc 1 137 0
 173 0014 0895      		ret
 174               	.L11:
 132:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 175               		.loc 1 132 0 discriminator 1
 176 0016 8181      		ldd r24,Z+1
 177 0018 9281      		ldd r25,Z+2
 178 001a 892B      		or r24,r25
 179 001c 01F0      		breq .L4
 133:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 180               		.loc 1 133 0
 181 001e 80E0      		ldi r24,0
 182 0020 90E0      		ldi r25,0
 183 0022 0895      		ret
 184               		.cfi_endproc
 185               	.LFE55:
 187               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 188               	.global	ibqPostFullBufferI
 190               	ibqPostFullBufferI:
 191               	.LFB56:
 138:ChibiOS/os/hal/src/hal_buffers.c **** 
 139:ChibiOS/os/hal/src/hal_buffers.c **** /**
 140:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 141:ChibiOS/os/hal/src/hal_buffers.c ****  *
 142:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 143:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 144:ChibiOS/os/hal/src/hal_buffers.c ****  *
 145:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 146:ChibiOS/os/hal/src/hal_buffers.c ****  */
 147:ChibiOS/os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 192               		.loc 1 147 0
 193               		.cfi_startproc
 194               	.LVL11:
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
 199 0000 FC01      		movw r30,r24
 148:ChibiOS/os/hal/src/hal_buffers.c **** 
 149:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 150:ChibiOS/os/hal/src/hal_buffers.c **** 
 151:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 152:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 153:ChibiOS/os/hal/src/hal_buffers.c **** 
 154:ChibiOS/os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 155:ChibiOS/os/hal/src/hal_buffers.c ****   *((size_t *)ibqp->bwrptr) = size;
 200               		.loc 1 155 0
 201 0002 A381      		ldd r26,Z+3
 202 0004 B481      		ldd r27,Z+4
 203 0006 1196      		adiw r26,1
 204 0008 7C93      		st X,r23
 205 000a 6E93      		st -X,r22
 156:ChibiOS/os/hal/src/hal_buffers.c **** 
 157:ChibiOS/os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 158:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 206               		.loc 1 158 0
 207 000c 2181      		ldd r18,Z+1
 208 000e 3281      		ldd r19,Z+2
 209 0010 2F5F      		subi r18,-1
 210 0012 3F4F      		sbci r19,-1
 211 0014 3283      		std Z+2,r19
 212 0016 2183      		std Z+1,r18
 159:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 213               		.loc 1 159 0
 214 0018 8185      		ldd r24,Z+9
 215 001a 9285      		ldd r25,Z+10
 216               	.LVL12:
 217 001c 8A0F      		add r24,r26
 218 001e 9B1F      		adc r25,r27
 219 0020 9483      		std Z+4,r25
 220 0022 8383      		std Z+3,r24
 160:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 221               		.loc 1 160 0
 222 0024 2781      		ldd r18,Z+7
 223 0026 3085      		ldd r19,Z+8
 224 0028 8217      		cp r24,r18
 225 002a 9307      		cpc r25,r19
 226 002c 00F0      		brlo .L13
 161:ChibiOS/os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 227               		.loc 1 161 0
 228 002e 8585      		ldd r24,Z+13
 229 0030 9685      		ldd r25,Z+14
 230 0032 9483      		std Z+4,r25
 231 0034 8383      		std Z+3,r24
 232               	.L13:
 162:ChibiOS/os/hal/src/hal_buffers.c ****   }
 163:ChibiOS/os/hal/src/hal_buffers.c **** 
 164:ChibiOS/os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 165:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 233               		.loc 1 165 0
 234 0036 60E0      		ldi r22,0
 235 0038 70E0      		ldi r23,0
 236               	.LVL13:
 237 003a CF01      		movw r24,r30
 238 003c 0C94 0000 		jmp osalThreadDequeueNextI
 239               	.LVL14:
 240               		.cfi_endproc
 241               	.LFE56:
 243               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 244               	.global	ibqGetFullBufferTimeoutS
 246               	ibqGetFullBufferTimeoutS:
 247               	.LFB58:
 166:ChibiOS/os/hal/src/hal_buffers.c **** }
 167:ChibiOS/os/hal/src/hal_buffers.c **** 
 168:ChibiOS/os/hal/src/hal_buffers.c **** /**
 169:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 170:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 171:ChibiOS/os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 172:ChibiOS/os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 173:ChibiOS/os/hal/src/hal_buffers.c ****  *          is empty.
 174:ChibiOS/os/hal/src/hal_buffers.c ****  *
 175:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 176:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 177:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 178:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 179:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 180:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 181:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 182:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 183:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 184:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset.
 185:ChibiOS/os/hal/src/hal_buffers.c ****  *
 186:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 187:ChibiOS/os/hal/src/hal_buffers.c ****  */
 188:ChibiOS/os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 189:ChibiOS/os/hal/src/hal_buffers.c ****                               systime_t timeout) {
 190:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 191:ChibiOS/os/hal/src/hal_buffers.c **** 
 192:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 193:ChibiOS/os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 194:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 195:ChibiOS/os/hal/src/hal_buffers.c **** 
 196:ChibiOS/os/hal/src/hal_buffers.c ****   return msg;
 197:ChibiOS/os/hal/src/hal_buffers.c **** }
 198:ChibiOS/os/hal/src/hal_buffers.c **** 
 199:ChibiOS/os/hal/src/hal_buffers.c ****   /**
 200:ChibiOS/os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 201:ChibiOS/os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 202:ChibiOS/os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 203:ChibiOS/os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 204:ChibiOS/os/hal/src/hal_buffers.c ****    *          is empty.
 205:ChibiOS/os/hal/src/hal_buffers.c ****    *
 206:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 207:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 208:ChibiOS/os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 209:ChibiOS/os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 210:ChibiOS/os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 211:ChibiOS/os/hal/src/hal_buffers.c ****    *                      .
 212:ChibiOS/os/hal/src/hal_buffers.c ****    * @return              The operation status.
 213:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 214:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 215:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset.
 216:ChibiOS/os/hal/src/hal_buffers.c ****    *
 217:ChibiOS/os/hal/src/hal_buffers.c ****    * @sclass
 218:ChibiOS/os/hal/src/hal_buffers.c ****    */
 219:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 220:ChibiOS/os/hal/src/hal_buffers.c ****                                  systime_t timeout) {
 248               		.loc 1 220 0
 249               		.cfi_startproc
 250               	.LVL15:
 251 0000 0F93      		push r16
 252               	.LCFI4:
 253               		.cfi_def_cfa_offset 3
 254               		.cfi_offset 16, -2
 255 0002 1F93      		push r17
 256               	.LCFI5:
 257               		.cfi_def_cfa_offset 4
 258               		.cfi_offset 17, -3
 259 0004 CF93      		push r28
 260               	.LCFI6:
 261               		.cfi_def_cfa_offset 5
 262               		.cfi_offset 28, -4
 263 0006 DF93      		push r29
 264               	.LCFI7:
 265               		.cfi_def_cfa_offset 6
 266               		.cfi_offset 29, -5
 267               	/* prologue: function */
 268               	/* frame size = 0 */
 269               	/* stack size = 4 */
 270               	.L__stack_usage = 4
 271 0008 EC01      		movw r28,r24
 272 000a 8B01      		movw r16,r22
 221:ChibiOS/os/hal/src/hal_buffers.c **** 
 222:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 223:ChibiOS/os/hal/src/hal_buffers.c **** 
 224:ChibiOS/os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 273               		.loc 1 224 0
 274 000c 00C0      		rjmp .L15
 275               	.LVL16:
 276               	.L17:
 277               	.LBB169:
 278               	.LBB170:
 279               	.LBB171:
 766:ChibiOS/os/hal/osal/nil/osal.h **** }
 767:ChibiOS/os/hal/osal/nil/osal.h **** 
 768:ChibiOS/os/hal/osal/nil/osal.h **** /**
 769:ChibiOS/os/hal/osal/nil/osal.h ****  * @brief   Enqueues the caller thread.
 770:ChibiOS/os/hal/osal/nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 771:ChibiOS/os/hal/osal/nil/osal.h ****  *          dequeued or the specified timeouts expires.
 772:ChibiOS/os/hal/osal/nil/osal.h ****  *
 773:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 774:ChibiOS/os/hal/osal/nil/osal.h ****  * @param[in] time      the timeout in system ticks, the special values are
 775:ChibiOS/os/hal/osal/nil/osal.h ****  *                      handled as follow:
 776:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 777:ChibiOS/os/hal/osal/nil/osal.h ****  *                        state.
 778:ChibiOS/os/hal/osal/nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 779:ChibiOS/os/hal/osal/nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 780:ChibiOS/os/hal/osal/nil/osal.h ****  *                        occurred.
 781:ChibiOS/os/hal/osal/nil/osal.h ****  *                      .
 782:ChibiOS/os/hal/osal/nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 783:ChibiOS/os/hal/osal/nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 784:ChibiOS/os/hal/osal/nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 785:ChibiOS/os/hal/osal/nil/osal.h ****  *                      specified timeout or if the function has been
 786:ChibiOS/os/hal/osal/nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 787:ChibiOS/os/hal/osal/nil/osal.h ****  *                      specification.
 788:ChibiOS/os/hal/osal/nil/osal.h ****  *
 789:ChibiOS/os/hal/osal/nil/osal.h ****  * @sclass
 790:ChibiOS/os/hal/osal/nil/osal.h ****  */
 791:ChibiOS/os/hal/osal/nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 792:ChibiOS/os/hal/osal/nil/osal.h ****                                               systime_t time) {
 793:ChibiOS/os/hal/osal/nil/osal.h **** 
 794:ChibiOS/os/hal/osal/nil/osal.h ****   return chSemWaitTimeoutS(&tqp->sem, time);
 280               		.loc 2 794 0
 281 000e B801      		movw r22,r16
 282 0010 CE01      		movw r24,r28
 283 0012 0E94 0000 		call chSemWaitTimeoutS
 284               	.LVL17:
 285               	.LBE171:
 286               	.LBE170:
 225:ChibiOS/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 226:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 287               		.loc 1 226 0
 288 0016 97FD      		sbrc r25,7
 289 0018 00C0      		rjmp .L16
 290               	.LVL18:
 291               	.L15:
 292               	.LBE169:
 224:ChibiOS/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 293               		.loc 1 224 0
 294 001a 8981      		ldd r24,Y+1
 295 001c 9A81      		ldd r25,Y+2
 296 001e 892B      		or r24,r25
 297 0020 01F0      		breq .L17
 298               	.LVL19:
 299               	.LBB172:
 300               	.LBB173:
 227:ChibiOS/os/hal/src/hal_buffers.c ****        return msg;
 228:ChibiOS/os/hal/src/hal_buffers.c ****     }
 229:ChibiOS/os/hal/src/hal_buffers.c ****   }
 230:ChibiOS/os/hal/src/hal_buffers.c **** 
 231:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 232:ChibiOS/os/hal/src/hal_buffers.c **** 
 233:ChibiOS/os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 234:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 301               		.loc 1 234 0
 302 0022 ED81      		ldd r30,Y+5
 303 0024 FE81      		ldd r31,Y+6
 304 0026 9F01      		movw r18,r30
 305 0028 2E5F      		subi r18,-2
 306 002a 3F4F      		sbci r19,-1
 307 002c 388B      		std Y+16,r19
 308 002e 2F87      		std Y+15,r18
 235:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 309               		.loc 1 235 0
 310 0030 8081      		ld r24,Z
 311 0032 9181      		ldd r25,Z+1
 312 0034 820F      		add r24,r18
 313 0036 931F      		adc r25,r19
 314 0038 9A8B      		std Y+18,r25
 315 003a 898B      		std Y+17,r24
 316 003c 80E0      		ldi r24,0
 317 003e 90E0      		ldi r25,0
 318               	.LVL20:
 319               	.L16:
 320               	/* epilogue start */
 321               	.LBE173:
 322               	.LBE172:
 236:ChibiOS/os/hal/src/hal_buffers.c **** 
 237:ChibiOS/os/hal/src/hal_buffers.c ****   return MSG_OK;
 238:ChibiOS/os/hal/src/hal_buffers.c **** }
 323               		.loc 1 238 0
 324 0040 DF91      		pop r29
 325 0042 CF91      		pop r28
 326               	.LVL21:
 327 0044 1F91      		pop r17
 328 0046 0F91      		pop r16
 329               	.LVL22:
 330 0048 0895      		ret
 331               		.cfi_endproc
 332               	.LFE58:
 334               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 335               	.global	ibqGetFullBufferTimeout
 337               	ibqGetFullBufferTimeout:
 338               	.LFB57:
 189:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 339               		.loc 1 189 0
 340               		.cfi_startproc
 341               	.LVL23:
 342               	/* prologue: function */
 343               	/* frame size = 0 */
 344               	/* stack size = 0 */
 345               	.L__stack_usage = 0
 346               	.LBB174:
 347               	.LBB175:
 348               	.LBB176:
 349               		.file 3 "ChibiOS/os/nil/ports/AVR/nilcore.h"
   1:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*
   2:ChibiOS/os/nil/ports/AVR/nilcore.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio.
   3:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
   4:ChibiOS/os/nil/ports/AVR/nilcore.h ****     This file is part of ChibiOS.
   5:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
   6:ChibiOS/os/nil/ports/AVR/nilcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   7:ChibiOS/os/nil/ports/AVR/nilcore.h ****     it under the terms of the GNU General Public License as published by
   8:ChibiOS/os/nil/ports/AVR/nilcore.h ****     the Free Software Foundation; either version 3 of the License, or
   9:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (at your option) any later version.
  10:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  11:ChibiOS/os/nil/ports/AVR/nilcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:ChibiOS/os/nil/ports/AVR/nilcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:ChibiOS/os/nil/ports/AVR/nilcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:ChibiOS/os/nil/ports/AVR/nilcore.h ****     GNU General Public License for more details.
  15:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  16:ChibiOS/os/nil/ports/AVR/nilcore.h ****     You should have received a copy of the GNU General Public License
  17:ChibiOS/os/nil/ports/AVR/nilcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:ChibiOS/os/nil/ports/AVR/nilcore.h **** */
  19:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  20:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  21:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @file    AVR/nilcore.h
  22:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   AVR port macros and structures.
  23:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
  24:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @addtogroup AVR_CORE
  25:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @{
  26:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  27:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  28:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifndef _NILCORE_H_
  29:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define _NILCORE_H_
  30:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  31:ChibiOS/os/nil/ports/AVR/nilcore.h **** #include <avr/io.h>
  32:ChibiOS/os/nil/ports/AVR/nilcore.h **** #include <avr/interrupt.h>
  33:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  34:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
  35:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module constants.                                                         */
  36:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
  37:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  38:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  39:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @name    Architecture and Compiler
  40:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @{
  41:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  42:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  43:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Macro defining the port architecture.
  44:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  45:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_ARCHITECTURE_AVR
  46:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  47:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  48:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Name of the implemented architecture.
  49:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  50:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  51:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  52:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  53:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Name of the architecture variant.
  54:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  55:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  56:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  57:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  58:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Compiler name and version.
  59:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  60:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  61:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  62:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  63:ChibiOS/os/nil/ports/AVR/nilcore.h **** #else
  64:ChibiOS/os/nil/ports/AVR/nilcore.h **** #error "unsupported compiler"
  65:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
  66:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  67:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  68:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Port-specific information string.
  69:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  70:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_INFO                       "16 bits code addressing"
  71:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  72:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  73:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   This port supports a realtime counter.
  74:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  75:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_SUPPORTS_RT                FALSE
  76:ChibiOS/os/nil/ports/AVR/nilcore.h **** /** @} */
  77:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  78:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
  79:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module pre-compile time settings.                                         */
  80:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
  81:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  82:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  83:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Stack size for the system idle thread.
  84:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This size depends on the idle thread implementation, usually
  85:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          the idle thread should take no more space than those reserved
  86:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
  87:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    In this port it is set to 8.
  88:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  89:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
  90:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
  91:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
  92:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
  93:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
  94:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
  95:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This constant is used in the calculation of the correct working
  96:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          area size.
  97:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    In this port the default is 32 bytes per thread.
  98:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
  99:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 100:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_INT_REQUIRED_STACK         32
 101:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 102:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 103:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 104:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Enables an alternative timer implementation.
 105:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details Usually the port uses a timer interface defined in the file
 106:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          @p nilcore_timer.h, if this option is enabled then the file
 107:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          @p nilcore_timer_alt.h is included instead.
 108:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 109:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(PORT_USE_ALT_TIMER)
 110:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_USE_ALT_TIMER              FALSE
 111:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 112:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 113:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 114:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Derived constants and error checks.                                       */
 115:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 116:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 117:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 118:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module data structures and types.                                         */
 119:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 120:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 121:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* The following code is not processed when the file is included from an
 122:ChibiOS/os/nil/ports/AVR/nilcore.h ****    asm module.*/
 123:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(_FROM_ASM_)
 124:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 125:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 126:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 127:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 128:ChibiOS/os/nil/ports/AVR/nilcore.h **** typedef uint8_t stkalign_t;
 129:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 130:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 131:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   System saved context.
 132:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This structure represents the inner stack frame during a context
 133:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          switching.
 134:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 135:ChibiOS/os/nil/ports/AVR/nilcore.h **** struct port_intctx {
 136:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       _next;
 137:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r29;
 138:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r28;
 139:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r17;
 140:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r16;
 141:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r15;
 142:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r14;
 143:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r13;
 144:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r12;
 145:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r11;
 146:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r10;
 147:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r9;
 148:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r8;
 149:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r7;
 150:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r6;
 151:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r5;
 152:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r4;
 153:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r3;
 154:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       r2;
 155:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifdef __AVR_3_BYTE_PC__
 156:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       pcx;
 157:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 158:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       pcl;
 159:ChibiOS/os/nil/ports/AVR/nilcore.h ****   uint8_t       pch;
 160:ChibiOS/os/nil/ports/AVR/nilcore.h **** };
 161:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 162:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif /* !defined(_FROM_ASM_) */
 163:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 164:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 165:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module macros.                                                            */
 166:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 167:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 168:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 169:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Platform dependent thread stack setup.
 170:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This code usually setup the context switching frame represented
 171:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          by an @p port_intctx structure.
 172:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 173:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifdef __AVR_3_BYTE_PC__
 174:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_SETUP_CONTEXT(tp, wend, pf, arg) {                             \
 175:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp = (struct port_intctx*)(((uint8_t *)(wend)) -                \
 176:ChibiOS/os/nil/ports/AVR/nilcore.h ****                                          sizeof(struct port_intctx));       \
 177:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r2  = (int)pf;                                              \
 178:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r3  = (int)pf >> 8;                                         \
 179:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r4  = (int)arg;                                             \
 180:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r5  = (int)arg >> 8;                                        \
 181:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pcx = (int)0;                                               \
 182:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pcl = (int)_port_thread_start >> 8;                         \
 183:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pch = (int)_port_thread_start;                              \
 184:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 185:ChibiOS/os/nil/ports/AVR/nilcore.h **** #else /* __AVR_3_BYTE_PC__ */
 186:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_SETUP_CONTEXT(tp, wend, pf, arg) {                             \
 187:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp = (struct port_intctx*)(((uint8_t *)(wend)) -                \
 188:ChibiOS/os/nil/ports/AVR/nilcore.h ****                                          sizeof(struct port_intctx));       \
 189:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r2  = (int)pf;                                              \
 190:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r3  = (int)pf >> 8;                                         \
 191:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r4  = (int)arg;                                             \
 192:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->r5  = (int)arg >> 8;                                        \
 193:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pcl = (int)_port_thread_start >> 8;                         \
 194:ChibiOS/os/nil/ports/AVR/nilcore.h ****     (tp)->ctxp->pch = (int)_port_thread_start;                              \
 195:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 196:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif /* __AVR_3_BYTE_PC__ */
 197:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 198:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Computes the thread working area global size.
 199:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    There is no need to perform alignments in this macro.
 200:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 201:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                 \
 202:ChibiOS/os/nil/ports/AVR/nilcore.h ****                          (n) + (PORT_INT_REQUIRED_STACK))
 203:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 204:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 205:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   IRQ prologue code.
 206:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 207:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          enabled to invoke system APIs.
 208:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 209:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          by "touching" them.
 210:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 211:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 212:ChibiOS/os/nil/ports/AVR/nilcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 213:ChibiOS/os/nil/ports/AVR/nilcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 214:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 215:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 216:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 217:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   IRQ epilogue code.
 218:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 219:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          enabled to invoke system APIs.
 220:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 221:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_IRQ_EPILOGUE() chSchRescheduleS()
 222:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 223:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 224:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   IRQ handler function declaration.
 225:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 226:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          port implementation.
 227:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 228:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 229:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 230:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 231:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Fast IRQ handler function declaration.
 232:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 233:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          port implementation.
 234:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 235:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 236:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 237:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 238:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Performs a context switch between two threads.
 239:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @details This is the most critical code in any port, this function
 240:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          is responsible for the context switch between 2 threads.
 241:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 242:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *          switch performance so optimize here as much as you can.
 243:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 244:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @param[in] ntp       the thread to be switched in
 245:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @param[in] otp       the thread to be switched out
 246:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 247:ChibiOS/os/nil/ports/AVR/nilcore.h **** #define port_switch(ntp, otp) _port_switch(ntp, otp)
 248:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 249:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 250:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* External declarations.                                                    */
 251:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 252:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 253:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* The following code is not processed when the file is included from an
 254:ChibiOS/os/nil/ports/AVR/nilcore.h ****    asm module.*/
 255:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(_FROM_ASM_)
 256:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 257:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifdef __cplusplus
 258:ChibiOS/os/nil/ports/AVR/nilcore.h **** extern "C" {
 259:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 260:ChibiOS/os/nil/ports/AVR/nilcore.h ****   void _port_irq_epilogue(void);
 261:ChibiOS/os/nil/ports/AVR/nilcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 262:ChibiOS/os/nil/ports/AVR/nilcore.h ****   void _port_thread_start(void);
 263:ChibiOS/os/nil/ports/AVR/nilcore.h **** #ifdef __cplusplus
 264:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 265:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif
 266:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 267:ChibiOS/os/nil/ports/AVR/nilcore.h **** #endif /* !defined(_FROM_ASM_) */
 268:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 269:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 270:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* Module inline functions.                                                  */
 271:ChibiOS/os/nil/ports/AVR/nilcore.h **** /*===========================================================================*/
 272:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 273:ChibiOS/os/nil/ports/AVR/nilcore.h **** /* The following code is not processed when the file is included from an
 274:ChibiOS/os/nil/ports/AVR/nilcore.h ****    asm module.*/
 275:ChibiOS/os/nil/ports/AVR/nilcore.h **** #if !defined(_FROM_ASM_)
 276:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 277:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 278:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Port-related initialization code.
 279:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 280:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline void port_init(void) {
 281:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 282:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 283:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 284:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 285:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 286:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 287:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @return              The interrupts status.
 288:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 289:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline syssts_t port_get_irq_status(void) {
 290:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 291:ChibiOS/os/nil/ports/AVR/nilcore.h ****   return 0;
 292:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 293:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 294:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 295:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Checks the interrupt status.
 296:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 297:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @param[in] sts       the interrupt status word
 298:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 299:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @return              The interrupt status.
 300:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @retvel false        the word specified a disabled interrupts status.
 301:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @retvel true         the word specified an enabled interrupts status.
 302:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 303:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 304:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 305:ChibiOS/os/nil/ports/AVR/nilcore.h ****   return false;
 306:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 307:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 308:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 309:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Determines the current execution context.
 310:ChibiOS/os/nil/ports/AVR/nilcore.h ****  *
 311:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @return              The execution context.
 312:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @retval false        not running in ISR mode.
 313:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @retval true         running in ISR mode.
 314:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 315:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline bool port_is_isr_context(void) {
 316:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 317:ChibiOS/os/nil/ports/AVR/nilcore.h ****   return false;
 318:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 319:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 320:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 321:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Kernel-lock action.
 322:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 323:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline void port_lock(void) {
 324:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 325:ChibiOS/os/nil/ports/AVR/nilcore.h ****   asm volatile ("cli" : : : "memory");
 350               		.loc 3 325 0
 351               	/* #APP */
 352               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 353 0000 F894      		cli
 354               	 ;  0 "" 2
 355               	/* #NOAPP */
 356               	.LBE176:
 357               	.LBE175:
 358               	.LBE174:
 193:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 359               		.loc 1 193 0
 360 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 361               	.LVL24:
 362               	.LBB177:
 363               	.LBB178:
 364               	.LBB179:
 326:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 327:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 328:ChibiOS/os/nil/ports/AVR/nilcore.h **** /**
 329:ChibiOS/os/nil/ports/AVR/nilcore.h ****  * @brief   Kernel-unlock action.
 330:ChibiOS/os/nil/ports/AVR/nilcore.h ****  */
 331:ChibiOS/os/nil/ports/AVR/nilcore.h **** static inline void port_unlock(void) {
 332:ChibiOS/os/nil/ports/AVR/nilcore.h **** 
 333:ChibiOS/os/nil/ports/AVR/nilcore.h ****   asm volatile ("sei" : : : "memory");
 365               		.loc 3 333 0
 366               	/* #APP */
 367               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 368 0006 7894      		sei
 369               	 ;  0 "" 2
 370               	/* #NOAPP */
 371               	.LBE179:
 372               	.LBE178:
 373               	.LBE177:
 197:ChibiOS/os/hal/src/hal_buffers.c **** 
 374               		.loc 1 197 0
 375 0008 0895      		ret
 376               		.cfi_endproc
 377               	.LFE57:
 379               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 380               	.global	ibqReleaseEmptyBufferS
 382               	ibqReleaseEmptyBufferS:
 383               	.LFB60:
 239:ChibiOS/os/hal/src/hal_buffers.c **** 
 240:ChibiOS/os/hal/src/hal_buffers.c **** /**
 241:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 242:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 243:ChibiOS/os/hal/src/hal_buffers.c ****  *
 244:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 245:ChibiOS/os/hal/src/hal_buffers.c ****  *
 246:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 247:ChibiOS/os/hal/src/hal_buffers.c ****  */
 248:ChibiOS/os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 249:ChibiOS/os/hal/src/hal_buffers.c **** 
 250:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 251:ChibiOS/os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 252:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 253:ChibiOS/os/hal/src/hal_buffers.c **** }
 254:ChibiOS/os/hal/src/hal_buffers.c **** 
 255:ChibiOS/os/hal/src/hal_buffers.c ****   /**
 256:ChibiOS/os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 257:ChibiOS/os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 258:ChibiOS/os/hal/src/hal_buffers.c ****    *
 259:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 260:ChibiOS/os/hal/src/hal_buffers.c ****    *
 261:ChibiOS/os/hal/src/hal_buffers.c ****    * @sclass
 262:ChibiOS/os/hal/src/hal_buffers.c ****    */
 263:ChibiOS/os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 384               		.loc 1 263 0
 385               		.cfi_startproc
 386               	.LVL25:
 387               	/* prologue: function */
 388               	/* frame size = 0 */
 389               	/* stack size = 0 */
 390               	.L__stack_usage = 0
 391 0000 DC01      		movw r26,r24
 264:ChibiOS/os/hal/src/hal_buffers.c **** 
 265:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 266:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 267:ChibiOS/os/hal/src/hal_buffers.c **** 
 268:ChibiOS/os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 269:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 392               		.loc 1 269 0
 393 0002 1196      		adiw r26,1
 394 0004 8D91      		ld r24,X+
 395 0006 9C91      		ld r25,X
 396 0008 1297      		sbiw r26,1+1
 397               	.LVL26:
 398 000a 0197      		sbiw r24,1
 399 000c 1296      		adiw r26,1+1
 400 000e 9C93      		st X,r25
 401 0010 8E93      		st -X,r24
 402 0012 1197      		sbiw r26,1
 270:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 403               		.loc 1 270 0
 404 0014 1596      		adiw r26,5
 405 0016 2D91      		ld r18,X+
 406 0018 3C91      		ld r19,X
 407 001a 1697      		sbiw r26,5+1
 408 001c 1996      		adiw r26,9
 409 001e 8D91      		ld r24,X+
 410 0020 9C91      		ld r25,X
 411 0022 1A97      		sbiw r26,9+1
 412 0024 820F      		add r24,r18
 413 0026 931F      		adc r25,r19
 414 0028 1696      		adiw r26,5+1
 415 002a 9C93      		st X,r25
 416 002c 8E93      		st -X,r24
 417 002e 1597      		sbiw r26,5
 271:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 418               		.loc 1 271 0
 419 0030 1796      		adiw r26,7
 420 0032 2D91      		ld r18,X+
 421 0034 3C91      		ld r19,X
 422 0036 1897      		sbiw r26,7+1
 423 0038 8217      		cp r24,r18
 424 003a 9307      		cpc r25,r19
 425 003c 00F0      		brlo .L21
 272:ChibiOS/os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 426               		.loc 1 272 0
 427 003e 1D96      		adiw r26,13
 428 0040 8D91      		ld r24,X+
 429 0042 9C91      		ld r25,X
 430 0044 1E97      		sbiw r26,13+1
 431 0046 1696      		adiw r26,5+1
 432 0048 9C93      		st X,r25
 433 004a 8E93      		st -X,r24
 434 004c 1597      		sbiw r26,5
 435               	.L21:
 273:ChibiOS/os/hal/src/hal_buffers.c ****   }
 274:ChibiOS/os/hal/src/hal_buffers.c **** 
 275:ChibiOS/os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 276:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 436               		.loc 1 276 0
 437 004e 5096      		adiw r26,15+1
 438 0050 1C92      		st X,__zero_reg__
 439 0052 1E92      		st -X,__zero_reg__
 440 0054 1F97      		sbiw r26,15
 277:ChibiOS/os/hal/src/hal_buffers.c **** 
 278:ChibiOS/os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 279:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 441               		.loc 1 279 0
 442 0056 5396      		adiw r26,19
 443 0058 ED91      		ld r30,X+
 444 005a FC91      		ld r31,X
 445 005c 5497      		sbiw r26,19+1
 446 005e 3097      		sbiw r30,0
 447 0060 01F0      		breq .L20
 280:ChibiOS/os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 448               		.loc 1 280 0
 449 0062 CD01      		movw r24,r26
 450 0064 0994      		ijmp
 451               	.LVL27:
 452               	.L20:
 453 0066 0895      		ret
 454               		.cfi_endproc
 455               	.LFE60:
 457               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 458               	.global	ibqReleaseEmptyBuffer
 460               	ibqReleaseEmptyBuffer:
 461               	.LFB59:
 248:ChibiOS/os/hal/src/hal_buffers.c **** 
 462               		.loc 1 248 0
 463               		.cfi_startproc
 464               	.LVL28:
 465               	/* prologue: function */
 466               	/* frame size = 0 */
 467               	/* stack size = 0 */
 468               	.L__stack_usage = 0
 469               	.LBB180:
 470               	.LBB181:
 471               	.LBB182:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 472               		.loc 3 325 0
 473               	/* #APP */
 474               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 475 0000 F894      		cli
 476               	 ;  0 "" 2
 477               	/* #NOAPP */
 478               	.LBE182:
 479               	.LBE181:
 480               	.LBE180:
 251:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 481               		.loc 1 251 0
 482 0002 0E94 0000 		call ibqReleaseEmptyBufferS
 483               	.LVL29:
 484               	.LBB183:
 485               	.LBB184:
 486               	.LBB185:
 487               		.loc 3 333 0
 488               	/* #APP */
 489               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 490 0006 7894      		sei
 491               	 ;  0 "" 2
 492               	/* #NOAPP */
 493 0008 0895      		ret
 494               	.LBE185:
 495               	.LBE184:
 496               	.LBE183:
 497               		.cfi_endproc
 498               	.LFE59:
 500               		.section	.text.ibqGetTimeout,"ax",@progbits
 501               	.global	ibqGetTimeout
 503               	ibqGetTimeout:
 504               	.LFB61:
 281:ChibiOS/os/hal/src/hal_buffers.c ****   }
 282:ChibiOS/os/hal/src/hal_buffers.c **** }
 283:ChibiOS/os/hal/src/hal_buffers.c **** 
 284:ChibiOS/os/hal/src/hal_buffers.c **** /**
 285:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 286:ChibiOS/os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 287:ChibiOS/os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 288:ChibiOS/os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 289:ChibiOS/os/hal/src/hal_buffers.c ****  *
 290:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 291:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 292:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 293:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 294:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 295:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 296:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 297:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 298:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset.
 299:ChibiOS/os/hal/src/hal_buffers.c ****  *
 300:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 301:ChibiOS/os/hal/src/hal_buffers.c ****  */
 302:ChibiOS/os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 505               		.loc 1 302 0
 506               		.cfi_startproc
 507               	.LVL30:
 508 0000 0F93      		push r16
 509               	.LCFI8:
 510               		.cfi_def_cfa_offset 3
 511               		.cfi_offset 16, -2
 512 0002 1F93      		push r17
 513               	.LCFI9:
 514               		.cfi_def_cfa_offset 4
 515               		.cfi_offset 17, -3
 516 0004 CF93      		push r28
 517               	.LCFI10:
 518               		.cfi_def_cfa_offset 5
 519               		.cfi_offset 28, -4
 520 0006 DF93      		push r29
 521               	.LCFI11:
 522               		.cfi_def_cfa_offset 6
 523               		.cfi_offset 29, -5
 524               	/* prologue: function */
 525               	/* frame size = 0 */
 526               	/* stack size = 4 */
 527               	.L__stack_usage = 4
 528 0008 8C01      		movw r16,r24
 529               	.LBB186:
 530               	.LBB187:
 531               	.LBB188:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 532               		.loc 3 325 0
 533               	/* #APP */
 534               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 535 000a F894      		cli
 536               	 ;  0 "" 2
 537               	/* #NOAPP */
 538               	.LBE188:
 539               	.LBE187:
 540               	.LBE186:
 303:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 304:ChibiOS/os/hal/src/hal_buffers.c **** 
 305:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 306:ChibiOS/os/hal/src/hal_buffers.c **** 
 307:ChibiOS/os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 308:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 541               		.loc 1 308 0
 542 000c DC01      		movw r26,r24
 543 000e 1F96      		adiw r26,15
 544 0010 ED91      		ld r30,X+
 545 0012 FC91      		ld r31,X
 546 0014 5097      		sbiw r26,15+1
 547 0016 3097      		sbiw r30,0
 548 0018 01F0      		breq .L29
 549               	.LVL31:
 550               	.L25:
 309:ChibiOS/os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 310:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 311:ChibiOS/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 312:ChibiOS/os/hal/src/hal_buffers.c ****       return msg;
 313:ChibiOS/os/hal/src/hal_buffers.c ****     }
 314:ChibiOS/os/hal/src/hal_buffers.c ****   }
 315:ChibiOS/os/hal/src/hal_buffers.c **** 
 316:ChibiOS/os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 317:ChibiOS/os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 551               		.loc 1 317 0
 552 001a C191      		ld r28,Z+
 553 001c D0E0      		ldi r29,0
 554               	.LVL32:
 318:ChibiOS/os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 555               		.loc 1 318 0
 556 001e D801      		movw r26,r16
 557 0020 5096      		adiw r26,15+1
 558 0022 FC93      		st X,r31
 559 0024 EE93      		st -X,r30
 560 0026 1F97      		sbiw r26,15
 319:ChibiOS/os/hal/src/hal_buffers.c **** 
 320:ChibiOS/os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 321:ChibiOS/os/hal/src/hal_buffers.c ****      empty in the queue.*/
 322:ChibiOS/os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 561               		.loc 1 322 0
 562 0028 5196      		adiw r26,17
 563 002a 8D91      		ld r24,X+
 564 002c 9C91      		ld r25,X
 565 002e 5297      		sbiw r26,17+1
 566 0030 E817      		cp r30,r24
 567 0032 F907      		cpc r31,r25
 568 0034 00F4      		brsh .L30
 569               	.L28:
 570               	.LBB189:
 571               	.LBB190:
 572               	.LBB191:
 573               		.loc 3 333 0
 574               	/* #APP */
 575               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 576 0036 7894      		sei
 577               	 ;  0 "" 2
 578               	/* #NOAPP */
 579               	.LBE191:
 580               	.LBE190:
 581               	.LBE189:
 323:ChibiOS/os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 324:ChibiOS/os/hal/src/hal_buffers.c ****   }
 325:ChibiOS/os/hal/src/hal_buffers.c **** 
 326:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 327:ChibiOS/os/hal/src/hal_buffers.c ****   return msg;
 582               		.loc 1 327 0
 583 0038 CE01      		movw r24,r28
 584               	.LVL33:
 585               	.L27:
 586               	/* epilogue start */
 328:ChibiOS/os/hal/src/hal_buffers.c **** }
 587               		.loc 1 328 0
 588 003a DF91      		pop r29
 589 003c CF91      		pop r28
 590 003e 1F91      		pop r17
 591 0040 0F91      		pop r16
 592               	.LVL34:
 593 0042 0895      		ret
 594               	.LVL35:
 595               	.L30:
 323:ChibiOS/os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 596               		.loc 1 323 0
 597 0044 C801      		movw r24,r16
 598 0046 0E94 0000 		call ibqReleaseEmptyBufferS
 599               	.LVL36:
 600 004a 00C0      		rjmp .L28
 601               	.LVL37:
 602               	.L29:
 309:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 603               		.loc 1 309 0
 604 004c 0E94 0000 		call ibqGetFullBufferTimeoutS
 605               	.LVL38:
 310:ChibiOS/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 606               		.loc 1 310 0
 607 0050 0097      		sbiw r24,0
 608 0052 01F4      		brne .L26
 609 0054 D801      		movw r26,r16
 610 0056 1F96      		adiw r26,15
 611 0058 ED91      		ld r30,X+
 612 005a FC91      		ld r31,X
 613 005c 5097      		sbiw r26,15+1
 614 005e 00C0      		rjmp .L25
 615               	.L26:
 616               	.LBB192:
 617               	.LBB193:
 618               	.LBB194:
 619               		.loc 3 333 0
 620               	/* #APP */
 621               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 622 0060 7894      		sei
 623               	 ;  0 "" 2
 624               	/* #NOAPP */
 625               	.LBE194:
 626               	.LBE193:
 627               	.LBE192:
 312:ChibiOS/os/hal/src/hal_buffers.c ****     }
 628               		.loc 1 312 0
 629 0062 00C0      		rjmp .L27
 630               		.cfi_endproc
 631               	.LFE61:
 633               		.section	.text.ibqReadTimeout,"ax",@progbits
 634               	.global	ibqReadTimeout
 636               	ibqReadTimeout:
 637               	.LFB62:
 329:ChibiOS/os/hal/src/hal_buffers.c **** 
 330:ChibiOS/os/hal/src/hal_buffers.c **** /**
 331:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 332:ChibiOS/os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 333:ChibiOS/os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 334:ChibiOS/os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 335:ChibiOS/os/hal/src/hal_buffers.c ****  *          been reset.
 336:ChibiOS/os/hal/src/hal_buffers.c ****  *
 337:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 338:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 339:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 340:ChibiOS/os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 341:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 342:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 343:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 344:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 345:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 346:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 347:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 348:ChibiOS/os/hal/src/hal_buffers.c ****  *
 349:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 350:ChibiOS/os/hal/src/hal_buffers.c ****  */
 351:ChibiOS/os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 352:ChibiOS/os/hal/src/hal_buffers.c ****                       size_t n, systime_t timeout) {
 638               		.loc 1 352 0
 639               		.cfi_startproc
 640               	.LVL39:
 641 0000 3F92      		push r3
 642               	.LCFI12:
 643               		.cfi_def_cfa_offset 3
 644               		.cfi_offset 3, -2
 645 0002 4F92      		push r4
 646               	.LCFI13:
 647               		.cfi_def_cfa_offset 4
 648               		.cfi_offset 4, -3
 649 0004 5F92      		push r5
 650               	.LCFI14:
 651               		.cfi_def_cfa_offset 5
 652               		.cfi_offset 5, -4
 653 0006 6F92      		push r6
 654               	.LCFI15:
 655               		.cfi_def_cfa_offset 6
 656               		.cfi_offset 6, -5
 657 0008 7F92      		push r7
 658               	.LCFI16:
 659               		.cfi_def_cfa_offset 7
 660               		.cfi_offset 7, -6
 661 000a 8F92      		push r8
 662               	.LCFI17:
 663               		.cfi_def_cfa_offset 8
 664               		.cfi_offset 8, -7
 665 000c 9F92      		push r9
 666               	.LCFI18:
 667               		.cfi_def_cfa_offset 9
 668               		.cfi_offset 9, -8
 669 000e AF92      		push r10
 670               	.LCFI19:
 671               		.cfi_def_cfa_offset 10
 672               		.cfi_offset 10, -9
 673 0010 BF92      		push r11
 674               	.LCFI20:
 675               		.cfi_def_cfa_offset 11
 676               		.cfi_offset 11, -10
 677 0012 CF92      		push r12
 678               	.LCFI21:
 679               		.cfi_def_cfa_offset 12
 680               		.cfi_offset 12, -11
 681 0014 DF92      		push r13
 682               	.LCFI22:
 683               		.cfi_def_cfa_offset 13
 684               		.cfi_offset 13, -12
 685 0016 EF92      		push r14
 686               	.LCFI23:
 687               		.cfi_def_cfa_offset 14
 688               		.cfi_offset 14, -13
 689 0018 FF92      		push r15
 690               	.LCFI24:
 691               		.cfi_def_cfa_offset 15
 692               		.cfi_offset 15, -14
 693 001a 0F93      		push r16
 694               	.LCFI25:
 695               		.cfi_def_cfa_offset 16
 696               		.cfi_offset 16, -15
 697 001c 1F93      		push r17
 698               	.LCFI26:
 699               		.cfi_def_cfa_offset 17
 700               		.cfi_offset 17, -16
 701 001e CF93      		push r28
 702               	.LCFI27:
 703               		.cfi_def_cfa_offset 18
 704               		.cfi_offset 28, -17
 705 0020 DF93      		push r29
 706               	.LCFI28:
 707               		.cfi_def_cfa_offset 19
 708               		.cfi_offset 29, -18
 709               	/* prologue: function */
 710               	/* frame size = 0 */
 711               	/* stack size = 17 */
 712               	.L__stack_usage = 17
 713 0022 8C01      		movw r16,r24
 714 0024 7B01      		movw r14,r22
 715 0026 6A01      		movw r12,r20
 716 0028 5901      		movw r10,r18
 717               	.LVL40:
 718               	.LBB195:
 719               	.LBB196:
 720               	.LBB197:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 721               		.loc 3 325 0
 722               	/* #APP */
 723               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 724 002a F894      		cli
 725               	 ;  0 "" 2
 726               	/* #NOAPP */
 727               	.LBE197:
 728               	.LBE196:
 729               	.LBE195:
 730               	.LBB198:
 731               	.LBB199:
 732               	.LBB200:
 733               	.LBB201:
 734               		.file 4 "ChibiOS/os/hal/ports/AVR/st_lld.h"
   1:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*
   2:ChibiOS/os/hal/ports/AVR/st_lld.h ****     ChibiOS - Copyright (C) 2006..2015 Giovanni Di Sirio
   3:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
   4:ChibiOS/os/hal/ports/AVR/st_lld.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:ChibiOS/os/hal/ports/AVR/st_lld.h ****     you may not use this file except in compliance with the License.
   6:ChibiOS/os/hal/ports/AVR/st_lld.h ****     You may obtain a copy of the License at
   7:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
   8:ChibiOS/os/hal/ports/AVR/st_lld.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  10:ChibiOS/os/hal/ports/AVR/st_lld.h ****     Unless required by applicable law or agreed to in writing, software
  11:ChibiOS/os/hal/ports/AVR/st_lld.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:ChibiOS/os/hal/ports/AVR/st_lld.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:ChibiOS/os/hal/ports/AVR/st_lld.h ****     See the License for the specific language governing permissions and
  14:ChibiOS/os/hal/ports/AVR/st_lld.h ****     limitations under the License.
  15:ChibiOS/os/hal/ports/AVR/st_lld.h **** */
  16:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  17:ChibiOS/os/hal/ports/AVR/st_lld.h **** /**
  18:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @file    AVR/st_lld.h
  19:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @brief   ST Driver subsystem low level driver header.
  20:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @details This header is designed to be include-able without having to
  21:ChibiOS/os/hal/ports/AVR/st_lld.h ****  *          include other files from the HAL.
  22:ChibiOS/os/hal/ports/AVR/st_lld.h ****  *
  23:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @addtogroup AVR
  24:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @{
  25:ChibiOS/os/hal/ports/AVR/st_lld.h ****  */
  26:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  27:ChibiOS/os/hal/ports/AVR/st_lld.h **** #ifndef _ST_LLD_H_
  28:ChibiOS/os/hal/ports/AVR/st_lld.h **** #define _ST_LLD_H_
  29:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  30:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  31:ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver constants.                                                         */
  32:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  33:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  34:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  35:ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver pre-compile time settings.                                         */
  36:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  37:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  38:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*
  39:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * TODO: for models that have many timers,
  40:ChibiOS/os/hal/ports/AVR/st_lld.h ****  *       could add AVR_ST_USE_TIMER
  41:ChibiOS/os/hal/ports/AVR/st_lld.h ****  */
  42:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  43:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  44:ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Derived constants and error checks.                                       */
  45:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  46:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  47:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*
  48:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * TODO: error checks for valid timer selected
  49:ChibiOS/os/hal/ports/AVR/st_lld.h ****  */
  50:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  51:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  52:ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver data structures and types.                                         */
  53:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  54:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  55:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  56:ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver macros.                                                            */
  57:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  58:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  59:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  60:ChibiOS/os/hal/ports/AVR/st_lld.h **** /* External declarations.                                                    */
  61:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  62:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  63:ChibiOS/os/hal/ports/AVR/st_lld.h **** #ifdef __cplusplus
  64:ChibiOS/os/hal/ports/AVR/st_lld.h **** extern "C" {
  65:ChibiOS/os/hal/ports/AVR/st_lld.h **** #endif
  66:ChibiOS/os/hal/ports/AVR/st_lld.h ****   void st_lld_init(void);
  67:ChibiOS/os/hal/ports/AVR/st_lld.h **** #ifdef __cplusplus
  68:ChibiOS/os/hal/ports/AVR/st_lld.h **** }
  69:ChibiOS/os/hal/ports/AVR/st_lld.h **** #endif
  70:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  71:ChibiOS/os/hal/ports/AVR/st_lld.h **** #ifdef __AVR_ATmega128__
  72:ChibiOS/os/hal/ports/AVR/st_lld.h **** #define TIFR_REG TIFR
  73:ChibiOS/os/hal/ports/AVR/st_lld.h **** #define TIMSK_REG TIMSK
  74:ChibiOS/os/hal/ports/AVR/st_lld.h **** #else
  75:ChibiOS/os/hal/ports/AVR/st_lld.h **** #define TIFR_REG TIFR1
  76:ChibiOS/os/hal/ports/AVR/st_lld.h **** #define TIMSK_REG TIMSK1
  77:ChibiOS/os/hal/ports/AVR/st_lld.h **** #endif
  78:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  79:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  80:ChibiOS/os/hal/ports/AVR/st_lld.h **** /* Driver inline functions.                                                  */
  81:ChibiOS/os/hal/ports/AVR/st_lld.h **** /*===========================================================================*/
  82:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  83:ChibiOS/os/hal/ports/AVR/st_lld.h **** /**
  84:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @brief   Returns the time counter value.
  85:ChibiOS/os/hal/ports/AVR/st_lld.h ****  *
  86:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @return              The counter value.
  87:ChibiOS/os/hal/ports/AVR/st_lld.h ****  *
  88:ChibiOS/os/hal/ports/AVR/st_lld.h ****  * @notapi
  89:ChibiOS/os/hal/ports/AVR/st_lld.h ****  */
  90:ChibiOS/os/hal/ports/AVR/st_lld.h **** static inline systime_t st_lld_get_counter(void) {
  91:ChibiOS/os/hal/ports/AVR/st_lld.h **** 
  92:ChibiOS/os/hal/ports/AVR/st_lld.h ****   return (systime_t) TCNT1;
 735               		.loc 4 92 0
 736 002c 4090 8400 		lds r4,132
 737 0030 5090 8500 		lds r5,132+1
 738               	.LBE201:
 739               	.LBE200:
 740               	.LBE199:
 741               	.LBE198:
 353:ChibiOS/os/hal/src/hal_buffers.c ****   size_t r = 0;
 354:ChibiOS/os/hal/src/hal_buffers.c ****   systime_t deadline;
 355:ChibiOS/os/hal/src/hal_buffers.c **** 
 356:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 357:ChibiOS/os/hal/src/hal_buffers.c **** 
 358:ChibiOS/os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 359:ChibiOS/os/hal/src/hal_buffers.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 742               		.loc 1 359 0
 743 0034 420E      		add r4,r18
 744 0036 531E      		adc r5,r19
 745               	.LVL41:
 353:ChibiOS/os/hal/src/hal_buffers.c ****   size_t r = 0;
 746               		.loc 1 353 0
 747 0038 612C      		mov r6,__zero_reg__
 748 003a 712C      		mov r7,__zero_reg__
 749               	.LBB202:
 750               	.LBB203:
 360:ChibiOS/os/hal/src/hal_buffers.c **** 
 361:ChibiOS/os/hal/src/hal_buffers.c ****   while (true) {
 362:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size;
 363:ChibiOS/os/hal/src/hal_buffers.c **** 
 364:ChibiOS/os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 365:ChibiOS/os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 366:ChibiOS/os/hal/src/hal_buffers.c ****       msg_t msg;
 367:ChibiOS/os/hal/src/hal_buffers.c **** 
 368:ChibiOS/os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 369:ChibiOS/os/hal/src/hal_buffers.c ****          deadline.*/
 370:ChibiOS/os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 751               		.loc 1 370 0
 752 003c 4901      		movw r8,r18
 753 003e 21E0      		ldi r18,1
 754 0040 821A      		sub r8,r18
 755 0042 9108      		sbc r9,__zero_reg__
 756               	.LVL42:
 757               	.LBE203:
 371:ChibiOS/os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 372:ChibiOS/os/hal/src/hal_buffers.c ****       }
 373:ChibiOS/os/hal/src/hal_buffers.c ****       else {
 374:ChibiOS/os/hal/src/hal_buffers.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 375:ChibiOS/os/hal/src/hal_buffers.c **** 
 376:ChibiOS/os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 377:ChibiOS/os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 378:ChibiOS/os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 379:ChibiOS/os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 380:ChibiOS/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 381:ChibiOS/os/hal/src/hal_buffers.c ****           return r;
 382:ChibiOS/os/hal/src/hal_buffers.c ****         }
 383:ChibiOS/os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 384:ChibiOS/os/hal/src/hal_buffers.c ****       }
 385:ChibiOS/os/hal/src/hal_buffers.c **** 
 386:ChibiOS/os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 387:ChibiOS/os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 388:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 389:ChibiOS/os/hal/src/hal_buffers.c ****         return r;
 390:ChibiOS/os/hal/src/hal_buffers.c ****       }
 391:ChibiOS/os/hal/src/hal_buffers.c ****     }
 392:ChibiOS/os/hal/src/hal_buffers.c **** 
 393:ChibiOS/os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 394:ChibiOS/os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 395:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 396:ChibiOS/os/hal/src/hal_buffers.c ****       size = n - r;
 397:ChibiOS/os/hal/src/hal_buffers.c ****     }
 398:ChibiOS/os/hal/src/hal_buffers.c **** 
 399:ChibiOS/os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 400:ChibiOS/os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 401:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > 64U) {
 402:ChibiOS/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 403:ChibiOS/os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, 64U);
 758               		.loc 1 403 0
 759 0044 80E4      		ldi r24,lo8(64)
 760 0046 382E      		mov r3,r24
 761               	.LVL43:
 762 0048 00C0      		rjmp .L42
 763               	.LVL44:
 764               	.L45:
 765 004a FB01      		movw r30,r22
 766 004c D701      		movw r26,r14
 767 004e 832D      		mov r24,r3
 768               		0:
 769 0050 0190      		ld r0,Z+
 770 0052 0D92      		st X+,r0
 771 0054 8A95      		dec r24
 772 0056 01F4      		brne 0b
 404:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += 64U;
 773               		.loc 1 404 0
 774 0058 F0E4      		ldi r31,64
 775 005a EF0E      		add r14,r31
 776 005c F11C      		adc r15,__zero_reg__
 777               	.LVL45:
 405:ChibiOS/os/hal/src/hal_buffers.c ****       ibqp->ptr += 64U;
 778               		.loc 1 405 0
 779 005e F801      		movw r30,r16
 780 0060 8785      		ldd r24,Z+15
 781 0062 9089      		ldd r25,Z+16
 782 0064 805C      		subi r24,-64
 783 0066 9F4F      		sbci r25,-1
 784 0068 908B      		std Z+16,r25
 785 006a 8787      		std Z+15,r24
 406:ChibiOS/os/hal/src/hal_buffers.c ****       r         += 64U;
 786               		.loc 1 406 0
 787 006c F0E4      		ldi r31,64
 788 006e 6F0E      		add r6,r31
 789 0070 711C      		adc r7,__zero_reg__
 790               	.LVL46:
 407:ChibiOS/os/hal/src/hal_buffers.c ****     }
 408:ChibiOS/os/hal/src/hal_buffers.c ****     else {
 409:ChibiOS/os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 410:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += size;
 411:ChibiOS/os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 412:ChibiOS/os/hal/src/hal_buffers.c ****       r         += size;
 413:ChibiOS/os/hal/src/hal_buffers.c ****     }
 414:ChibiOS/os/hal/src/hal_buffers.c **** 
 415:ChibiOS/os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 416:ChibiOS/os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 791               		.loc 1 416 0
 792 0072 F801      		movw r30,r16
 793 0074 2189      		ldd r18,Z+17
 794 0076 3289      		ldd r19,Z+18
 795 0078 8217      		cp r24,r18
 796 007a 9307      		cpc r25,r19
 797 007c 00F4      		brsh .L43
 798               	.L41:
 799               	.LBB212:
 800               	.LBB213:
 801               	.LBB214:
 802               		.loc 3 333 0
 803               	/* #APP */
 804               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 805 007e 7894      		sei
 806               	 ;  0 "" 2
 807               	/* #NOAPP */
 808               	.LBE214:
 809               	.LBE213:
 810               	.LBE212:
 417:ChibiOS/os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 418:ChibiOS/os/hal/src/hal_buffers.c ****     }
 419:ChibiOS/os/hal/src/hal_buffers.c **** 
 420:ChibiOS/os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 421:ChibiOS/os/hal/src/hal_buffers.c ****     osalSysUnlock();
 422:ChibiOS/os/hal/src/hal_buffers.c ****     if (r >= n) {
 811               		.loc 1 422 0
 812 0080 6C14      		cp r6,r12
 813 0082 7D04      		cpc r7,r13
 814 0084 00F4      		brsh .L36
 815               	.L46:
 816               	.LBB217:
 817               	.LBB218:
 818               	.LBB219:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 819               		.loc 3 325 0
 820               	/* #APP */
 821               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 822 0086 F894      		cli
 823               	 ;  0 "" 2
 824               	.LVL47:
 825               	/* #NOAPP */
 826               	.L42:
 827               	.LBE219:
 828               	.LBE218:
 829               	.LBE217:
 365:ChibiOS/os/hal/src/hal_buffers.c ****       msg_t msg;
 830               		.loc 1 365 0
 831 0088 F801      		movw r30,r16
 832 008a 6785      		ldd r22,Z+15
 833 008c 7089      		ldd r23,Z+16
 834 008e 6115      		cp r22,__zero_reg__
 835 0090 7105      		cpc r23,__zero_reg__
 836 0092 01F4      		brne .+2
 837 0094 00C0      		rjmp .L44
 838               	.L32:
 394:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 839               		.loc 1 394 0
 840 0096 F801      		movw r30,r16
 841 0098 C189      		ldd r28,Z+17
 842 009a D289      		ldd r29,Z+18
 843               	.LVL48:
 395:ChibiOS/os/hal/src/hal_buffers.c ****       size = n - r;
 844               		.loc 1 395 0
 845 009c C601      		movw r24,r12
 846 009e 8619      		sub r24,r6
 847 00a0 9709      		sbc r25,r7
 848 00a2 C61B      		sub r28,r22
 849 00a4 D70B      		sbc r29,r23
 850               	.LVL49:
 851 00a6 8C17      		cp r24,r28
 852 00a8 9D07      		cpc r25,r29
 853 00aa 00F4      		brsh .L38
 854 00ac EC01      		movw r28,r24
 855               	.LVL50:
 856               	.L38:
 401:ChibiOS/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 857               		.loc 1 401 0
 858 00ae C134      		cpi r28,65
 859 00b0 D105      		cpc r29,__zero_reg__
 860 00b2 00F4      		brsh .L45
 409:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += size;
 861               		.loc 1 409 0
 862 00b4 AE01      		movw r20,r28
 863 00b6 C701      		movw r24,r14
 864 00b8 0E94 0000 		call memcpy
 865               	.LVL51:
 410:ChibiOS/os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 866               		.loc 1 410 0
 867 00bc EC0E      		add r14,r28
 868 00be FD1E      		adc r15,r29
 869               	.LVL52:
 411:ChibiOS/os/hal/src/hal_buffers.c ****       r         += size;
 870               		.loc 1 411 0
 871 00c0 F801      		movw r30,r16
 872 00c2 8785      		ldd r24,Z+15
 873 00c4 9089      		ldd r25,Z+16
 874 00c6 8C0F      		add r24,r28
 875 00c8 9D1F      		adc r25,r29
 876 00ca 908B      		std Z+16,r25
 877 00cc 8787      		std Z+15,r24
 412:ChibiOS/os/hal/src/hal_buffers.c ****     }
 878               		.loc 1 412 0
 879 00ce 6C0E      		add r6,r28
 880 00d0 7D1E      		adc r7,r29
 881               	.LVL53:
 416:ChibiOS/os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 882               		.loc 1 416 0
 883 00d2 F801      		movw r30,r16
 884 00d4 2189      		ldd r18,Z+17
 885 00d6 3289      		ldd r19,Z+18
 886 00d8 8217      		cp r24,r18
 887 00da 9307      		cpc r25,r19
 888 00dc 00F0      		brlo .L41
 889               	.L43:
 417:ChibiOS/os/hal/src/hal_buffers.c ****     }
 890               		.loc 1 417 0
 891 00de C801      		movw r24,r16
 892 00e0 0E94 0000 		call ibqReleaseEmptyBufferS
 893               	.LVL54:
 894               	.LBB220:
 895               	.LBB216:
 896               	.LBB215:
 897               		.loc 3 333 0
 898               	/* #APP */
 899               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 900 00e4 7894      		sei
 901               	 ;  0 "" 2
 902               	/* #NOAPP */
 903               	.LBE215:
 904               	.LBE216:
 905               	.LBE220:
 906               		.loc 1 422 0
 907 00e6 6C14      		cp r6,r12
 908 00e8 7D04      		cpc r7,r13
 909 00ea 00F0      		brlo .L46
 910               	.LVL55:
 911               	.L36:
 912               	.LBE202:
 423:ChibiOS/os/hal/src/hal_buffers.c ****       return r;
 424:ChibiOS/os/hal/src/hal_buffers.c ****     }
 425:ChibiOS/os/hal/src/hal_buffers.c ****     osalSysLock();
 426:ChibiOS/os/hal/src/hal_buffers.c ****   }
 427:ChibiOS/os/hal/src/hal_buffers.c **** }
 913               		.loc 1 427 0
 914 00ec C301      		movw r24,r6
 915               	/* epilogue start */
 916 00ee DF91      		pop r29
 917 00f0 CF91      		pop r28
 918 00f2 1F91      		pop r17
 919 00f4 0F91      		pop r16
 920               	.LVL56:
 921 00f6 FF90      		pop r15
 922 00f8 EF90      		pop r14
 923               	.LVL57:
 924 00fa DF90      		pop r13
 925 00fc CF90      		pop r12
 926               	.LVL58:
 927 00fe BF90      		pop r11
 928 0100 AF90      		pop r10
 929               	.LVL59:
 930 0102 9F90      		pop r9
 931 0104 8F90      		pop r8
 932               	.LVL60:
 933 0106 7F90      		pop r7
 934 0108 6F90      		pop r6
 935               	.LVL61:
 936 010a 5F90      		pop r5
 937 010c 4F90      		pop r4
 938               	.LVL62:
 939 010e 3F90      		pop r3
 940 0110 0895      		ret
 941               	.LVL63:
 942               	.L44:
 943               	.LBB222:
 944               	.LBB221:
 370:ChibiOS/os/hal/src/hal_buffers.c ****         msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 945               		.loc 1 370 0
 946 0112 FEEF      		ldi r31,-2
 947 0114 8F16      		cp r8,r31
 948 0116 FFEF      		ldi r31,-1
 949 0118 9F06      		cpc r9,r31
 950 011a 00F4      		brsh .L47
 951               	.LBB204:
 952               	.LBB205:
 953               	.LBB206:
 954               	.LBB207:
 955               	.LBB208:
 956               		.loc 4 92 0
 957 011c 8091 8400 		lds r24,132
 958 0120 9091 8500 		lds r25,132+1
 959               	.LBE208:
 960               	.LBE207:
 961               	.LBE206:
 962               	.LBE205:
 374:ChibiOS/os/hal/src/hal_buffers.c **** 
 963               		.loc 1 374 0
 964 0124 B201      		movw r22,r4
 965 0126 681B      		sub r22,r24
 966 0128 790B      		sbc r23,r25
 967               	.LVL64:
 379:ChibiOS/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 968               		.loc 1 379 0
 969 012a A616      		cp r10,r22
 970 012c B706      		cpc r11,r23
 971 012e 00F0      		brlo .L37
 383:ChibiOS/os/hal/src/hal_buffers.c ****       }
 972               		.loc 1 383 0
 973 0130 C801      		movw r24,r16
 974 0132 0E94 0000 		call ibqGetFullBufferTimeoutS
 975               	.LVL65:
 976               	.LBE204:
 387:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 977               		.loc 1 387 0
 978 0136 892B      		or r24,r25
 979 0138 01F4      		brne .L37
 980               	.L48:
 981 013a F801      		movw r30,r16
 982 013c 6785      		ldd r22,Z+15
 983 013e 7089      		ldd r23,Z+16
 984 0140 00C0      		rjmp .L32
 985               	.LVL66:
 986               	.L47:
 371:ChibiOS/os/hal/src/hal_buffers.c ****       }
 987               		.loc 1 371 0
 988 0142 B501      		movw r22,r10
 989 0144 C801      		movw r24,r16
 990 0146 0E94 0000 		call ibqGetFullBufferTimeoutS
 991               	.LVL67:
 387:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 992               		.loc 1 387 0
 993 014a 892B      		or r24,r25
 994 014c 01F0      		breq .L48
 995               	.LVL68:
 996               	.L37:
 997               	.LBB209:
 998               	.LBB210:
 999               	.LBB211:
 1000               		.loc 3 333 0
 1001               	/* #APP */
 1002               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1003 014e 7894      		sei
 1004               	 ;  0 "" 2
 1005               	/* #NOAPP */
 1006               	.LBE211:
 1007               	.LBE210:
 1008               	.LBE209:
 389:ChibiOS/os/hal/src/hal_buffers.c ****       }
 1009               		.loc 1 389 0
 1010 0150 00C0      		rjmp .L36
 1011               	.LBE221:
 1012               	.LBE222:
 1013               		.cfi_endproc
 1014               	.LFE62:
 1016               		.section	.text.obqObjectInit,"ax",@progbits
 1017               	.global	obqObjectInit
 1019               	obqObjectInit:
 1020               	.LFB63:
 428:ChibiOS/os/hal/src/hal_buffers.c **** 
 429:ChibiOS/os/hal/src/hal_buffers.c **** /**
 430:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 431:ChibiOS/os/hal/src/hal_buffers.c ****  *
 432:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 433:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 434:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 435:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 436:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 437:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 438:ChibiOS/os/hal/src/hal_buffers.c ****  *
 439:ChibiOS/os/hal/src/hal_buffers.c ****  * @init
 440:ChibiOS/os/hal/src/hal_buffers.c ****  */
 441:ChibiOS/os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
 442:ChibiOS/os/hal/src/hal_buffers.c ****                    size_t size, size_t n,
 443:ChibiOS/os/hal/src/hal_buffers.c ****                    bqnotify_t onfy, void *link) {
 1021               		.loc 1 443 0
 1022               		.cfi_startproc
 1023               	.LVL69:
 1024 0000 EF92      		push r14
 1025               	.LCFI29:
 1026               		.cfi_def_cfa_offset 3
 1027               		.cfi_offset 14, -2
 1028 0002 FF92      		push r15
 1029               	.LCFI30:
 1030               		.cfi_def_cfa_offset 4
 1031               		.cfi_offset 15, -3
 1032 0004 0F93      		push r16
 1033               	.LCFI31:
 1034               		.cfi_def_cfa_offset 5
 1035               		.cfi_offset 16, -4
 1036 0006 1F93      		push r17
 1037               	.LCFI32:
 1038               		.cfi_def_cfa_offset 6
 1039               		.cfi_offset 17, -5
 1040               	/* prologue: function */
 1041               	/* frame size = 0 */
 1042               	/* stack size = 4 */
 1043               	.L__stack_usage = 4
 1044 0008 FC01      		movw r30,r24
 1045               	.LVL70:
 1046               	.LBB223:
 1047               	.LBB224:
 765:ChibiOS/os/hal/osal/nil/osal.h **** }
 1048               		.loc 2 765 0
 1049 000a 1082      		st Z,__zero_reg__
 1050               	.LBE224:
 1051               	.LBE223:
 444:ChibiOS/os/hal/src/hal_buffers.c **** 
 445:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 446:ChibiOS/os/hal/src/hal_buffers.c **** 
 447:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 448:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bcounter = n;
 1052               		.loc 1 448 0
 1053 000c 3283      		std Z+2,r19
 1054 000e 2183      		std Z+1,r18
 449:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->brdptr   = bp;
 1055               		.loc 1 449 0
 1056 0010 7683      		std Z+6,r23
 1057 0012 6583      		std Z+5,r22
 450:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bwrptr   = bp;
 1058               		.loc 1 450 0
 1059 0014 7483      		std Z+4,r23
 1060 0016 6383      		std Z+3,r22
 451:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 1061               		.loc 1 451 0
 1062 0018 4E5F      		subi r20,-2
 1063 001a 5F4F      		sbci r21,-1
 1064               	.LVL71:
 1065 001c 249F      		mul r18,r20
 1066 001e C001      		movw r24,r0
 1067 0020 259F      		mul r18,r21
 1068 0022 900D      		add r25,r0
 1069 0024 349F      		mul r19,r20
 1070 0026 900D      		add r25,r0
 1071 0028 1124      		clr r1
 1072               	.LVL72:
 1073 002a 860F      		add r24,r22
 1074 002c 971F      		adc r25,r23
 1075 002e 9087      		std Z+8,r25
 1076 0030 8783      		std Z+7,r24
 452:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bsize    = size + sizeof (size_t);
 1077               		.loc 1 452 0
 1078 0032 5287      		std Z+10,r21
 1079 0034 4187      		std Z+9,r20
 453:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bn       = n;
 1080               		.loc 1 453 0
 1081 0036 3487      		std Z+12,r19
 1082 0038 2387      		std Z+11,r18
 454:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->buffers  = bp;
 1083               		.loc 1 454 0
 1084 003a 7687      		std Z+14,r23
 1085 003c 6587      		std Z+13,r22
 455:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr      = NULL;
 1086               		.loc 1 455 0
 1087 003e 108A      		std Z+16,__zero_reg__
 1088 0040 1786      		std Z+15,__zero_reg__
 456:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->top      = NULL;
 1089               		.loc 1 456 0
 1090 0042 128A      		std Z+18,__zero_reg__
 1091 0044 118A      		std Z+17,__zero_reg__
 457:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->notify   = onfy;
 1092               		.loc 1 457 0
 1093 0046 148B      		std Z+20,r17
 1094 0048 038B      		std Z+19,r16
 458:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->link     = link;
 1095               		.loc 1 458 0
 1096 004a F68A      		std Z+22,r15
 1097 004c E58A      		std Z+21,r14
 1098               	/* epilogue start */
 459:ChibiOS/os/hal/src/hal_buffers.c **** }
 1099               		.loc 1 459 0
 1100 004e 1F91      		pop r17
 1101 0050 0F91      		pop r16
 1102               	.LVL73:
 1103 0052 FF90      		pop r15
 1104 0054 EF90      		pop r14
 1105               	.LVL74:
 1106 0056 0895      		ret
 1107               		.cfi_endproc
 1108               	.LFE63:
 1110               		.section	.text.obqResetI,"ax",@progbits
 1111               	.global	obqResetI
 1113               	obqResetI:
 1114               	.LFB64:
 460:ChibiOS/os/hal/src/hal_buffers.c **** 
 461:ChibiOS/os/hal/src/hal_buffers.c **** /**
 462:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 463:ChibiOS/os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 464:ChibiOS/os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 465:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 466:ChibiOS/os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 467:ChibiOS/os/hal/src/hal_buffers.c ****  *
 468:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 469:ChibiOS/os/hal/src/hal_buffers.c ****  *
 470:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 471:ChibiOS/os/hal/src/hal_buffers.c ****  */
 472:ChibiOS/os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1115               		.loc 1 472 0
 1116               		.cfi_startproc
 1117               	.LVL75:
 1118               	/* prologue: function */
 1119               	/* frame size = 0 */
 1120               	/* stack size = 0 */
 1121               	.L__stack_usage = 0
 1122 0000 FC01      		movw r30,r24
 473:ChibiOS/os/hal/src/hal_buffers.c **** 
 474:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 475:ChibiOS/os/hal/src/hal_buffers.c **** 
 476:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bcounter = bqSizeX(obqp);
 1123               		.loc 1 476 0
 1124 0002 8385      		ldd r24,Z+11
 1125 0004 9485      		ldd r25,Z+12
 1126               	.LVL76:
 1127 0006 9283      		std Z+2,r25
 1128 0008 8183      		std Z+1,r24
 477:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->brdptr   = obqp->buffers;
 1129               		.loc 1 477 0
 1130 000a 8585      		ldd r24,Z+13
 1131 000c 9685      		ldd r25,Z+14
 1132 000e 9683      		std Z+6,r25
 1133 0010 8583      		std Z+5,r24
 478:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bwrptr   = obqp->buffers;
 1134               		.loc 1 478 0
 1135 0012 9483      		std Z+4,r25
 1136 0014 8383      		std Z+3,r24
 479:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr      = NULL;
 1137               		.loc 1 479 0
 1138 0016 108A      		std Z+16,__zero_reg__
 1139 0018 1786      		std Z+15,__zero_reg__
 480:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->top      = NULL;
 1140               		.loc 1 480 0
 1141 001a 128A      		std Z+18,__zero_reg__
 1142 001c 118A      		std Z+17,__zero_reg__
 481:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 1143               		.loc 1 481 0
 1144 001e 6EEF      		ldi r22,lo8(-2)
 1145 0020 7FEF      		ldi r23,lo8(-1)
 1146 0022 CF01      		movw r24,r30
 1147 0024 0C94 0000 		jmp osalThreadDequeueAllI
 1148               	.LVL77:
 1149               		.cfi_endproc
 1150               	.LFE64:
 1152               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1153               	.global	obqGetFullBufferI
 1155               	obqGetFullBufferI:
 1156               	.LFB65:
 482:ChibiOS/os/hal/src/hal_buffers.c **** }
 483:ChibiOS/os/hal/src/hal_buffers.c **** 
 484:ChibiOS/os/hal/src/hal_buffers.c **** /**
 485:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 486:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 487:ChibiOS/os/hal/src/hal_buffers.c ****  *
 488:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 489:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 490:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 491:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 492:ChibiOS/os/hal/src/hal_buffers.c ****  *
 493:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 494:ChibiOS/os/hal/src/hal_buffers.c ****  */
 495:ChibiOS/os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 496:ChibiOS/os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1157               		.loc 1 496 0
 1158               		.cfi_startproc
 1159               	.LVL78:
 1160               	/* prologue: function */
 1161               	/* frame size = 0 */
 1162               	/* stack size = 0 */
 1163               	.L__stack_usage = 0
 1164 0000 FC01      		movw r30,r24
 497:ChibiOS/os/hal/src/hal_buffers.c **** 
 498:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 499:ChibiOS/os/hal/src/hal_buffers.c **** 
 500:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1165               		.loc 1 500 0
 1166 0002 2581      		ldd r18,Z+5
 1167 0004 3681      		ldd r19,Z+6
 1168 0006 8381      		ldd r24,Z+3
 1169 0008 9481      		ldd r25,Z+4
 1170               	.LVL79:
 1171 000a 8217      		cp r24,r18
 1172 000c 9307      		cpc r25,r19
 1173 000e 01F0      		breq .L58
 1174               	.L52:
 501:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 502:ChibiOS/os/hal/src/hal_buffers.c ****   }
 503:ChibiOS/os/hal/src/hal_buffers.c **** 
 504:ChibiOS/os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 505:ChibiOS/os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)obqp->brdptr);
 1175               		.loc 1 505 0
 1176 0010 F901      		movw r30,r18
 1177               	.LVL80:
 1178 0012 2191      		ld r18,Z+
 1179 0014 3191      		ld r19,Z+
 1180 0016 CF01      		movw r24,r30
 1181 0018 FB01      		movw r30,r22
 1182 001a 3183      		std Z+1,r19
 1183 001c 2083      		st Z,r18
 506:ChibiOS/os/hal/src/hal_buffers.c **** 
 507:ChibiOS/os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 508:ChibiOS/os/hal/src/hal_buffers.c **** }
 1184               		.loc 1 508 0
 1185 001e 0895      		ret
 1186               	.LVL81:
 1187               	.L58:
 500:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 1188               		.loc 1 500 0 discriminator 1
 1189 0020 8181      		ldd r24,Z+1
 1190 0022 9281      		ldd r25,Z+2
 1191 0024 892B      		or r24,r25
 1192 0026 01F0      		breq .L52
 501:ChibiOS/os/hal/src/hal_buffers.c ****     return NULL;
 1193               		.loc 1 501 0
 1194 0028 80E0      		ldi r24,0
 1195 002a 90E0      		ldi r25,0
 1196 002c 0895      		ret
 1197               		.cfi_endproc
 1198               	.LFE65:
 1200               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1201               	.global	obqReleaseEmptyBufferI
 1203               	obqReleaseEmptyBufferI:
 1204               	.LFB66:
 509:ChibiOS/os/hal/src/hal_buffers.c **** 
 510:ChibiOS/os/hal/src/hal_buffers.c **** /**
 511:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 512:ChibiOS/os/hal/src/hal_buffers.c ****  *
 513:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 514:ChibiOS/os/hal/src/hal_buffers.c ****  *
 515:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 516:ChibiOS/os/hal/src/hal_buffers.c ****  */
 517:ChibiOS/os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1205               		.loc 1 517 0
 1206               		.cfi_startproc
 1207               	.LVL82:
 1208               	/* prologue: function */
 1209               	/* frame size = 0 */
 1210               	/* stack size = 0 */
 1211               	.L__stack_usage = 0
 1212 0000 FC01      		movw r30,r24
 518:ChibiOS/os/hal/src/hal_buffers.c **** 
 519:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 520:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 521:ChibiOS/os/hal/src/hal_buffers.c **** 
 522:ChibiOS/os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 523:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1213               		.loc 1 523 0
 1214 0002 8181      		ldd r24,Z+1
 1215 0004 9281      		ldd r25,Z+2
 1216               	.LVL83:
 1217 0006 0196      		adiw r24,1
 1218 0008 9283      		std Z+2,r25
 1219 000a 8183      		std Z+1,r24
 524:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1220               		.loc 1 524 0
 1221 000c 2581      		ldd r18,Z+5
 1222 000e 3681      		ldd r19,Z+6
 1223 0010 8185      		ldd r24,Z+9
 1224 0012 9285      		ldd r25,Z+10
 1225 0014 820F      		add r24,r18
 1226 0016 931F      		adc r25,r19
 1227 0018 9683      		std Z+6,r25
 1228 001a 8583      		std Z+5,r24
 525:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1229               		.loc 1 525 0
 1230 001c 2781      		ldd r18,Z+7
 1231 001e 3085      		ldd r19,Z+8
 1232 0020 8217      		cp r24,r18
 1233 0022 9307      		cpc r25,r19
 1234 0024 00F0      		brlo .L60
 526:ChibiOS/os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1235               		.loc 1 526 0
 1236 0026 8585      		ldd r24,Z+13
 1237 0028 9685      		ldd r25,Z+14
 1238 002a 9683      		std Z+6,r25
 1239 002c 8583      		std Z+5,r24
 1240               	.L60:
 527:ChibiOS/os/hal/src/hal_buffers.c ****   }
 528:ChibiOS/os/hal/src/hal_buffers.c **** 
 529:ChibiOS/os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 530:ChibiOS/os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 1241               		.loc 1 530 0
 1242 002e 60E0      		ldi r22,0
 1243 0030 70E0      		ldi r23,0
 1244 0032 CF01      		movw r24,r30
 1245 0034 0C94 0000 		jmp osalThreadDequeueNextI
 1246               	.LVL84:
 1247               		.cfi_endproc
 1248               	.LFE66:
 1250               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1251               	.global	obqGetEmptyBufferTimeoutS
 1253               	obqGetEmptyBufferTimeoutS:
 1254               	.LFB68:
 531:ChibiOS/os/hal/src/hal_buffers.c **** }
 532:ChibiOS/os/hal/src/hal_buffers.c **** 
 533:ChibiOS/os/hal/src/hal_buffers.c **** /**
 534:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 535:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 536:ChibiOS/os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 537:ChibiOS/os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 538:ChibiOS/os/hal/src/hal_buffers.c ****  *          is empty.
 539:ChibiOS/os/hal/src/hal_buffers.c ****  *
 540:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 541:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 542:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 543:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 544:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 545:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 546:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 547:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 548:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 549:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset.
 550:ChibiOS/os/hal/src/hal_buffers.c ****  *
 551:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 552:ChibiOS/os/hal/src/hal_buffers.c ****  */
 553:ChibiOS/os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 554:ChibiOS/os/hal/src/hal_buffers.c ****                                 systime_t timeout) {
 555:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 556:ChibiOS/os/hal/src/hal_buffers.c **** 
 557:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 558:ChibiOS/os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 559:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 560:ChibiOS/os/hal/src/hal_buffers.c **** 
 561:ChibiOS/os/hal/src/hal_buffers.c ****   return msg;
 562:ChibiOS/os/hal/src/hal_buffers.c **** }
 563:ChibiOS/os/hal/src/hal_buffers.c **** 
 564:ChibiOS/os/hal/src/hal_buffers.c ****   /**
 565:ChibiOS/os/hal/src/hal_buffers.c ****    * @brief   Gets the next empty buffer from the queue.
 566:ChibiOS/os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 567:ChibiOS/os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 568:ChibiOS/os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 569:ChibiOS/os/hal/src/hal_buffers.c ****    *          is empty.
 570:ChibiOS/os/hal/src/hal_buffers.c ****    *
 571:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 572:ChibiOS/os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 573:ChibiOS/os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 574:ChibiOS/os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 575:ChibiOS/os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 576:ChibiOS/os/hal/src/hal_buffers.c ****    *                      .
 577:ChibiOS/os/hal/src/hal_buffers.c ****    * @return              The operation status.
 578:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 579:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 580:ChibiOS/os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset.
 581:ChibiOS/os/hal/src/hal_buffers.c ****    *
 582:ChibiOS/os/hal/src/hal_buffers.c ****    * @sclass
 583:ChibiOS/os/hal/src/hal_buffers.c ****    */
 584:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 585:ChibiOS/os/hal/src/hal_buffers.c ****                                   systime_t timeout) {
 1255               		.loc 1 585 0
 1256               		.cfi_startproc
 1257               	.LVL85:
 1258 0000 0F93      		push r16
 1259               	.LCFI33:
 1260               		.cfi_def_cfa_offset 3
 1261               		.cfi_offset 16, -2
 1262 0002 1F93      		push r17
 1263               	.LCFI34:
 1264               		.cfi_def_cfa_offset 4
 1265               		.cfi_offset 17, -3
 1266 0004 CF93      		push r28
 1267               	.LCFI35:
 1268               		.cfi_def_cfa_offset 5
 1269               		.cfi_offset 28, -4
 1270 0006 DF93      		push r29
 1271               	.LCFI36:
 1272               		.cfi_def_cfa_offset 6
 1273               		.cfi_offset 29, -5
 1274               	/* prologue: function */
 1275               	/* frame size = 0 */
 1276               	/* stack size = 4 */
 1277               	.L__stack_usage = 4
 1278 0008 EC01      		movw r28,r24
 1279 000a 8B01      		movw r16,r22
 586:ChibiOS/os/hal/src/hal_buffers.c **** 
 587:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 588:ChibiOS/os/hal/src/hal_buffers.c **** 
 589:ChibiOS/os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1280               		.loc 1 589 0
 1281 000c 00C0      		rjmp .L62
 1282               	.LVL86:
 1283               	.L64:
 1284               	.LBB233:
 1285               	.LBB234:
 1286               	.LBB235:
 1287               		.loc 2 794 0
 1288 000e B801      		movw r22,r16
 1289 0010 CE01      		movw r24,r28
 1290 0012 0E94 0000 		call chSemWaitTimeoutS
 1291               	.LVL87:
 1292               	.LBE235:
 1293               	.LBE234:
 590:ChibiOS/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 591:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1294               		.loc 1 591 0
 1295 0016 97FD      		sbrc r25,7
 1296 0018 00C0      		rjmp .L63
 1297               	.LVL88:
 1298               	.L62:
 1299               	.LBE233:
 589:ChibiOS/os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 1300               		.loc 1 589 0
 1301 001a 8981      		ldd r24,Y+1
 1302 001c 9A81      		ldd r25,Y+2
 1303 001e 892B      		or r24,r25
 1304 0020 01F0      		breq .L64
 1305               	.LVL89:
 1306               	.LBB236:
 1307               	.LBB237:
 592:ChibiOS/os/hal/src/hal_buffers.c ****       return msg;
 593:ChibiOS/os/hal/src/hal_buffers.c ****     }
 594:ChibiOS/os/hal/src/hal_buffers.c ****   }
 595:ChibiOS/os/hal/src/hal_buffers.c **** 
 596:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 597:ChibiOS/os/hal/src/hal_buffers.c **** 
 598:ChibiOS/os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 599:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1308               		.loc 1 599 0
 1309 0022 2B81      		ldd r18,Y+3
 1310 0024 3C81      		ldd r19,Y+4
 1311 0026 C901      		movw r24,r18
 1312 0028 0296      		adiw r24,2
 1313 002a 988B      		std Y+16,r25
 1314 002c 8F87      		std Y+15,r24
 600:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1315               		.loc 1 600 0
 1316 002e 8985      		ldd r24,Y+9
 1317 0030 9A85      		ldd r25,Y+10
 1318 0032 820F      		add r24,r18
 1319 0034 931F      		adc r25,r19
 1320 0036 9A8B      		std Y+18,r25
 1321 0038 898B      		std Y+17,r24
 1322 003a 80E0      		ldi r24,0
 1323 003c 90E0      		ldi r25,0
 1324               	.LVL90:
 1325               	.L63:
 1326               	/* epilogue start */
 1327               	.LBE237:
 1328               	.LBE236:
 601:ChibiOS/os/hal/src/hal_buffers.c **** 
 602:ChibiOS/os/hal/src/hal_buffers.c ****   return MSG_OK;
 603:ChibiOS/os/hal/src/hal_buffers.c **** }
 1329               		.loc 1 603 0
 1330 003e DF91      		pop r29
 1331 0040 CF91      		pop r28
 1332               	.LVL91:
 1333 0042 1F91      		pop r17
 1334 0044 0F91      		pop r16
 1335               	.LVL92:
 1336 0046 0895      		ret
 1337               		.cfi_endproc
 1338               	.LFE68:
 1340               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1341               	.global	obqGetEmptyBufferTimeout
 1343               	obqGetEmptyBufferTimeout:
 1344               	.LFB67:
 554:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 1345               		.loc 1 554 0
 1346               		.cfi_startproc
 1347               	.LVL93:
 1348               	/* prologue: function */
 1349               	/* frame size = 0 */
 1350               	/* stack size = 0 */
 1351               	.L__stack_usage = 0
 1352               	.LBB238:
 1353               	.LBB239:
 1354               	.LBB240:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 1355               		.loc 3 325 0
 1356               	/* #APP */
 1357               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1358 0000 F894      		cli
 1359               	 ;  0 "" 2
 1360               	/* #NOAPP */
 1361               	.LBE240:
 1362               	.LBE239:
 1363               	.LBE238:
 558:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1364               		.loc 1 558 0
 1365 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1366               	.LVL94:
 1367               	.LBB241:
 1368               	.LBB242:
 1369               	.LBB243:
 1370               		.loc 3 333 0
 1371               	/* #APP */
 1372               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1373 0006 7894      		sei
 1374               	 ;  0 "" 2
 1375               	/* #NOAPP */
 1376               	.LBE243:
 1377               	.LBE242:
 1378               	.LBE241:
 562:ChibiOS/os/hal/src/hal_buffers.c **** 
 1379               		.loc 1 562 0
 1380 0008 0895      		ret
 1381               		.cfi_endproc
 1382               	.LFE67:
 1384               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1385               	.global	obqPostFullBufferS
 1387               	obqPostFullBufferS:
 1388               	.LFB70:
 604:ChibiOS/os/hal/src/hal_buffers.c **** 
 605:ChibiOS/os/hal/src/hal_buffers.c **** /**
 606:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 607:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 608:ChibiOS/os/hal/src/hal_buffers.c ****  *
 609:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 610:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 611:ChibiOS/os/hal/src/hal_buffers.c ****  *
 612:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 613:ChibiOS/os/hal/src/hal_buffers.c ****  */
 614:ChibiOS/os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 615:ChibiOS/os/hal/src/hal_buffers.c **** 
 616:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 617:ChibiOS/os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 618:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 619:ChibiOS/os/hal/src/hal_buffers.c **** }
 620:ChibiOS/os/hal/src/hal_buffers.c **** 
 621:ChibiOS/os/hal/src/hal_buffers.c **** /**
 622:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 623:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 624:ChibiOS/os/hal/src/hal_buffers.c ****  *
 625:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 626:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 627:ChibiOS/os/hal/src/hal_buffers.c ****  *
 628:ChibiOS/os/hal/src/hal_buffers.c ****  * @sclass
 629:ChibiOS/os/hal/src/hal_buffers.c ****  */
 630:ChibiOS/os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 1389               		.loc 1 630 0
 1390               		.cfi_startproc
 1391               	.LVL95:
 1392               	/* prologue: function */
 1393               	/* frame size = 0 */
 1394               	/* stack size = 0 */
 1395               	.L__stack_usage = 0
 1396 0000 DC01      		movw r26,r24
 631:ChibiOS/os/hal/src/hal_buffers.c **** 
 632:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 633:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 634:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 635:ChibiOS/os/hal/src/hal_buffers.c **** 
 636:ChibiOS/os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 637:ChibiOS/os/hal/src/hal_buffers.c ****   *((size_t *)obqp->bwrptr) = size;
 1397               		.loc 1 637 0
 1398 0002 1396      		adiw r26,3
 1399 0004 ED91      		ld r30,X+
 1400 0006 FC91      		ld r31,X
 1401 0008 1497      		sbiw r26,3+1
 1402 000a 7183      		std Z+1,r23
 1403 000c 6083      		st Z,r22
 638:ChibiOS/os/hal/src/hal_buffers.c **** 
 639:ChibiOS/os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 640:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1404               		.loc 1 640 0
 1405 000e 1196      		adiw r26,1
 1406 0010 2D91      		ld r18,X+
 1407 0012 3C91      		ld r19,X
 1408 0014 1297      		sbiw r26,1+1
 1409 0016 2150      		subi r18,1
 1410 0018 3109      		sbc r19,__zero_reg__
 1411 001a 1296      		adiw r26,1+1
 1412 001c 3C93      		st X,r19
 1413 001e 2E93      		st -X,r18
 1414 0020 1197      		sbiw r26,1
 641:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1415               		.loc 1 641 0
 1416 0022 1996      		adiw r26,9
 1417 0024 8D91      		ld r24,X+
 1418 0026 9C91      		ld r25,X
 1419 0028 1A97      		sbiw r26,9+1
 1420               	.LVL96:
 1421 002a 8E0F      		add r24,r30
 1422 002c 9F1F      		adc r25,r31
 1423 002e 1496      		adiw r26,3+1
 1424 0030 9C93      		st X,r25
 1425 0032 8E93      		st -X,r24
 1426 0034 1397      		sbiw r26,3
 642:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1427               		.loc 1 642 0
 1428 0036 1796      		adiw r26,7
 1429 0038 2D91      		ld r18,X+
 1430 003a 3C91      		ld r19,X
 1431 003c 1897      		sbiw r26,7+1
 1432 003e 8217      		cp r24,r18
 1433 0040 9307      		cpc r25,r19
 1434 0042 00F0      		brlo .L68
 643:ChibiOS/os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1435               		.loc 1 643 0
 1436 0044 1D96      		adiw r26,13
 1437 0046 8D91      		ld r24,X+
 1438 0048 9C91      		ld r25,X
 1439 004a 1E97      		sbiw r26,13+1
 1440 004c 1496      		adiw r26,3+1
 1441 004e 9C93      		st X,r25
 1442 0050 8E93      		st -X,r24
 1443 0052 1397      		sbiw r26,3
 1444               	.L68:
 644:ChibiOS/os/hal/src/hal_buffers.c ****   }
 645:ChibiOS/os/hal/src/hal_buffers.c **** 
 646:ChibiOS/os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 647:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1445               		.loc 1 647 0
 1446 0054 5096      		adiw r26,15+1
 1447 0056 1C92      		st X,__zero_reg__
 1448 0058 1E92      		st -X,__zero_reg__
 1449 005a 1F97      		sbiw r26,15
 648:ChibiOS/os/hal/src/hal_buffers.c **** 
 649:ChibiOS/os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 650:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1450               		.loc 1 650 0
 1451 005c 5396      		adiw r26,19
 1452 005e ED91      		ld r30,X+
 1453 0060 FC91      		ld r31,X
 1454 0062 5497      		sbiw r26,19+1
 1455 0064 3097      		sbiw r30,0
 1456 0066 01F0      		breq .L67
 651:ChibiOS/os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1457               		.loc 1 651 0
 1458 0068 CD01      		movw r24,r26
 1459 006a 0994      		ijmp
 1460               	.LVL97:
 1461               	.L67:
 1462 006c 0895      		ret
 1463               		.cfi_endproc
 1464               	.LFE70:
 1466               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1467               	.global	obqPostFullBuffer
 1469               	obqPostFullBuffer:
 1470               	.LFB69:
 614:ChibiOS/os/hal/src/hal_buffers.c **** 
 1471               		.loc 1 614 0
 1472               		.cfi_startproc
 1473               	.LVL98:
 1474               	/* prologue: function */
 1475               	/* frame size = 0 */
 1476               	/* stack size = 0 */
 1477               	.L__stack_usage = 0
 1478               	.LBB244:
 1479               	.LBB245:
 1480               	.LBB246:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 1481               		.loc 3 325 0
 1482               	/* #APP */
 1483               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1484 0000 F894      		cli
 1485               	 ;  0 "" 2
 1486               	/* #NOAPP */
 1487               	.LBE246:
 1488               	.LBE245:
 1489               	.LBE244:
 617:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1490               		.loc 1 617 0
 1491 0002 0E94 0000 		call obqPostFullBufferS
 1492               	.LVL99:
 1493               	.LBB247:
 1494               	.LBB248:
 1495               	.LBB249:
 1496               		.loc 3 333 0
 1497               	/* #APP */
 1498               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1499 0006 7894      		sei
 1500               	 ;  0 "" 2
 1501               	/* #NOAPP */
 1502 0008 0895      		ret
 1503               	.LBE249:
 1504               	.LBE248:
 1505               	.LBE247:
 1506               		.cfi_endproc
 1507               	.LFE69:
 1509               		.section	.text.obqPutTimeout,"ax",@progbits
 1510               	.global	obqPutTimeout
 1512               	obqPutTimeout:
 1513               	.LFB71:
 652:ChibiOS/os/hal/src/hal_buffers.c ****   }
 653:ChibiOS/os/hal/src/hal_buffers.c **** }
 654:ChibiOS/os/hal/src/hal_buffers.c **** 
 655:ChibiOS/os/hal/src/hal_buffers.c **** /**
 656:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 657:ChibiOS/os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 658:ChibiOS/os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 659:ChibiOS/os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 660:ChibiOS/os/hal/src/hal_buffers.c ****  *
 661:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 662:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 663:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 664:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 665:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 666:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 667:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 668:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 669:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 670:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset.
 671:ChibiOS/os/hal/src/hal_buffers.c ****  *
 672:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 673:ChibiOS/os/hal/src/hal_buffers.c ****  */
 674:ChibiOS/os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 675:ChibiOS/os/hal/src/hal_buffers.c ****                     systime_t timeout) {
 1514               		.loc 1 675 0
 1515               		.cfi_startproc
 1516               	.LVL100:
 1517 0000 1F93      		push r17
 1518               	.LCFI37:
 1519               		.cfi_def_cfa_offset 3
 1520               		.cfi_offset 17, -2
 1521 0002 CF93      		push r28
 1522               	.LCFI38:
 1523               		.cfi_def_cfa_offset 4
 1524               		.cfi_offset 28, -3
 1525 0004 DF93      		push r29
 1526               	.LCFI39:
 1527               		.cfi_def_cfa_offset 5
 1528               		.cfi_offset 29, -4
 1529               	/* prologue: function */
 1530               	/* frame size = 0 */
 1531               	/* stack size = 3 */
 1532               	.L__stack_usage = 3
 1533 0006 EC01      		movw r28,r24
 1534 0008 162F      		mov r17,r22
 1535               	.LBB250:
 1536               	.LBB251:
 1537               	.LBB252:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 1538               		.loc 3 325 0
 1539               	/* #APP */
 1540               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1541 000a F894      		cli
 1542               	 ;  0 "" 2
 1543               	/* #NOAPP */
 1544               	.LBE252:
 1545               	.LBE251:
 1546               	.LBE250:
 676:ChibiOS/os/hal/src/hal_buffers.c ****   msg_t msg;
 677:ChibiOS/os/hal/src/hal_buffers.c **** 
 678:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 679:ChibiOS/os/hal/src/hal_buffers.c **** 
 680:ChibiOS/os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 681:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1547               		.loc 1 681 0
 1548 000c EF85      		ldd r30,Y+15
 1549 000e F889      		ldd r31,Y+16
 1550 0010 3097      		sbiw r30,0
 1551 0012 01F0      		breq .L76
 1552               	.LVL101:
 1553               	.L72:
 682:ChibiOS/os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 683:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 684:ChibiOS/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 685:ChibiOS/os/hal/src/hal_buffers.c ****       return msg;
 686:ChibiOS/os/hal/src/hal_buffers.c ****     }
 687:ChibiOS/os/hal/src/hal_buffers.c ****   }
 688:ChibiOS/os/hal/src/hal_buffers.c **** 
 689:ChibiOS/os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 690:ChibiOS/os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1554               		.loc 1 690 0
 1555 0014 1083      		st Z,r17
 691:ChibiOS/os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1556               		.loc 1 691 0
 1557 0016 8F85      		ldd r24,Y+15
 1558 0018 9889      		ldd r25,Y+16
 1559 001a 0196      		adiw r24,1
 1560 001c 988B      		std Y+16,r25
 1561 001e 8F87      		std Y+15,r24
 692:ChibiOS/os/hal/src/hal_buffers.c **** 
 693:ChibiOS/os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 694:ChibiOS/os/hal/src/hal_buffers.c ****      full in the queue.*/
 695:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1562               		.loc 1 695 0
 1563 0020 2989      		ldd r18,Y+17
 1564 0022 3A89      		ldd r19,Y+18
 1565 0024 8217      		cp r24,r18
 1566 0026 9307      		cpc r25,r19
 1567 0028 00F4      		brsh .L77
 1568               	.L75:
 1569               	.LBB253:
 1570               	.LBB254:
 1571               	.LBB255:
 1572               		.loc 3 333 0
 1573               	/* #APP */
 1574               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1575 002a 7894      		sei
 1576               	 ;  0 "" 2
 1577               	/* #NOAPP */
 1578               	.LBE255:
 1579               	.LBE254:
 1580               	.LBE253:
 696:ChibiOS/os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 697:ChibiOS/os/hal/src/hal_buffers.c ****   }
 698:ChibiOS/os/hal/src/hal_buffers.c **** 
 699:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysUnlock();
 700:ChibiOS/os/hal/src/hal_buffers.c ****   return MSG_OK;
 1581               		.loc 1 700 0
 1582 002c 80E0      		ldi r24,0
 1583 002e 90E0      		ldi r25,0
 1584               	.L74:
 1585               	/* epilogue start */
 701:ChibiOS/os/hal/src/hal_buffers.c **** }
 1586               		.loc 1 701 0
 1587 0030 DF91      		pop r29
 1588 0032 CF91      		pop r28
 1589               	.LVL102:
 1590 0034 1F91      		pop r17
 1591               	.LVL103:
 1592 0036 0895      		ret
 1593               	.LVL104:
 1594               	.L77:
 696:ChibiOS/os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1595               		.loc 1 696 0
 1596 0038 6985      		ldd r22,Y+9
 1597 003a 7A85      		ldd r23,Y+10
 1598 003c 6250      		subi r22,2
 1599 003e 7109      		sbc r23,__zero_reg__
 1600 0040 CE01      		movw r24,r28
 1601 0042 0E94 0000 		call obqPostFullBufferS
 1602               	.LVL105:
 1603 0046 00C0      		rjmp .L75
 1604               	.LVL106:
 1605               	.L76:
 682:ChibiOS/os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1606               		.loc 1 682 0
 1607 0048 BA01      		movw r22,r20
 1608 004a 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1609               	.LVL107:
 683:ChibiOS/os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1610               		.loc 1 683 0
 1611 004e 0097      		sbiw r24,0
 1612 0050 01F4      		brne .L73
 1613 0052 EF85      		ldd r30,Y+15
 1614 0054 F889      		ldd r31,Y+16
 1615 0056 00C0      		rjmp .L72
 1616               	.L73:
 1617               	.LBB256:
 1618               	.LBB257:
 1619               	.LBB258:
 1620               		.loc 3 333 0
 1621               	/* #APP */
 1622               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1623 0058 7894      		sei
 1624               	 ;  0 "" 2
 1625               	/* #NOAPP */
 1626               	.LBE258:
 1627               	.LBE257:
 1628               	.LBE256:
 685:ChibiOS/os/hal/src/hal_buffers.c ****     }
 1629               		.loc 1 685 0
 1630 005a 00C0      		rjmp .L74
 1631               		.cfi_endproc
 1632               	.LFE71:
 1634               		.section	.text.obqWriteTimeout,"ax",@progbits
 1635               	.global	obqWriteTimeout
 1637               	obqWriteTimeout:
 1638               	.LFB72:
 702:ChibiOS/os/hal/src/hal_buffers.c **** 
 703:ChibiOS/os/hal/src/hal_buffers.c **** /**
 704:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 705:ChibiOS/os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 706:ChibiOS/os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 707:ChibiOS/os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 708:ChibiOS/os/hal/src/hal_buffers.c ****  *          been reset.
 709:ChibiOS/os/hal/src/hal_buffers.c ****  *
 710:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 711:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 712:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 713:ChibiOS/os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 714:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 715:ChibiOS/os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 716:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 717:ChibiOS/os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 718:ChibiOS/os/hal/src/hal_buffers.c ****  *                      .
 719:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 720:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 721:ChibiOS/os/hal/src/hal_buffers.c ****  *
 722:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 723:ChibiOS/os/hal/src/hal_buffers.c ****  */
 724:ChibiOS/os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 725:ChibiOS/os/hal/src/hal_buffers.c ****                        size_t n, systime_t timeout) {
 1639               		.loc 1 725 0
 1640               		.cfi_startproc
 1641               	.LVL108:
 1642 0000 3F92      		push r3
 1643               	.LCFI40:
 1644               		.cfi_def_cfa_offset 3
 1645               		.cfi_offset 3, -2
 1646 0002 4F92      		push r4
 1647               	.LCFI41:
 1648               		.cfi_def_cfa_offset 4
 1649               		.cfi_offset 4, -3
 1650 0004 5F92      		push r5
 1651               	.LCFI42:
 1652               		.cfi_def_cfa_offset 5
 1653               		.cfi_offset 5, -4
 1654 0006 6F92      		push r6
 1655               	.LCFI43:
 1656               		.cfi_def_cfa_offset 6
 1657               		.cfi_offset 6, -5
 1658 0008 7F92      		push r7
 1659               	.LCFI44:
 1660               		.cfi_def_cfa_offset 7
 1661               		.cfi_offset 7, -6
 1662 000a 8F92      		push r8
 1663               	.LCFI45:
 1664               		.cfi_def_cfa_offset 8
 1665               		.cfi_offset 8, -7
 1666 000c 9F92      		push r9
 1667               	.LCFI46:
 1668               		.cfi_def_cfa_offset 9
 1669               		.cfi_offset 9, -8
 1670 000e AF92      		push r10
 1671               	.LCFI47:
 1672               		.cfi_def_cfa_offset 10
 1673               		.cfi_offset 10, -9
 1674 0010 BF92      		push r11
 1675               	.LCFI48:
 1676               		.cfi_def_cfa_offset 11
 1677               		.cfi_offset 11, -10
 1678 0012 CF92      		push r12
 1679               	.LCFI49:
 1680               		.cfi_def_cfa_offset 12
 1681               		.cfi_offset 12, -11
 1682 0014 DF92      		push r13
 1683               	.LCFI50:
 1684               		.cfi_def_cfa_offset 13
 1685               		.cfi_offset 13, -12
 1686 0016 EF92      		push r14
 1687               	.LCFI51:
 1688               		.cfi_def_cfa_offset 14
 1689               		.cfi_offset 14, -13
 1690 0018 FF92      		push r15
 1691               	.LCFI52:
 1692               		.cfi_def_cfa_offset 15
 1693               		.cfi_offset 15, -14
 1694 001a 0F93      		push r16
 1695               	.LCFI53:
 1696               		.cfi_def_cfa_offset 16
 1697               		.cfi_offset 16, -15
 1698 001c 1F93      		push r17
 1699               	.LCFI54:
 1700               		.cfi_def_cfa_offset 17
 1701               		.cfi_offset 17, -16
 1702 001e CF93      		push r28
 1703               	.LCFI55:
 1704               		.cfi_def_cfa_offset 18
 1705               		.cfi_offset 28, -17
 1706 0020 DF93      		push r29
 1707               	.LCFI56:
 1708               		.cfi_def_cfa_offset 19
 1709               		.cfi_offset 29, -18
 1710               	/* prologue: function */
 1711               	/* frame size = 0 */
 1712               	/* stack size = 17 */
 1713               	.L__stack_usage = 17
 1714 0022 8C01      		movw r16,r24
 1715 0024 7B01      		movw r14,r22
 1716 0026 6A01      		movw r12,r20
 1717 0028 5901      		movw r10,r18
 1718               	.LVL109:
 1719               	.LBB259:
 1720               	.LBB260:
 1721               	.LBB261:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 1722               		.loc 3 325 0
 1723               	/* #APP */
 1724               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1725 002a F894      		cli
 1726               	 ;  0 "" 2
 1727               	/* #NOAPP */
 1728               	.LBE261:
 1729               	.LBE260:
 1730               	.LBE259:
 1731               	.LBB262:
 1732               	.LBB263:
 1733               	.LBB264:
 1734               	.LBB265:
 1735               		.loc 4 92 0
 1736 002c 4090 8400 		lds r4,132
 1737 0030 5090 8500 		lds r5,132+1
 1738               	.LBE265:
 1739               	.LBE264:
 1740               	.LBE263:
 1741               	.LBE262:
 726:ChibiOS/os/hal/src/hal_buffers.c ****   size_t w = 0;
 727:ChibiOS/os/hal/src/hal_buffers.c ****   systime_t deadline;
 728:ChibiOS/os/hal/src/hal_buffers.c **** 
 729:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 730:ChibiOS/os/hal/src/hal_buffers.c **** 
 731:ChibiOS/os/hal/src/hal_buffers.c ****   /* Time window for the whole operation.*/
 732:ChibiOS/os/hal/src/hal_buffers.c ****   deadline = osalOsGetSystemTimeX() + timeout;
 1742               		.loc 1 732 0
 1743 0034 420E      		add r4,r18
 1744 0036 531E      		adc r5,r19
 1745               	.LVL110:
 726:ChibiOS/os/hal/src/hal_buffers.c ****   size_t w = 0;
 1746               		.loc 1 726 0
 1747 0038 612C      		mov r6,__zero_reg__
 1748 003a 712C      		mov r7,__zero_reg__
 1749               	.LBB266:
 1750               	.LBB267:
 733:ChibiOS/os/hal/src/hal_buffers.c **** 
 734:ChibiOS/os/hal/src/hal_buffers.c ****   while (true) {
 735:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size;
 736:ChibiOS/os/hal/src/hal_buffers.c **** 
 737:ChibiOS/os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 738:ChibiOS/os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 739:ChibiOS/os/hal/src/hal_buffers.c ****       msg_t msg;
 740:ChibiOS/os/hal/src/hal_buffers.c **** 
 741:ChibiOS/os/hal/src/hal_buffers.c ****       /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
 742:ChibiOS/os/hal/src/hal_buffers.c ****          deadline.*/
 743:ChibiOS/os/hal/src/hal_buffers.c ****       if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 1751               		.loc 1 743 0
 1752 003c 4901      		movw r8,r18
 1753 003e 21E0      		ldi r18,1
 1754 0040 821A      		sub r8,r18
 1755 0042 9108      		sbc r9,__zero_reg__
 1756               	.LVL111:
 1757               	.LBE267:
 744:ChibiOS/os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 745:ChibiOS/os/hal/src/hal_buffers.c ****       }
 746:ChibiOS/os/hal/src/hal_buffers.c ****       else {
 747:ChibiOS/os/hal/src/hal_buffers.c ****         systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 748:ChibiOS/os/hal/src/hal_buffers.c **** 
 749:ChibiOS/os/hal/src/hal_buffers.c ****         /* Handling the case where the system time went past the deadline,
 750:ChibiOS/os/hal/src/hal_buffers.c ****            in this case next becomes a very high number because the system
 751:ChibiOS/os/hal/src/hal_buffers.c ****            time is an unsigned type.*/
 752:ChibiOS/os/hal/src/hal_buffers.c ****         if (next_timeout > timeout) {
 753:ChibiOS/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 754:ChibiOS/os/hal/src/hal_buffers.c ****           return w;
 755:ChibiOS/os/hal/src/hal_buffers.c ****         }
 756:ChibiOS/os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 757:ChibiOS/os/hal/src/hal_buffers.c ****       }
 758:ChibiOS/os/hal/src/hal_buffers.c **** 
 759:ChibiOS/os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 760:ChibiOS/os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 761:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 762:ChibiOS/os/hal/src/hal_buffers.c ****         return w;
 763:ChibiOS/os/hal/src/hal_buffers.c ****       }
 764:ChibiOS/os/hal/src/hal_buffers.c ****     }
 765:ChibiOS/os/hal/src/hal_buffers.c **** 
 766:ChibiOS/os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 767:ChibiOS/os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 768:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 769:ChibiOS/os/hal/src/hal_buffers.c ****       size = n - w;
 770:ChibiOS/os/hal/src/hal_buffers.c ****     }
 771:ChibiOS/os/hal/src/hal_buffers.c **** 
 772:ChibiOS/os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 773:ChibiOS/os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 774:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > 64U) {
 775:ChibiOS/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 776:ChibiOS/os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, 64U);
 1758               		.loc 1 776 0
 1759 0044 80E4      		ldi r24,lo8(64)
 1760 0046 382E      		mov r3,r24
 1761               	.LVL112:
 1762 0048 00C0      		rjmp .L89
 1763               	.LVL113:
 1764               	.L92:
 1765 004a F701      		movw r30,r14
 1766 004c DC01      		movw r26,r24
 1767 004e 832D      		mov r24,r3
 1768               		0:
 1769 0050 0190      		ld r0,Z+
 1770 0052 0D92      		st X+,r0
 1771 0054 8A95      		dec r24
 1772 0056 01F4      		brne 0b
 777:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += 64U;
 1773               		.loc 1 777 0
 1774 0058 F0E4      		ldi r31,64
 1775 005a EF0E      		add r14,r31
 1776 005c F11C      		adc r15,__zero_reg__
 1777               	.LVL114:
 778:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->ptr += 64U;
 1778               		.loc 1 778 0
 1779 005e F801      		movw r30,r16
 1780 0060 8785      		ldd r24,Z+15
 1781 0062 9089      		ldd r25,Z+16
 1782 0064 805C      		subi r24,-64
 1783 0066 9F4F      		sbci r25,-1
 1784 0068 908B      		std Z+16,r25
 1785 006a 8787      		std Z+15,r24
 779:ChibiOS/os/hal/src/hal_buffers.c ****       w         += 64U;
 1786               		.loc 1 779 0
 1787 006c F0E4      		ldi r31,64
 1788 006e 6F0E      		add r6,r31
 1789 0070 711C      		adc r7,__zero_reg__
 1790               	.LVL115:
 780:ChibiOS/os/hal/src/hal_buffers.c ****     }
 781:ChibiOS/os/hal/src/hal_buffers.c ****     else {
 782:ChibiOS/os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 783:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += size;
 784:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 785:ChibiOS/os/hal/src/hal_buffers.c ****       w         += size;
 786:ChibiOS/os/hal/src/hal_buffers.c ****     }
 787:ChibiOS/os/hal/src/hal_buffers.c **** 
 788:ChibiOS/os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 789:ChibiOS/os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 1791               		.loc 1 789 0
 1792 0072 F801      		movw r30,r16
 1793 0074 2189      		ldd r18,Z+17
 1794 0076 3289      		ldd r19,Z+18
 1795 0078 8217      		cp r24,r18
 1796 007a 9307      		cpc r25,r19
 1797 007c 00F4      		brsh .L90
 1798               	.L88:
 1799               	.LBB276:
 1800               	.LBB277:
 1801               	.LBB278:
 1802               		.loc 3 333 0
 1803               	/* #APP */
 1804               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1805 007e 7894      		sei
 1806               	 ;  0 "" 2
 1807               	/* #NOAPP */
 1808               	.LBE278:
 1809               	.LBE277:
 1810               	.LBE276:
 790:ChibiOS/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 791:ChibiOS/os/hal/src/hal_buffers.c ****     }
 792:ChibiOS/os/hal/src/hal_buffers.c **** 
 793:ChibiOS/os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 794:ChibiOS/os/hal/src/hal_buffers.c ****     osalSysUnlock();
 795:ChibiOS/os/hal/src/hal_buffers.c ****     if (w >= n) {
 1811               		.loc 1 795 0
 1812 0080 6C14      		cp r6,r12
 1813 0082 7D04      		cpc r7,r13
 1814 0084 00F4      		brsh .L83
 1815               	.L93:
 1816               	.LBB281:
 1817               	.LBB282:
 1818               	.LBB283:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 1819               		.loc 3 325 0
 1820               	/* #APP */
 1821               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1822 0086 F894      		cli
 1823               	 ;  0 "" 2
 1824               	.LVL116:
 1825               	/* #NOAPP */
 1826               	.L89:
 1827               	.LBE283:
 1828               	.LBE282:
 1829               	.LBE281:
 738:ChibiOS/os/hal/src/hal_buffers.c ****       msg_t msg;
 1830               		.loc 1 738 0
 1831 0088 F801      		movw r30,r16
 1832 008a 8785      		ldd r24,Z+15
 1833 008c 9089      		ldd r25,Z+16
 1834 008e 0097      		sbiw r24,0
 1835 0090 01F4      		brne .+2
 1836 0092 00C0      		rjmp .L91
 1837               	.L79:
 767:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 1838               		.loc 1 767 0
 1839 0094 F801      		movw r30,r16
 1840 0096 C189      		ldd r28,Z+17
 1841 0098 D289      		ldd r29,Z+18
 1842               	.LVL117:
 768:ChibiOS/os/hal/src/hal_buffers.c ****       size = n - w;
 1843               		.loc 1 768 0
 1844 009a 9601      		movw r18,r12
 1845 009c 2619      		sub r18,r6
 1846 009e 3709      		sbc r19,r7
 1847 00a0 C81B      		sub r28,r24
 1848 00a2 D90B      		sbc r29,r25
 1849               	.LVL118:
 1850 00a4 2C17      		cp r18,r28
 1851 00a6 3D07      		cpc r19,r29
 1852 00a8 00F4      		brsh .L85
 1853 00aa E901      		movw r28,r18
 1854               	.LVL119:
 1855               	.L85:
 774:ChibiOS/os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 1856               		.loc 1 774 0
 1857 00ac C134      		cpi r28,65
 1858 00ae D105      		cpc r29,__zero_reg__
 1859 00b0 00F4      		brsh .L92
 782:ChibiOS/os/hal/src/hal_buffers.c ****       bp        += size;
 1860               		.loc 1 782 0
 1861 00b2 AE01      		movw r20,r28
 1862 00b4 B701      		movw r22,r14
 1863 00b6 0E94 0000 		call memcpy
 1864               	.LVL120:
 783:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 1865               		.loc 1 783 0
 1866 00ba EC0E      		add r14,r28
 1867 00bc FD1E      		adc r15,r29
 1868               	.LVL121:
 784:ChibiOS/os/hal/src/hal_buffers.c ****       w         += size;
 1869               		.loc 1 784 0
 1870 00be F801      		movw r30,r16
 1871 00c0 8785      		ldd r24,Z+15
 1872 00c2 9089      		ldd r25,Z+16
 1873 00c4 8C0F      		add r24,r28
 1874 00c6 9D1F      		adc r25,r29
 1875 00c8 908B      		std Z+16,r25
 1876 00ca 8787      		std Z+15,r24
 785:ChibiOS/os/hal/src/hal_buffers.c ****     }
 1877               		.loc 1 785 0
 1878 00cc 6C0E      		add r6,r28
 1879 00ce 7D1E      		adc r7,r29
 1880               	.LVL122:
 789:ChibiOS/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 1881               		.loc 1 789 0
 1882 00d0 F801      		movw r30,r16
 1883 00d2 2189      		ldd r18,Z+17
 1884 00d4 3289      		ldd r19,Z+18
 1885 00d6 8217      		cp r24,r18
 1886 00d8 9307      		cpc r25,r19
 1887 00da 00F0      		brlo .L88
 1888               	.L90:
 790:ChibiOS/os/hal/src/hal_buffers.c ****     }
 1889               		.loc 1 790 0
 1890 00dc 6185      		ldd r22,Z+9
 1891 00de 7285      		ldd r23,Z+10
 1892 00e0 6250      		subi r22,2
 1893 00e2 7109      		sbc r23,__zero_reg__
 1894 00e4 C801      		movw r24,r16
 1895 00e6 0E94 0000 		call obqPostFullBufferS
 1896               	.LVL123:
 1897               	.LBB284:
 1898               	.LBB280:
 1899               	.LBB279:
 1900               		.loc 3 333 0
 1901               	/* #APP */
 1902               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 1903 00ea 7894      		sei
 1904               	 ;  0 "" 2
 1905               	/* #NOAPP */
 1906               	.LBE279:
 1907               	.LBE280:
 1908               	.LBE284:
 1909               		.loc 1 795 0
 1910 00ec 6C14      		cp r6,r12
 1911 00ee 7D04      		cpc r7,r13
 1912 00f0 00F0      		brlo .L93
 1913               	.LVL124:
 1914               	.L83:
 1915               	.LBE266:
 796:ChibiOS/os/hal/src/hal_buffers.c ****       return w;
 797:ChibiOS/os/hal/src/hal_buffers.c ****     }
 798:ChibiOS/os/hal/src/hal_buffers.c ****     osalSysLock();
 799:ChibiOS/os/hal/src/hal_buffers.c ****   }
 800:ChibiOS/os/hal/src/hal_buffers.c **** }
 1916               		.loc 1 800 0
 1917 00f2 C301      		movw r24,r6
 1918               	/* epilogue start */
 1919 00f4 DF91      		pop r29
 1920 00f6 CF91      		pop r28
 1921 00f8 1F91      		pop r17
 1922 00fa 0F91      		pop r16
 1923               	.LVL125:
 1924 00fc FF90      		pop r15
 1925 00fe EF90      		pop r14
 1926               	.LVL126:
 1927 0100 DF90      		pop r13
 1928 0102 CF90      		pop r12
 1929               	.LVL127:
 1930 0104 BF90      		pop r11
 1931 0106 AF90      		pop r10
 1932               	.LVL128:
 1933 0108 9F90      		pop r9
 1934 010a 8F90      		pop r8
 1935               	.LVL129:
 1936 010c 7F90      		pop r7
 1937 010e 6F90      		pop r6
 1938               	.LVL130:
 1939 0110 5F90      		pop r5
 1940 0112 4F90      		pop r4
 1941               	.LVL131:
 1942 0114 3F90      		pop r3
 1943 0116 0895      		ret
 1944               	.LVL132:
 1945               	.L91:
 1946               	.LBB286:
 1947               	.LBB285:
 743:ChibiOS/os/hal/src/hal_buffers.c ****         msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 1948               		.loc 1 743 0
 1949 0118 FEEF      		ldi r31,-2
 1950 011a 8F16      		cp r8,r31
 1951 011c FFEF      		ldi r31,-1
 1952 011e 9F06      		cpc r9,r31
 1953 0120 00F4      		brsh .L94
 1954               	.LBB268:
 1955               	.LBB269:
 1956               	.LBB270:
 1957               	.LBB271:
 1958               	.LBB272:
 1959               		.loc 4 92 0
 1960 0122 8091 8400 		lds r24,132
 1961 0126 9091 8500 		lds r25,132+1
 1962               	.LBE272:
 1963               	.LBE271:
 1964               	.LBE270:
 1965               	.LBE269:
 747:ChibiOS/os/hal/src/hal_buffers.c **** 
 1966               		.loc 1 747 0
 1967 012a B201      		movw r22,r4
 1968 012c 681B      		sub r22,r24
 1969 012e 790B      		sbc r23,r25
 1970               	.LVL133:
 752:ChibiOS/os/hal/src/hal_buffers.c ****           osalSysUnlock();
 1971               		.loc 1 752 0
 1972 0130 A616      		cp r10,r22
 1973 0132 B706      		cpc r11,r23
 1974 0134 00F0      		brlo .L84
 756:ChibiOS/os/hal/src/hal_buffers.c ****       }
 1975               		.loc 1 756 0
 1976 0136 C801      		movw r24,r16
 1977 0138 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1978               	.LVL134:
 1979               	.LBE268:
 760:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1980               		.loc 1 760 0
 1981 013c 892B      		or r24,r25
 1982 013e 01F4      		brne .L84
 1983               	.L95:
 1984 0140 F801      		movw r30,r16
 1985 0142 8785      		ldd r24,Z+15
 1986 0144 9089      		ldd r25,Z+16
 1987               	.LVL135:
 1988 0146 00C0      		rjmp .L79
 1989               	.L94:
 744:ChibiOS/os/hal/src/hal_buffers.c ****       }
 1990               		.loc 1 744 0
 1991 0148 B501      		movw r22,r10
 1992 014a C801      		movw r24,r16
 1993 014c 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1994               	.LVL136:
 760:ChibiOS/os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1995               		.loc 1 760 0
 1996 0150 892B      		or r24,r25
 1997 0152 01F0      		breq .L95
 1998               	.LVL137:
 1999               	.L84:
 2000               	.LBB273:
 2001               	.LBB274:
 2002               	.LBB275:
 2003               		.loc 3 333 0
 2004               	/* #APP */
 2005               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 2006 0154 7894      		sei
 2007               	 ;  0 "" 2
 2008               	/* #NOAPP */
 2009               	.LBE275:
 2010               	.LBE274:
 2011               	.LBE273:
 762:ChibiOS/os/hal/src/hal_buffers.c ****       }
 2012               		.loc 1 762 0
 2013 0156 00C0      		rjmp .L83
 2014               	.LBE285:
 2015               	.LBE286:
 2016               		.cfi_endproc
 2017               	.LFE72:
 2019               		.section	.text.obqTryFlushI,"ax",@progbits
 2020               	.global	obqTryFlushI
 2022               	obqTryFlushI:
 2023               	.LFB73:
 801:ChibiOS/os/hal/src/hal_buffers.c **** 
 802:ChibiOS/os/hal/src/hal_buffers.c **** /**
 803:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 804:ChibiOS/os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 805:ChibiOS/os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 806:ChibiOS/os/hal/src/hal_buffers.c ****  *          returned instead.
 807:ChibiOS/os/hal/src/hal_buffers.c ****  *
 808:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 809:ChibiOS/os/hal/src/hal_buffers.c ****  * @return              The operation status.
 810:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 811:ChibiOS/os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 812:ChibiOS/os/hal/src/hal_buffers.c ****  *
 813:ChibiOS/os/hal/src/hal_buffers.c ****  * @iclass
 814:ChibiOS/os/hal/src/hal_buffers.c ****  */
 815:ChibiOS/os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2024               		.loc 1 815 0
 2025               		.cfi_startproc
 2026               	.LVL138:
 2027               	/* prologue: function */
 2028               	/* frame size = 0 */
 2029               	/* stack size = 0 */
 2030               	.L__stack_usage = 0
 2031 0000 FC01      		movw r30,r24
 816:ChibiOS/os/hal/src/hal_buffers.c **** 
 817:ChibiOS/os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 818:ChibiOS/os/hal/src/hal_buffers.c **** 
 819:ChibiOS/os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 820:ChibiOS/os/hal/src/hal_buffers.c ****      it is not being written.*/
 821:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2032               		.loc 1 821 0
 2033 0002 A381      		ldd r26,Z+3
 2034 0004 B481      		ldd r27,Z+4
 2035 0006 8581      		ldd r24,Z+5
 2036 0008 9681      		ldd r25,Z+6
 2037               	.LVL139:
 2038 000a A817      		cp r26,r24
 2039 000c B907      		cpc r27,r25
 2040 000e 01F0      		breq .L105
 2041               	.L104:
 822:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 823:ChibiOS/os/hal/src/hal_buffers.c **** 
 824:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > 0U) {
 825:ChibiOS/os/hal/src/hal_buffers.c **** 
 826:ChibiOS/os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 827:ChibiOS/os/hal/src/hal_buffers.c ****       *((size_t *)obqp->bwrptr) = size;
 828:ChibiOS/os/hal/src/hal_buffers.c **** 
 829:ChibiOS/os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 830:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 831:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 832:ChibiOS/os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 833:ChibiOS/os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 834:ChibiOS/os/hal/src/hal_buffers.c ****       }
 835:ChibiOS/os/hal/src/hal_buffers.c **** 
 836:ChibiOS/os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 837:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 838:ChibiOS/os/hal/src/hal_buffers.c **** 
 839:ChibiOS/os/hal/src/hal_buffers.c ****       return true;
 840:ChibiOS/os/hal/src/hal_buffers.c ****     }
 841:ChibiOS/os/hal/src/hal_buffers.c ****   }
 842:ChibiOS/os/hal/src/hal_buffers.c ****   return false;
 2042               		.loc 1 842 0
 2043 0010 80E0      		ldi r24,0
 843:ChibiOS/os/hal/src/hal_buffers.c **** }
 2044               		.loc 1 843 0
 2045 0012 0895      		ret
 2046               	.L105:
 821:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2047               		.loc 1 821 0 discriminator 1
 2048 0014 8181      		ldd r24,Z+1
 2049 0016 9281      		ldd r25,Z+2
 2050 0018 892B      		or r24,r25
 2051 001a 01F0      		breq .L104
 821:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2052               		.loc 1 821 0 is_stmt 0
 2053 001c 8785      		ldd r24,Z+15
 2054 001e 9089      		ldd r25,Z+16
 2055 0020 0097      		sbiw r24,0
 2056 0022 01F0      		breq .L104
 2057 0024 0297      		sbiw r24,2
 2058               	.LBB287:
 822:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2059               		.loc 1 822 0 is_stmt 1
 2060 0026 8A1B      		sub r24,r26
 2061 0028 9B0B      		sbc r25,r27
 2062               	.LVL140:
 824:ChibiOS/os/hal/src/hal_buffers.c **** 
 2063               		.loc 1 824 0
 2064 002a 01F0      		breq .L104
 827:ChibiOS/os/hal/src/hal_buffers.c **** 
 2065               		.loc 1 827 0
 2066 002c 1196      		adiw r26,1
 2067 002e 9C93      		st X,r25
 2068 0030 8E93      		st -X,r24
 830:ChibiOS/os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2069               		.loc 1 830 0
 2070 0032 8181      		ldd r24,Z+1
 2071 0034 9281      		ldd r25,Z+2
 2072               	.LVL141:
 2073 0036 0197      		sbiw r24,1
 2074 0038 9283      		std Z+2,r25
 2075 003a 8183      		std Z+1,r24
 2076               	.LVL142:
 831:ChibiOS/os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2077               		.loc 1 831 0
 2078 003c 8185      		ldd r24,Z+9
 2079 003e 9285      		ldd r25,Z+10
 2080 0040 A80F      		add r26,r24
 2081 0042 B91F      		adc r27,r25
 2082               	.LVL143:
 2083 0044 B483      		std Z+4,r27
 2084 0046 A383      		std Z+3,r26
 2085               	.LVL144:
 832:ChibiOS/os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2086               		.loc 1 832 0
 2087 0048 8781      		ldd r24,Z+7
 2088 004a 9085      		ldd r25,Z+8
 2089 004c A817      		cp r26,r24
 2090 004e B907      		cpc r27,r25
 2091 0050 00F0      		brlo .L99
 833:ChibiOS/os/hal/src/hal_buffers.c ****       }
 2092               		.loc 1 833 0
 2093 0052 8585      		ldd r24,Z+13
 2094 0054 9685      		ldd r25,Z+14
 2095 0056 9483      		std Z+4,r25
 2096 0058 8383      		std Z+3,r24
 2097               	.L99:
 837:ChibiOS/os/hal/src/hal_buffers.c **** 
 2098               		.loc 1 837 0
 2099 005a 108A      		std Z+16,__zero_reg__
 2100 005c 1786      		std Z+15,__zero_reg__
 839:ChibiOS/os/hal/src/hal_buffers.c ****     }
 2101               		.loc 1 839 0
 2102 005e 81E0      		ldi r24,lo8(1)
 2103 0060 0895      		ret
 2104               	.LBE287:
 2105               		.cfi_endproc
 2106               	.LFE73:
 2108               		.section	.text.obqFlush,"ax",@progbits
 2109               	.global	obqFlush
 2111               	obqFlush:
 2112               	.LFB74:
 844:ChibiOS/os/hal/src/hal_buffers.c **** 
 845:ChibiOS/os/hal/src/hal_buffers.c **** /**
 846:ChibiOS/os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 847:ChibiOS/os/hal/src/hal_buffers.c ****  *
 848:ChibiOS/os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 849:ChibiOS/os/hal/src/hal_buffers.c ****  *
 850:ChibiOS/os/hal/src/hal_buffers.c ****  * @api
 851:ChibiOS/os/hal/src/hal_buffers.c ****  */
 852:ChibiOS/os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2113               		.loc 1 852 0
 2114               		.cfi_startproc
 2115               	.LVL145:
 2116               	/* prologue: function */
 2117               	/* frame size = 0 */
 2118               	/* stack size = 0 */
 2119               	.L__stack_usage = 0
 2120               	.LBB288:
 2121               	.LBB289:
 2122               	.LBB290:
 325:ChibiOS/os/nil/ports/AVR/nilcore.h **** }
 2123               		.loc 3 325 0
 2124               	/* #APP */
 2125               	 ;  325 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 2126 0000 F894      		cli
 2127               	 ;  0 "" 2
 2128               	/* #NOAPP */
 2129               	.LBE290:
 2130               	.LBE289:
 2131               	.LBE288:
 853:ChibiOS/os/hal/src/hal_buffers.c **** 
 854:ChibiOS/os/hal/src/hal_buffers.c ****   osalSysLock();
 855:ChibiOS/os/hal/src/hal_buffers.c **** 
 856:ChibiOS/os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 857:ChibiOS/os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2132               		.loc 1 857 0
 2133 0002 FC01      		movw r30,r24
 2134 0004 6785      		ldd r22,Z+15
 2135 0006 7089      		ldd r23,Z+16
 2136 0008 6115      		cp r22,__zero_reg__
 2137 000a 7105      		cpc r23,__zero_reg__
 2138 000c 01F0      		breq .L107
 2139 000e 6250      		subi r22,2
 2140 0010 7109      		sbc r23,__zero_reg__
 2141               	.LBB291:
 858:ChibiOS/os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - (size_t)obqp->bwrptr - sizeof (size_t);
 2142               		.loc 1 858 0
 2143 0012 2381      		ldd r18,Z+3
 2144 0014 3481      		ldd r19,Z+4
 2145 0016 621B      		sub r22,r18
 2146 0018 730B      		sbc r23,r19
 2147               	.LVL146:
 859:ChibiOS/os/hal/src/hal_buffers.c **** 
 860:ChibiOS/os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2148               		.loc 1 860 0
 2149 001a 01F0      		breq .L107
 861:ChibiOS/os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, size);
 2150               		.loc 1 861 0
 2151 001c 0E94 0000 		call obqPostFullBufferS
 2152               	.LVL147:
 2153               	.L107:
 2154               	.LBE291:
 2155               	.LBB292:
 2156               	.LBB293:
 2157               	.LBB294:
 2158               		.loc 3 333 0
 2159               	/* #APP */
 2160               	 ;  333 "ChibiOS/os/nil/ports/AVR/nilcore.h" 1
 2161 0020 7894      		sei
 2162               	 ;  0 "" 2
 2163               	/* #NOAPP */
 2164 0022 0895      		ret
 2165               	.LBE294:
 2166               	.LBE293:
 2167               	.LBE292:
 2168               		.cfi_endproc
 2169               	.LFE74:
 2171               		.text
 2172               	.Letext0:
 2173               		.file 5 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\lib\\gc
 2174               		.file 6 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 2175               		.file 7 "ChibiOS/os/nil/ports/AVR/compilers/GCC/niltypes.h"
 2176               		.file 8 "ChibiOS/os/nil/include/nil.h"
 2177               		.file 9 "ChibiOS/os/hal/include/hal_buffers.h"
 2178               		.file 10 "ChibiOS/os/nil/ports/AVR/nilcore_timer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 hal_buffers.c
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:2      *ABS*:0000003e __SP_H__
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:3      *ABS*:0000003d __SP_L__
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:4      *ABS*:0000003f __SREG__
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:13     .text.ibqObjectInit:00000000 ibqObjectInit
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:109    .text.ibqResetI:00000000 ibqResetI
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:149    .text.ibqGetEmptyBufferI:00000000 ibqGetEmptyBufferI
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:190    .text.ibqPostFullBufferI:00000000 ibqPostFullBufferI
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:246    .text.ibqGetFullBufferTimeoutS:00000000 ibqGetFullBufferTimeoutS
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:337    .text.ibqGetFullBufferTimeout:00000000 ibqGetFullBufferTimeout
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:382    .text.ibqReleaseEmptyBufferS:00000000 ibqReleaseEmptyBufferS
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:460    .text.ibqReleaseEmptyBuffer:00000000 ibqReleaseEmptyBuffer
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:503    .text.ibqGetTimeout:00000000 ibqGetTimeout
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:636    .text.ibqReadTimeout:00000000 ibqReadTimeout
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1019   .text.obqObjectInit:00000000 obqObjectInit
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1113   .text.obqResetI:00000000 obqResetI
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1155   .text.obqGetFullBufferI:00000000 obqGetFullBufferI
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1203   .text.obqReleaseEmptyBufferI:00000000 obqReleaseEmptyBufferI
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1253   .text.obqGetEmptyBufferTimeoutS:00000000 obqGetEmptyBufferTimeoutS
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1343   .text.obqGetEmptyBufferTimeout:00000000 obqGetEmptyBufferTimeout
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1387   .text.obqPostFullBufferS:00000000 obqPostFullBufferS
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1469   .text.obqPostFullBuffer:00000000 obqPostFullBuffer
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1512   .text.obqPutTimeout:00000000 obqPutTimeout
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:1637   .text.obqWriteTimeout:00000000 obqWriteTimeout
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:2022   .text.obqTryFlushI:00000000 obqTryFlushI
C:\Users\Noah\AppData\Local\Temp\ccdGCsw4.s:2111   .text.obqFlush:00000000 obqFlush

UNDEFINED SYMBOLS
osalThreadDequeueAllI
osalThreadDequeueNextI
chSemWaitTimeoutS
memcpy
