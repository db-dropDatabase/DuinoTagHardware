
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  000018b2  00001946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000169  0080009e  0080009e  00001984  2**0
                  ALLOC
  3 .stab         00000660  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000af  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  00002093  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000068  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002032  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000733  00000000  00000000  0000419a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000063d  00000000  00000000  000048cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000554  00000000  00000000  00004f0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000004f6  00000000  00000000  00005460  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00002326  00000000  00000000  00005956  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000138  00000000  00000000  00007c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
       2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
       4:	29 c0       	rjmp	.+82     	; 0x58 <__vector_2>
       6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
       8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
      14:	79 c9       	rjmp	.-3342   	; 0xfffff308 <__eeprom_end+0xff7ef308>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	1e c0       	rjmp	.+60     	; 0x56 <__vector_12>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
      1e:	11 24       	eor	r1, r1
      20:	1f be       	out	0x3f, r1	; 63
      22:	cf e5       	ldi	r28, 0x5F	; 95
      24:	d2 e0       	ldi	r29, 0x02	; 2
      26:	de bf       	out	0x3e, r29	; 62
      28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
      2a:	10 e0       	ldi	r17, 0x00	; 0
      2c:	a0 e6       	ldi	r26, 0x60	; 96
      2e:	b0 e0       	ldi	r27, 0x00	; 0
      30:	e2 eb       	ldi	r30, 0xB2	; 178
      32:	f8 e1       	ldi	r31, 0x18	; 24
      34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
      36:	05 90       	lpm	r0, Z+
      38:	0d 92       	st	X+, r0
      3a:	ae 39       	cpi	r26, 0x9E	; 158
      3c:	b1 07       	cpc	r27, r17
      3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
      40:	22 e0       	ldi	r18, 0x02	; 2
      42:	ae e9       	ldi	r26, 0x9E	; 158
      44:	b0 e0       	ldi	r27, 0x00	; 0
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	a7 30       	cpi	r26, 0x07	; 7
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	76 d9       	rcall	.-3348   	; 0xfffff33e <__eeprom_end+0xff7ef33e>
      52:	2d cc       	rjmp	.-1958   	; 0xfffff8ae <__eeprom_end+0xff7ef8ae>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <__vector_12>:
	wdt_reset();
	WDTCR = _BV(WDE) | 0b110;				/* Set WDT to reset mode in timeout of 1s */
}


EMPTY_INTERRUPT(WDT_vect);
      56:	18 95       	reti

00000058 <__vector_2>:
		}
	}
}

ISR(PCINT0_vect) //CS is High
{
      58:	1f 92       	push	r1
      5a:	0f 92       	push	r0
      5c:	0f b6       	in	r0, 0x3f	; 63
      5e:	0f 92       	push	r0
      60:	11 24       	eor	r1, r1
      62:	2f 93       	push	r18
      64:	3f 93       	push	r19
      66:	4f 93       	push	r20
      68:	5f 93       	push	r21
      6a:	6f 93       	push	r22
      6c:	7f 93       	push	r23
      6e:	8f 93       	push	r24
      70:	9f 93       	push	r25
      72:	af 93       	push	r26
      74:	bf 93       	push	r27
      76:	cf 93       	push	r28
      78:	ef 93       	push	r30
      7a:	ff 93       	push	r31
	BYTE recv;
	recv = rcv_spi();
      7c:	bc d8       	rcall	.-3720   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
      7e:	c8 2f       	mov	r28, r24
	xmit_spi(ACK);
      80:	8e e0       	ldi	r24, 0x0E	; 14
      82:	cd d8       	rcall	.-3686   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
	strcpy(fileName, filenameRef[(uint16_t)recv]);
      84:	6c 2f       	mov	r22, r28
      86:	70 e0       	ldi	r23, 0x00	; 0
      88:	84 e0       	ldi	r24, 0x04	; 4
      8a:	66 0f       	add	r22, r22
      8c:	77 1f       	adc	r23, r23
      8e:	8a 95       	dec	r24
      90:	e1 f7       	brne	.-8      	; 0x8a <__vector_2+0x32>
      92:	60 5a       	subi	r22, 0xA0	; 160
      94:	7f 4f       	sbci	r23, 0xFF	; 255
      96:	83 ea       	ldi	r24, 0xA3	; 163
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	02 dc       	rcall	.-2044   	; 0xfffff8a0 <__eeprom_end+0xff7ef8a0>
	newFile = true;
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	80 93 b3 00 	sts	0x00B3, r24
	sleep_disable();
      a2:	85 b7       	in	r24, 0x35	; 53
      a4:	8f 7d       	andi	r24, 0xDF	; 223
      a6:	85 bf       	out	0x35, r24	; 53
}
      a8:	ff 91       	pop	r31
      aa:	ef 91       	pop	r30
      ac:	cf 91       	pop	r28
      ae:	bf 91       	pop	r27
      b0:	af 91       	pop	r26
      b2:	9f 91       	pop	r25
      b4:	8f 91       	pop	r24
      b6:	7f 91       	pop	r23
      b8:	6f 91       	pop	r22
      ba:	5f 91       	pop	r21
      bc:	4f 91       	pop	r20
      be:	3f 91       	pop	r19
      c0:	2f 91       	pop	r18
      c2:	0f 90       	pop	r0
      c4:	0f be       	out	0x3f, r0	; 63
      c6:	0f 90       	pop	r0
      c8:	1f 90       	pop	r1
      ca:	18 95       	reti

000000cc <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
      cc:	ff 92       	push	r15
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	c8 2f       	mov	r28, r24
      d8:	d4 2f       	mov	r29, r20
      da:	15 2f       	mov	r17, r21
      dc:	06 2f       	mov	r16, r22
      de:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
      e0:	87 ff       	sbrs	r24, 7
      e2:	08 c0       	rjmp	.+16     	; 0xf4 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
      e4:	40 e0       	ldi	r20, 0x00	; 0
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	ba 01       	movw	r22, r20
      ea:	87 e7       	ldi	r24, 0x77	; 119
      ec:	ef df       	rcall	.-34     	; 0xcc <send_cmd>
		if (res > 1) return res;
      ee:	82 30       	cpi	r24, 0x02	; 2
      f0:	f8 f4       	brcc	.+62     	; 0x130 <send_cmd+0x64>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
      f2:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
      f4:	7f d8       	rcall	.-3842   	; 0xfffff1f4 <__eeprom_end+0xff7ef1f4>
	rcv_spi();
      f6:	7f d8       	rcall	.-3842   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
	select();
      f8:	7c d8       	rcall	.-3848   	; 0xfffff1f2 <__eeprom_end+0xff7ef1f2>
	rcv_spi();
      fa:	7d d8       	rcall	.-3846   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
      fc:	8c 2f       	mov	r24, r28
      fe:	8f d8       	rcall	.-3810   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     100:	8f 2d       	mov	r24, r15
     102:	8d d8       	rcall	.-3814   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     104:	80 2f       	mov	r24, r16
     106:	8b d8       	rcall	.-3818   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     108:	81 2f       	mov	r24, r17
     10a:	89 d8       	rcall	.-3822   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
     10c:	8d 2f       	mov	r24, r29
     10e:	87 d8       	rcall	.-3826   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     110:	c0 34       	cpi	r28, 0x40	; 64
     112:	21 f0       	breq	.+8      	; 0x11c <send_cmd+0x50>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
     114:	c8 34       	cpi	r28, 0x48	; 72
     116:	21 f4       	brne	.+8      	; 0x120 <send_cmd+0x54>
     118:	87 e8       	ldi	r24, 0x87	; 135
     11a:	03 c0       	rjmp	.+6      	; 0x122 <send_cmd+0x56>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
     11c:	85 e9       	ldi	r24, 0x95	; 149
     11e:	01 c0       	rjmp	.+2      	; 0x122 <send_cmd+0x56>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     120:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
     122:	7d d8       	rcall	.-3846   	; 0xfffff21e <__eeprom_end+0xff7ef21e>
     124:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
     126:	67 d8       	rcall	.-3890   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
	} while ((res & 0x80) && --n);
     128:	87 ff       	sbrs	r24, 7
     12a:	02 c0       	rjmp	.+4      	; 0x130 <send_cmd+0x64>
     12c:	c1 50       	subi	r28, 0x01	; 1
     12e:	d9 f7       	brne	.-10     	; 0x126 <send_cmd+0x5a>

	return res;			/* Return with the response value */
}
     130:	df 91       	pop	r29
     132:	cf 91       	pop	r28
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	ff 90       	pop	r15
     13a:	08 95       	ret

0000013c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	0f 93       	push	r16
     144:	1f 93       	push	r17
     146:	cf 93       	push	r28
     148:	df 93       	push	r29
     14a:	00 d0       	rcall	.+0      	; 0x14c <disk_initialize+0x10>
     14c:	00 d0       	rcall	.+0      	; 0x14e <disk_initialize+0x12>
     14e:	cd b7       	in	r28, 0x3d	; 61
     150:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	init_spi();		/* Initialize USI */
     152:	4a d8       	rcall	.-3948   	; 0xfffff1e8 <__eeprom_end+0xff7ef1e8>
     154:	0a e0       	ldi	r16, 0x0A	; 10
     156:	10 e0       	ldi	r17, 0x00	; 0

	for (tmr = 10; tmr; tmr--) rcv_spi();	/* Dummy clocks */
     158:	4e d8       	rcall	.-3940   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
     15a:	01 50       	subi	r16, 0x01	; 1
     15c:	11 09       	sbc	r17, r1
     15e:	e1 f7       	brne	.-8      	; 0x158 <disk_initialize+0x1c>
	select();
     160:	48 d8       	rcall	.-3952   	; 0xfffff1f2 <__eeprom_end+0xff7ef1f2>
     162:	08 e5       	ldi	r16, 0x58	; 88
     164:	12 e0       	ldi	r17, 0x02	; 2
	for (tmr = 600; tmr; tmr--) rcv_spi();	/* Dummy clocks */
     166:	47 d8       	rcall	.-3954   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
     168:	01 50       	subi	r16, 0x01	; 1
     16a:	11 09       	sbc	r17, r1
     16c:	e1 f7       	brne	.-8      	; 0x166 <disk_initialize+0x2a>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	ba 01       	movw	r22, r20
     174:	80 e4       	ldi	r24, 0x40	; 64
     176:	aa df       	rcall	.-172    	; 0xcc <send_cmd>
     178:	81 30       	cpi	r24, 0x01	; 1
     17a:	09 f0       	breq	.+2      	; 0x17e <disk_initialize+0x42>
     17c:	6e c0       	rjmp	.+220    	; 0x25a <disk_initialize+0x11e>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
     17e:	4a ea       	ldi	r20, 0xAA	; 170
     180:	51 e0       	ldi	r21, 0x01	; 1
     182:	60 e0       	ldi	r22, 0x00	; 0
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	88 e4       	ldi	r24, 0x48	; 72
     188:	a1 df       	rcall	.-190    	; 0xcc <send_cmd>
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	31 f5       	brne	.+76     	; 0x1da <disk_initialize+0x9e>
     18e:	8e 01       	movw	r16, r28
     190:	0f 5f       	subi	r16, 0xFF	; 255
     192:	1f 4f       	sbci	r17, 0xFF	; 255
     194:	78 01       	movw	r14, r16
     196:	24 e0       	ldi	r18, 0x04	; 4
     198:	d2 2e       	mov	r13, r18
     19a:	d0 0e       	add	r13, r16
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
     19c:	2c d8       	rcall	.-4008   	; 0xfffff1f6 <__eeprom_end+0xff7ef1f6>
     19e:	f7 01       	movw	r30, r14
     1a0:	81 93       	st	Z+, r24
     1a2:	7f 01       	movw	r14, r30
     1a4:	de 12       	cpse	r13, r30
     1a6:	fa cf       	rjmp	.-12     	; 0x19c <disk_initialize+0x60>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     1a8:	8b 81       	ldd	r24, Y+3	; 0x03
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	09 f0       	breq	.+2      	; 0x1b0 <disk_initialize+0x74>
     1ae:	55 c0       	rjmp	.+170    	; 0x25a <disk_initialize+0x11e>
     1b0:	8c 81       	ldd	r24, Y+4	; 0x04
     1b2:	8a 3a       	cpi	r24, 0xAA	; 170
     1b4:	09 f0       	breq	.+2      	; 0x1b8 <disk_initialize+0x7c>
     1b6:	51 c0       	rjmp	.+162    	; 0x25a <disk_initialize+0x11e>
     1b8:	98 ea       	ldi	r25, 0xA8	; 168
     1ba:	e9 2e       	mov	r14, r25
     1bc:	91 e6       	ldi	r25, 0x61	; 97
     1be:	f9 2e       	mov	r15, r25
				for (tmr = 25000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     1c0:	40 e0       	ldi	r20, 0x00	; 0
     1c2:	50 e0       	ldi	r21, 0x00	; 0
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	70 e4       	ldi	r23, 0x40	; 64
     1c8:	89 ee       	ldi	r24, 0xE9	; 233
     1ca:	80 df       	rcall	.-256    	; 0xcc <send_cmd>
     1cc:	88 23       	and	r24, r24
     1ce:	09 f1       	breq	.+66     	; 0x212 <disk_initialize+0xd6>
     1d0:	f1 e0       	ldi	r31, 0x01	; 1
     1d2:	ef 1a       	sub	r14, r31
     1d4:	f1 08       	sbc	r15, r1
     1d6:	a1 f7       	brne	.-24     	; 0x1c0 <disk_initialize+0x84>
     1d8:	40 c0       	rjmp	.+128    	; 0x25a <disk_initialize+0x11e>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	ba 01       	movw	r22, r20
     1e0:	89 ee       	ldi	r24, 0xE9	; 233
     1e2:	74 df       	rcall	.-280    	; 0xcc <send_cmd>
     1e4:	82 30       	cpi	r24, 0x02	; 2
     1e6:	18 f0       	brcs	.+6      	; 0x1ee <disk_initialize+0xb2>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	01 e4       	ldi	r16, 0x41	; 65
     1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <disk_initialize+0xb6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     1ee:	12 e0       	ldi	r17, 0x02	; 2
     1f0:	09 ee       	ldi	r16, 0xE9	; 233
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     1f2:	88 ea       	ldi	r24, 0xA8	; 168
     1f4:	e8 2e       	mov	r14, r24
     1f6:	81 e6       	ldi	r24, 0x61	; 97
     1f8:	f8 2e       	mov	r15, r24
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
     1fa:	40 e0       	ldi	r20, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	ba 01       	movw	r22, r20
     200:	80 2f       	mov	r24, r16
     202:	64 df       	rcall	.-312    	; 0xcc <send_cmd>
     204:	88 23       	and	r24, r24
     206:	09 f1       	breq	.+66     	; 0x24a <disk_initialize+0x10e>
     208:	f1 e0       	ldi	r31, 0x01	; 1
     20a:	ef 1a       	sub	r14, r31
     20c:	f1 08       	sbc	r15, r1
     20e:	a9 f7       	brne	.-22     	; 0x1fa <disk_initialize+0xbe>
     210:	24 c0       	rjmp	.+72     	; 0x25a <disk_initialize+0x11e>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 25000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     212:	40 e0       	ldi	r20, 0x00	; 0
     214:	50 e0       	ldi	r21, 0x00	; 0
     216:	ba 01       	movw	r22, r20
     218:	8a e7       	ldi	r24, 0x7A	; 122
     21a:	58 df       	rcall	.-336    	; 0xcc <send_cmd>
     21c:	81 11       	cpse	r24, r1
     21e:	1d c0       	rjmp	.+58     	; 0x25a <disk_initialize+0x11e>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
     220:	ea d7       	rcall	.+4052   	; 0x11f6 <rcv_spi>
     222:	f8 01       	movw	r30, r16
     224:	81 93       	st	Z+, r24
     226:	8f 01       	movw	r16, r30
     228:	de 12       	cpse	r13, r30
     22a:	fa cf       	rjmp	.-12     	; 0x220 <disk_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	86 fd       	sbrc	r24, 6
     230:	02 c0       	rjmp	.+4      	; 0x236 <disk_initialize+0xfa>
     232:	14 e0       	ldi	r17, 0x04	; 4
     234:	01 c0       	rjmp	.+2      	; 0x238 <disk_initialize+0xfc>
     236:	1c e0       	ldi	r17, 0x0C	; 12
			if (!tmr || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
				ty = 0;
			}
		}
	}
	CardType = ty;
     238:	10 93 a1 00 	sts	0x00A1, r17
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static void release_spi (void)
{
	deselect();
     23c:	db d7       	rcall	.+4022   	; 0x11f4 <deselect>
	rcv_spi();
     23e:	db d7       	rcall	.+4022   	; 0x11f6 <rcv_spi>
		}
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	11 23       	and	r17, r17
     244:	61 f0       	breq	.+24     	; 0x25e <disk_initialize+0x122>
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0a c0       	rjmp	.+20     	; 0x25e <disk_initialize+0x122>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	52 e0       	ldi	r21, 0x02	; 2
     24e:	60 e0       	ldi	r22, 0x00	; 0
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	80 e5       	ldi	r24, 0x50	; 80
     254:	3b df       	rcall	.-394    	; 0xcc <send_cmd>
     256:	88 23       	and	r24, r24
     258:	79 f3       	breq	.-34     	; 0x238 <disk_initialize+0xfc>
				ty = 0;
     25a:	10 e0       	ldi	r17, 0x00	; 0
     25c:	ed cf       	rjmp	.-38     	; 0x238 <disk_initialize+0xfc>
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	df 90       	pop	r13
     274:	08 95       	ret

00000276 <disk_readp>:

/*-----------------------------------------------------------------------*/
/* Read partial sector                                                   */
/*-----------------------------------------------------------------------*/

DRESULT disk_readp (void *dest,		/* Pointer to the destination object to put data */DWORD lba,		/* Start sector number (LBA) */WORD ofs,		/* Byte offset in the sector (0..511) */WORD cnt		/* Byte count (1..512), b15:destination flag */){
     276:	cf 92       	push	r12
     278:	df 92       	push	r13
     27a:	ef 92       	push	r14
     27c:	ff 92       	push	r15
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	7c 01       	movw	r14, r24
     288:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD tmr;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */
     28a:	80 91 a1 00 	lds	r24, 0x00A1
     28e:	83 fd       	sbrc	r24, 3
     290:	07 c0       	rjmp	.+14     	; 0x2a0 <disk_readp+0x2a>
     292:	89 e0       	ldi	r24, 0x09	; 9
     294:	44 0f       	add	r20, r20
     296:	55 1f       	adc	r21, r21
     298:	66 1f       	adc	r22, r22
     29a:	77 1f       	adc	r23, r23
     29c:	8a 95       	dec	r24
     29e:	d1 f7       	brne	.-12     	; 0x294 <disk_readp+0x1e>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {	/* READ_SINGLE_BLOCK */
     2a0:	81 e5       	ldi	r24, 0x51	; 81
     2a2:	14 df       	rcall	.-472    	; 0xcc <send_cmd>
     2a4:	88 23       	and	r24, r24
     2a6:	11 f0       	breq	.+4      	; 0x2ac <disk_readp+0x36>
	WORD tmr;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */

	res = RES_ERROR;
     2a8:	c1 e0       	ldi	r28, 0x01	; 1
     2aa:	0f c0       	rjmp	.+30     	; 0x2ca <disk_readp+0x54>
     2ac:	c0 e3       	ldi	r28, 0x30	; 48
     2ae:	d5 e7       	ldi	r29, 0x75	; 117
	if (send_cmd(CMD17, lba) == 0) {	/* READ_SINGLE_BLOCK */
		tmr = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
     2b0:	a2 d7       	rcall	.+3908   	; 0x11f6 <rcv_spi>
		} while (rc == 0xFF && --tmr);
     2b2:	8f 3f       	cpi	r24, 0xFF	; 255
     2b4:	19 f4       	brne	.+6      	; 0x2bc <disk_readp+0x46>
     2b6:	21 97       	sbiw	r28, 0x01	; 1
     2b8:	d9 f7       	brne	.-10     	; 0x2b0 <disk_readp+0x3a>
     2ba:	f6 cf       	rjmp	.-20     	; 0x2a8 <disk_readp+0x32>
		if (rc == 0xFE) {
     2bc:	8e 3f       	cpi	r24, 0xFE	; 254
     2be:	a1 f7       	brne	.-24     	; 0x2a8 <disk_readp+0x32>
			read_blk_part(dest, ofs, cnt);	/* Read a part of the sector */
     2c0:	a8 01       	movw	r20, r16
     2c2:	b6 01       	movw	r22, r12
     2c4:	c7 01       	movw	r24, r14
     2c6:	b8 d7       	rcall	.+3952   	; 0x1238 <read_blk_part>
			res = RES_OK;
     2c8:	c0 e0       	ldi	r28, 0x00	; 0
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static void release_spi (void)
{
	deselect();
     2ca:	94 d7       	rcall	.+3880   	; 0x11f4 <deselect>
	rcv_spi();
     2cc:	94 d7       	rcall	.+3880   	; 0x11f6 <rcv_spi>
	}

	release_spi();

	return res;
}
     2ce:	8c 2f       	mov	r24, r28
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	ff 90       	pop	r15
     2da:	ef 90       	pop	r14
     2dc:	df 90       	pop	r13
     2de:	cf 90       	pop	r12
     2e0:	08 95       	ret

000002e2 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     2e2:	8f 92       	push	r8
     2e4:	9f 92       	push	r9
     2e6:	af 92       	push	r10
     2e8:	bf 92       	push	r11
     2ea:	cf 92       	push	r12
     2ec:	df 92       	push	r13
     2ee:	ef 92       	push	r14
     2f0:	ff 92       	push	r15
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
	FATFS *fs = FatFs;
     2f6:	c0 91 9e 00 	lds	r28, 0x009E
     2fa:	d0 91 9f 00 	lds	r29, 0x009F


	clst -= 2;
     2fe:	62 50       	subi	r22, 0x02	; 2
     300:	71 09       	sbc	r23, r1
     302:	81 09       	sbc	r24, r1
     304:	91 09       	sbc	r25, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     306:	ce 80       	ldd	r12, Y+6	; 0x06
     308:	df 80       	ldd	r13, Y+7	; 0x07
     30a:	e8 84       	ldd	r14, Y+8	; 0x08
     30c:	f9 84       	ldd	r15, Y+9	; 0x09
     30e:	22 e0       	ldi	r18, 0x02	; 2
     310:	c2 1a       	sub	r12, r18
     312:	d1 08       	sbc	r13, r1
     314:	e1 08       	sbc	r14, r1
     316:	f1 08       	sbc	r15, r1
     318:	6c 15       	cp	r22, r12
     31a:	7d 05       	cpc	r23, r13
     31c:	8e 05       	cpc	r24, r14
     31e:	9f 05       	cpc	r25, r15
     320:	90 f4       	brcc	.+36     	; 0x346 <clust2sect+0x64>
	return (DWORD)clst * fs->csize + fs->database;
     322:	2a 81       	ldd	r18, Y+2	; 0x02
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	3a da       	rcall	.-2956   	; 0xfffff7a0 <__eeprom_end+0xff7ef7a0>
     32c:	49 01       	movw	r8, r18
     32e:	5a 01       	movw	r10, r20
     330:	8a 89       	ldd	r24, Y+18	; 0x12
     332:	9b 89       	ldd	r25, Y+19	; 0x13
     334:	ac 89       	ldd	r26, Y+20	; 0x14
     336:	bd 89       	ldd	r27, Y+21	; 0x15
     338:	bc 01       	movw	r22, r24
     33a:	cd 01       	movw	r24, r26
     33c:	68 0d       	add	r22, r8
     33e:	79 1d       	adc	r23, r9
     340:	8a 1d       	adc	r24, r10
     342:	9b 1d       	adc	r25, r11
     344:	03 c0       	rjmp	.+6      	; 0x34c <clust2sect+0x6a>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	08 95       	ret

00000362 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	dc 01       	movw	r26, r24
	CLUST clst;
	FATFS *fs = FatFs;
     36c:	e0 91 9e 00 	lds	r30, 0x009E
     370:	f0 91 9f 00 	lds	r31, 0x009F


	dj->index = 0;
     374:	11 96       	adiw	r26, 0x01	; 1
     376:	1c 92       	st	X, r1
     378:	1e 92       	st	-X, r1
	clst = dj->sclust;
     37a:	14 96       	adiw	r26, 0x04	; 4
     37c:	6d 91       	ld	r22, X+
     37e:	7d 91       	ld	r23, X+
     380:	8d 91       	ld	r24, X+
     382:	9c 91       	ld	r25, X
     384:	17 97       	sbiw	r26, 0x07	; 7
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     386:	61 30       	cpi	r22, 0x01	; 1
     388:	71 05       	cpc	r23, r1
     38a:	81 05       	cpc	r24, r1
     38c:	91 05       	cpc	r25, r1
     38e:	59 f1       	breq	.+86     	; 0x3e6 <dir_rewind+0x84>
     390:	06 81       	ldd	r16, Z+6	; 0x06
     392:	17 81       	ldd	r17, Z+7	; 0x07
     394:	20 85       	ldd	r18, Z+8	; 0x08
     396:	31 85       	ldd	r19, Z+9	; 0x09
     398:	60 17       	cp	r22, r16
     39a:	71 07       	cpc	r23, r17
     39c:	82 07       	cpc	r24, r18
     39e:	93 07       	cpc	r25, r19
     3a0:	10 f5       	brcc	.+68     	; 0x3e6 <dir_rewind+0x84>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     3a2:	61 15       	cp	r22, r1
     3a4:	71 05       	cpc	r23, r1
     3a6:	81 05       	cpc	r24, r1
     3a8:	91 05       	cpc	r25, r1
     3aa:	39 f4       	brne	.+14     	; 0x3ba <dir_rewind+0x58>
     3ac:	20 81       	ld	r18, Z
     3ae:	23 30       	cpi	r18, 0x03	; 3
     3b0:	21 f4       	brne	.+8      	; 0x3ba <dir_rewind+0x58>
		clst = (CLUST)fs->dirbase;
     3b2:	66 85       	ldd	r22, Z+14	; 0x0e
     3b4:	77 85       	ldd	r23, Z+15	; 0x0f
     3b6:	80 89       	ldd	r24, Z+16	; 0x10
     3b8:	91 89       	ldd	r25, Z+17	; 0x11
     3ba:	ed 01       	movw	r28, r26
	dj->clust = clst;						/* Current cluster */
     3bc:	68 87       	std	Y+8, r22	; 0x08
     3be:	79 87       	std	Y+9, r23	; 0x09
     3c0:	8a 87       	std	Y+10, r24	; 0x0a
     3c2:	9b 87       	std	Y+11, r25	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     3c4:	61 15       	cp	r22, r1
     3c6:	71 05       	cpc	r23, r1
     3c8:	81 05       	cpc	r24, r1
     3ca:	91 05       	cpc	r25, r1
     3cc:	11 f0       	breq	.+4      	; 0x3d2 <dir_rewind+0x70>
     3ce:	89 df       	rcall	.-238    	; 0x2e2 <clust2sect>
     3d0:	04 c0       	rjmp	.+8      	; 0x3da <dir_rewind+0x78>
     3d2:	66 85       	ldd	r22, Z+14	; 0x0e
     3d4:	77 85       	ldd	r23, Z+15	; 0x0f
     3d6:	80 89       	ldd	r24, Z+16	; 0x10
     3d8:	91 89       	ldd	r25, Z+17	; 0x11
     3da:	6c 87       	std	Y+12, r22	; 0x0c
     3dc:	7d 87       	std	Y+13, r23	; 0x0d
     3de:	8e 87       	std	Y+14, r24	; 0x0e
     3e0:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <dir_rewind+0x86>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     3f2:	4f 92       	push	r4
     3f4:	5f 92       	push	r5
     3f6:	6f 92       	push	r6
     3f8:	7f 92       	push	r7
     3fa:	af 92       	push	r10
     3fc:	bf 92       	push	r11
     3fe:	cf 92       	push	r12
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	00 d0       	rcall	.+0      	; 0x410 <get_fat+0x1e>
     410:	00 d0       	rcall	.+0      	; 0x412 <get_fat+0x20>
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
     416:	6b 01       	movw	r12, r22
     418:	7c 01       	movw	r14, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     41a:	a0 90 9e 00 	lds	r10, 0x009E
     41e:	b0 90 9f 00 	lds	r11, 0x009F


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     422:	82 e0       	ldi	r24, 0x02	; 2
     424:	c8 16       	cp	r12, r24
     426:	d1 04       	cpc	r13, r1
     428:	e1 04       	cpc	r14, r1
     42a:	f1 04       	cpc	r15, r1
     42c:	08 f4       	brcc	.+2      	; 0x430 <get_fat+0x3e>
     42e:	a0 c0       	rjmp	.+320    	; 0x570 <get_fat+0x17e>
     430:	f5 01       	movw	r30, r10
     432:	86 81       	ldd	r24, Z+6	; 0x06
     434:	97 81       	ldd	r25, Z+7	; 0x07
     436:	a0 85       	ldd	r26, Z+8	; 0x08
     438:	b1 85       	ldd	r27, Z+9	; 0x09
     43a:	c8 16       	cp	r12, r24
     43c:	d9 06       	cpc	r13, r25
     43e:	ea 06       	cpc	r14, r26
     440:	fb 06       	cpc	r15, r27
     442:	08 f0       	brcs	.+2      	; 0x446 <get_fat+0x54>
     444:	95 c0       	rjmp	.+298    	; 0x570 <get_fat+0x17e>
		return 1;

	switch (fs->fs_type) {
     446:	80 81       	ld	r24, Z
     448:	82 30       	cpi	r24, 0x02	; 2
     44a:	09 f4       	brne	.+2      	; 0x44e <get_fat+0x5c>
     44c:	50 c0       	rjmp	.+160    	; 0x4ee <get_fat+0xfc>
     44e:	83 30       	cpi	r24, 0x03	; 3
     450:	09 f4       	brne	.+2      	; 0x454 <get_fat+0x62>
     452:	68 c0       	rjmp	.+208    	; 0x524 <get_fat+0x132>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	09 f0       	breq	.+2      	; 0x45a <get_fat+0x68>
     458:	8b c0       	rjmp	.+278    	; 0x570 <get_fat+0x17e>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     45a:	26 01       	movw	r4, r12
     45c:	56 94       	lsr	r5
     45e:	47 94       	ror	r4
     460:	4c 0c       	add	r4, r12
     462:	5d 1c       	adc	r5, r13
		ofs = bc % 512; bc /= 512;
     464:	92 01       	movw	r18, r4
     466:	31 70       	andi	r19, 0x01	; 1
     468:	45 2c       	mov	r4, r5
     46a:	55 24       	eor	r5, r5
     46c:	46 94       	lsr	r4
     46e:	61 2c       	mov	r6, r1
     470:	71 2c       	mov	r7, r1
     472:	42 85       	ldd	r20, Z+10	; 0x0a
     474:	53 85       	ldd	r21, Z+11	; 0x0b
     476:	64 85       	ldd	r22, Z+12	; 0x0c
     478:	75 85       	ldd	r23, Z+13	; 0x0d
		if (ofs != 511) {
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     47a:	44 0d       	add	r20, r4
     47c:	55 1d       	adc	r21, r5
     47e:	66 1d       	adc	r22, r6
     480:	77 1d       	adc	r23, r7
	switch (fs->fs_type) {
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
		ofs = bc % 512; bc /= 512;
		if (ofs != 511) {
     482:	2f 3f       	cpi	r18, 0xFF	; 255
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	3f 07       	cpc	r19, r31
     488:	29 f0       	breq	.+10     	; 0x494 <get_fat+0xa2>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     48a:	02 e0       	ldi	r16, 0x02	; 2
     48c:	10 e0       	ldi	r17, 0x00	; 0
     48e:	ce 01       	movw	r24, r28
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	1a c0       	rjmp	.+52     	; 0x4c8 <get_fat+0xd6>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     494:	01 e0       	ldi	r16, 0x01	; 1
     496:	10 e0       	ldi	r17, 0x00	; 0
     498:	2f ef       	ldi	r18, 0xFF	; 255
     49a:	31 e0       	ldi	r19, 0x01	; 1
     49c:	ce 01       	movw	r24, r28
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	ea de       	rcall	.-556    	; 0x276 <disk_readp>
     4a2:	81 11       	cpse	r24, r1
     4a4:	65 c0       	rjmp	.+202    	; 0x570 <get_fat+0x17e>
     4a6:	f5 01       	movw	r30, r10
     4a8:	42 85       	ldd	r20, Z+10	; 0x0a
     4aa:	53 85       	ldd	r21, Z+11	; 0x0b
     4ac:	64 85       	ldd	r22, Z+12	; 0x0c
     4ae:	75 85       	ldd	r23, Z+13	; 0x0d
     4b0:	4f 5f       	subi	r20, 0xFF	; 255
     4b2:	5f 4f       	sbci	r21, 0xFF	; 255
     4b4:	6f 4f       	sbci	r22, 0xFF	; 255
     4b6:	7f 4f       	sbci	r23, 0xFF	; 255
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     4b8:	44 0d       	add	r20, r4
     4ba:	55 1d       	adc	r21, r5
     4bc:	66 1d       	adc	r22, r6
     4be:	77 1d       	adc	r23, r7
     4c0:	20 e0       	ldi	r18, 0x00	; 0
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	ce 01       	movw	r24, r28
     4c6:	02 96       	adiw	r24, 0x02	; 2
     4c8:	d6 de       	rcall	.-596    	; 0x276 <disk_readp>
     4ca:	81 11       	cpse	r24, r1
     4cc:	51 c0       	rjmp	.+162    	; 0x570 <get_fat+0x17e>
		}
		wc = LD_WORD(buf);
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     4d2:	c0 fe       	sbrs	r12, 0
     4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <get_fat+0xf2>
     4d6:	bc 01       	movw	r22, r24
     4d8:	e4 e0       	ldi	r30, 0x04	; 4
     4da:	76 95       	lsr	r23
     4dc:	67 95       	ror	r22
     4de:	ea 95       	dec	r30
     4e0:	e1 f7       	brne	.-8      	; 0x4da <get_fat+0xe8>
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <get_fat+0xf6>
     4e4:	bc 01       	movw	r22, r24
     4e6:	7f 70       	andi	r23, 0x0F	; 15
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	45 c0       	rjmp	.+138    	; 0x578 <get_fat+0x186>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     4ee:	96 01       	movw	r18, r12
     4f0:	33 27       	eor	r19, r19
     4f2:	22 0f       	add	r18, r18
     4f4:	33 1f       	adc	r19, r19
     4f6:	77 27       	eor	r23, r23
     4f8:	6f 2d       	mov	r22, r15
     4fa:	5e 2d       	mov	r21, r14
     4fc:	4d 2d       	mov	r20, r13
     4fe:	f5 01       	movw	r30, r10
     500:	82 85       	ldd	r24, Z+10	; 0x0a
     502:	93 85       	ldd	r25, Z+11	; 0x0b
     504:	a4 85       	ldd	r26, Z+12	; 0x0c
     506:	b5 85       	ldd	r27, Z+13	; 0x0d
     508:	48 0f       	add	r20, r24
     50a:	59 1f       	adc	r21, r25
     50c:	6a 1f       	adc	r22, r26
     50e:	7b 1f       	adc	r23, r27
     510:	02 e0       	ldi	r16, 0x02	; 2
     512:	10 e0       	ldi	r17, 0x00	; 0
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	ae de       	rcall	.-676    	; 0x276 <disk_readp>
     51a:	81 11       	cpse	r24, r1
     51c:	29 c0       	rjmp	.+82     	; 0x570 <get_fat+0x17e>
		return LD_WORD(buf);
     51e:	69 81       	ldd	r22, Y+1	; 0x01
     520:	7a 81       	ldd	r23, Y+2	; 0x02
     522:	e2 cf       	rjmp	.-60     	; 0x4e8 <get_fat+0xf6>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     524:	96 01       	movw	r18, r12
     526:	2f 77       	andi	r18, 0x7F	; 127
     528:	33 27       	eor	r19, r19
     52a:	22 0f       	add	r18, r18
     52c:	33 1f       	adc	r19, r19
     52e:	22 0f       	add	r18, r18
     530:	33 1f       	adc	r19, r19
     532:	97 e0       	ldi	r25, 0x07	; 7
     534:	f6 94       	lsr	r15
     536:	e7 94       	ror	r14
     538:	d7 94       	ror	r13
     53a:	c7 94       	ror	r12
     53c:	9a 95       	dec	r25
     53e:	d1 f7       	brne	.-12     	; 0x534 <get_fat+0x142>
     540:	f5 01       	movw	r30, r10
     542:	42 85       	ldd	r20, Z+10	; 0x0a
     544:	53 85       	ldd	r21, Z+11	; 0x0b
     546:	64 85       	ldd	r22, Z+12	; 0x0c
     548:	75 85       	ldd	r23, Z+13	; 0x0d
     54a:	4c 0d       	add	r20, r12
     54c:	5d 1d       	adc	r21, r13
     54e:	6e 1d       	adc	r22, r14
     550:	7f 1d       	adc	r23, r15
     552:	04 e0       	ldi	r16, 0x04	; 4
     554:	10 e0       	ldi	r17, 0x00	; 0
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	8d de       	rcall	.-742    	; 0x276 <disk_readp>
     55c:	81 11       	cpse	r24, r1
     55e:	08 c0       	rjmp	.+16     	; 0x570 <get_fat+0x17e>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	9a 81       	ldd	r25, Y+2	; 0x02
     564:	ab 81       	ldd	r26, Y+3	; 0x03
     566:	bc 81       	ldd	r27, Y+4	; 0x04
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	9f 70       	andi	r25, 0x0F	; 15
     56e:	04 c0       	rjmp	.+8      	; 0x578 <get_fat+0x186>
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
}
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	ff 90       	pop	r15
     58a:	ef 90       	pop	r14
     58c:	df 90       	pop	r13
     58e:	cf 90       	pop	r12
     590:	bf 90       	pop	r11
     592:	af 90       	pop	r10
     594:	7f 90       	pop	r7
     596:	6f 90       	pop	r6
     598:	5f 90       	pop	r5
     59a:	4f 90       	pop	r4
     59c:	08 95       	ret

0000059e <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	ec 01       	movw	r28, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     5b0:	e0 90 9e 00 	lds	r14, 0x009E
     5b4:	f0 90 9f 00 	lds	r15, 0x009F


	i = dj->index + 1;
     5b8:	08 81       	ld	r16, Y
     5ba:	19 81       	ldd	r17, Y+1	; 0x01
     5bc:	0f 5f       	subi	r16, 0xFF	; 255
     5be:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     5c0:	11 f4       	brne	.+4      	; 0x5c6 <dir_next+0x28>
		return FR_NO_FILE;
     5c2:	83 e0       	ldi	r24, 0x03	; 3
     5c4:	55 c0       	rjmp	.+170    	; 0x670 <dir_next+0xd2>
	WORD i;
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     5c6:	4c 85       	ldd	r20, Y+12	; 0x0c
     5c8:	5d 85       	ldd	r21, Y+13	; 0x0d
     5ca:	6e 85       	ldd	r22, Y+14	; 0x0e
     5cc:	7f 85       	ldd	r23, Y+15	; 0x0f
     5ce:	41 15       	cp	r20, r1
     5d0:	51 05       	cpc	r21, r1
     5d2:	61 05       	cpc	r22, r1
     5d4:	71 05       	cpc	r23, r1
     5d6:	a9 f3       	breq	.-22     	; 0x5c2 <dir_next+0x24>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
     5d8:	c8 01       	movw	r24, r16
     5da:	8f 70       	andi	r24, 0x0F	; 15
     5dc:	99 27       	eor	r25, r25
     5de:	89 2b       	or	r24, r25
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <dir_next+0x46>
     5e2:	41 c0       	rjmp	.+130    	; 0x666 <dir_next+0xc8>
		dj->sect++;			/* Next sector */
     5e4:	4f 5f       	subi	r20, 0xFF	; 255
     5e6:	5f 4f       	sbci	r21, 0xFF	; 255
     5e8:	6f 4f       	sbci	r22, 0xFF	; 255
     5ea:	7f 4f       	sbci	r23, 0xFF	; 255
     5ec:	4c 87       	std	Y+12, r20	; 0x0c
     5ee:	5d 87       	std	Y+13, r21	; 0x0d
     5f0:	6e 87       	std	Y+14, r22	; 0x0e
     5f2:	7f 87       	std	Y+15, r23	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     5f4:	68 85       	ldd	r22, Y+8	; 0x08
     5f6:	79 85       	ldd	r23, Y+9	; 0x09
     5f8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5fa:	9b 85       	ldd	r25, Y+11	; 0x0b
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     5fc:	f7 01       	movw	r30, r14
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
     5fe:	61 15       	cp	r22, r1
     600:	71 05       	cpc	r23, r1
     602:	81 05       	cpc	r24, r1
     604:	91 05       	cpc	r25, r1
     606:	31 f4       	brne	.+12     	; 0x614 <dir_next+0x76>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     608:	84 81       	ldd	r24, Z+4	; 0x04
     60a:	95 81       	ldd	r25, Z+5	; 0x05
     60c:	08 17       	cp	r16, r24
     60e:	19 07       	cpc	r17, r25
     610:	c0 f6       	brcc	.-80     	; 0x5c2 <dir_next+0x24>
     612:	29 c0       	rjmp	.+82     	; 0x666 <dir_next+0xc8>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     614:	22 81       	ldd	r18, Z+2	; 0x02
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	a9 01       	movw	r20, r18
     61a:	41 50       	subi	r20, 0x01	; 1
     61c:	51 09       	sbc	r21, r1
     61e:	98 01       	movw	r18, r16
     620:	e4 e0       	ldi	r30, 0x04	; 4
     622:	36 95       	lsr	r19
     624:	27 95       	ror	r18
     626:	ea 95       	dec	r30
     628:	e1 f7       	brne	.-8      	; 0x622 <dir_next+0x84>
     62a:	24 23       	and	r18, r20
     62c:	35 23       	and	r19, r21
     62e:	23 2b       	or	r18, r19
     630:	d1 f4       	brne	.+52     	; 0x666 <dir_next+0xc8>
				clst = get_fat(dj->clust);		/* Get next cluster */
     632:	df de       	rcall	.-578    	; 0x3f2 <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     634:	62 30       	cpi	r22, 0x02	; 2
     636:	71 05       	cpc	r23, r1
     638:	81 05       	cpc	r24, r1
     63a:	91 05       	cpc	r25, r1
     63c:	c0 f0       	brcs	.+48     	; 0x66e <dir_next+0xd0>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
     63e:	f7 01       	movw	r30, r14
     640:	c6 80       	ldd	r12, Z+6	; 0x06
     642:	d7 80       	ldd	r13, Z+7	; 0x07
     644:	e0 84       	ldd	r14, Z+8	; 0x08
     646:	f1 84       	ldd	r15, Z+9	; 0x09
     648:	6c 15       	cp	r22, r12
     64a:	7d 05       	cpc	r23, r13
     64c:	8e 05       	cpc	r24, r14
     64e:	9f 05       	cpc	r25, r15
     650:	08 f0       	brcs	.+2      	; 0x654 <dir_next+0xb6>
     652:	b7 cf       	rjmp	.-146    	; 0x5c2 <dir_next+0x24>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     654:	68 87       	std	Y+8, r22	; 0x08
     656:	79 87       	std	Y+9, r23	; 0x09
     658:	8a 87       	std	Y+10, r24	; 0x0a
     65a:	9b 87       	std	Y+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     65c:	42 de       	rcall	.-892    	; 0x2e2 <clust2sect>
     65e:	6c 87       	std	Y+12, r22	; 0x0c
     660:	7d 87       	std	Y+13, r23	; 0x0d
     662:	8e 87       	std	Y+14, r24	; 0x0e
     664:	9f 87       	std	Y+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     666:	19 83       	std	Y+1, r17	; 0x01
     668:	08 83       	st	Y, r16

	return FR_OK;
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	01 c0       	rjmp	.+2      	; 0x670 <dir_next+0xd2>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     66e:	81 e0       	ldi	r24, 0x01	; 1
	}

	dj->index = i;

	return FR_OK;
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	ef 90       	pop	r14
     67c:	df 90       	pop	r13
     67e:	cf 90       	pop	r12
     680:	08 95       	ret

00000682 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     682:	cf 92       	push	r12
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	ec 01       	movw	r28, r24
     694:	6a 01       	movw	r12, r20
     696:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
     698:	02 e0       	ldi	r16, 0x02	; 2
     69a:	10 e0       	ldi	r17, 0x00	; 0
     69c:	2e ef       	ldi	r18, 0xFE	; 254
     69e:	31 e0       	ldi	r19, 0x01	; 1
     6a0:	ea dd       	rcall	.-1068   	; 0x276 <disk_readp>
     6a2:	81 11       	cpse	r24, r1
     6a4:	24 c0       	rjmp	.+72     	; 0x6ee <check_fs+0x6c>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
     6a6:	88 81       	ld	r24, Y
     6a8:	99 81       	ldd	r25, Y+1	; 0x01
     6aa:	85 35       	cpi	r24, 0x55	; 85
     6ac:	9a 4a       	sbci	r25, 0xAA	; 170
     6ae:	09 f5       	brne	.+66     	; 0x6f2 <check_fs+0x70>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
     6b0:	26 e3       	ldi	r18, 0x36	; 54
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	b7 01       	movw	r22, r14
     6b6:	a6 01       	movw	r20, r12
     6b8:	ce 01       	movw	r24, r28
     6ba:	dd dd       	rcall	.-1094   	; 0x276 <disk_readp>
     6bc:	81 11       	cpse	r24, r1
     6be:	07 c0       	rjmp	.+14     	; 0x6ce <check_fs+0x4c>
     6c0:	88 81       	ld	r24, Y
     6c2:	99 81       	ldd	r25, Y+1	; 0x01
     6c4:	86 34       	cpi	r24, 0x46	; 70
     6c6:	91 44       	sbci	r25, 0x41	; 65
     6c8:	11 f4       	brne	.+4      	; 0x6ce <check_fs+0x4c>
		return 0;
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	15 c0       	rjmp	.+42     	; 0x6f8 <check_fs+0x76>
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
     6ce:	02 e0       	ldi	r16, 0x02	; 2
     6d0:	10 e0       	ldi	r17, 0x00	; 0
     6d2:	22 e5       	ldi	r18, 0x52	; 82
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	b7 01       	movw	r22, r14
     6d8:	a6 01       	movw	r20, r12
     6da:	ce 01       	movw	r24, r28
     6dc:	cc dd       	rcall	.-1128   	; 0x276 <disk_readp>
     6de:	81 11       	cpse	r24, r1
     6e0:	0a c0       	rjmp	.+20     	; 0x6f6 <check_fs+0x74>
     6e2:	88 81       	ld	r24, Y
     6e4:	99 81       	ldd	r25, Y+1	; 0x01
     6e6:	86 34       	cpi	r24, 0x46	; 70
     6e8:	91 44       	sbci	r25, 0x41	; 65
     6ea:	29 f4       	brne	.+10     	; 0x6f6 <check_fs+0x74>
     6ec:	ee cf       	rjmp	.-36     	; 0x6ca <check_fs+0x48>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
		return 3;
     6ee:	83 e0       	ldi	r24, 0x03	; 3
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <check_fs+0x76>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <check_fs+0x76>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
}
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	0f 91       	pop	r16
     700:	ff 90       	pop	r15
     702:	ef 90       	pop	r14
     704:	df 90       	pop	r13
     706:	cf 90       	pop	r12
     708:	08 95       	ret

0000070a <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
     70a:	9f 92       	push	r9
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	cf 92       	push	r12
     712:	df 92       	push	r13
     714:	ef 92       	push	r14
     716:	ff 92       	push	r15
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	ec 01       	movw	r28, r24
     722:	6b 01       	movw	r12, r22
     724:	24 2f       	mov	r18, r20
     726:	95 2f       	mov	r25, r21
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
     728:	da 01       	movw	r26, r20
     72a:	8d 91       	ld	r24, X+
     72c:	ad 01       	movw	r20, r26
     72e:	80 32       	cpi	r24, 0x20	; 32
     730:	c9 f3       	breq	.-14     	; 0x724 <follow_path+0x1a>
     732:	e2 2e       	mov	r14, r18
     734:	f9 2e       	mov	r15, r25
	if (*path == '/') path++;			/* Strip heading separator */
     736:	8f 32       	cpi	r24, 0x2F	; 47
     738:	19 f4       	brne	.+6      	; 0x740 <follow_path+0x36>
     73a:	bf ef       	ldi	r27, 0xFF	; 255
     73c:	eb 1a       	sub	r14, r27
     73e:	fb 0a       	sbc	r15, r27
	dj->sclust = 0;						/* Set start directory (always root dir) */
     740:	1c 82       	std	Y+4, r1	; 0x04
     742:	1d 82       	std	Y+5, r1	; 0x05
     744:	1e 82       	std	Y+6, r1	; 0x06
     746:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     748:	f7 01       	movw	r30, r14
     74a:	80 81       	ld	r24, Z
     74c:	81 32       	cpi	r24, 0x21	; 33
     74e:	38 f0       	brcs	.+14     	; 0x75e <follow_path+0x54>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     750:	50 e2       	ldi	r21, 0x20	; 32
     752:	95 2e       	mov	r9, r21
     754:	56 01       	movw	r10, r12
     756:	fb e0       	ldi	r31, 0x0B	; 11
     758:	af 0e       	add	r10, r31
     75a:	b1 1c       	adc	r11, r1
     75c:	5c c0       	rjmp	.+184    	; 0x816 <follow_path+0x10c>
	while (*path == ' ') path++;		/* Skip leading spaces */
	if (*path == '/') path++;			/* Strip heading separator */
	dj->sclust = 0;						/* Set start directory (always root dir) */

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
		res = dir_rewind(dj);
     75e:	ce 01       	movw	r24, r28
     760:	00 de       	rcall	.-1024   	; 0x362 <dir_rewind>
		dir[0] = 0;
     762:	d6 01       	movw	r26, r12
     764:	1c 92       	st	X, r1
     766:	bd c0       	rjmp	.+378    	; 0x8e2 <follow_path+0x1d8>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	10 e0       	ldi	r17, 0x00	; 0
     76c:	48 e0       	ldi	r20, 0x08	; 8
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     76e:	51 e0       	ldi	r21, 0x01	; 1
     770:	51 0f       	add	r21, r17
     772:	97 01       	movw	r18, r14
     774:	21 0f       	add	r18, r17
     776:	31 1d       	adc	r19, r1
     778:	d9 01       	movw	r26, r18
     77a:	8c 91       	ld	r24, X
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     77c:	81 32       	cpi	r24, 0x21	; 33
     77e:	08 f0       	brcs	.+2      	; 0x782 <follow_path+0x78>
     780:	55 c0       	rjmp	.+170    	; 0x82c <follow_path+0x122>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     782:	e5 0e       	add	r14, r21
     784:	f1 1c       	adc	r15, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	81 32       	cpi	r24, 0x21	; 33
     78a:	08 f0       	brcs	.+2      	; 0x78e <follow_path+0x84>
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	93 87       	std	Z+11, r25	; 0x0b
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
     790:	ce 01       	movw	r24, r28
     792:	e7 dd       	rcall	.-1074   	; 0x362 <dir_rewind>
	if (res != FR_OK) return res;
     794:	81 11       	cpse	r24, r1
     796:	90 c0       	rjmp	.+288    	; 0x8b8 <follow_path+0x1ae>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     798:	28 81       	ld	r18, Y
     79a:	39 81       	ldd	r19, Y+1	; 0x01
     79c:	2f 70       	andi	r18, 0x0F	; 15
     79e:	33 27       	eor	r19, r19
     7a0:	45 e0       	ldi	r20, 0x05	; 5
     7a2:	22 0f       	add	r18, r18
     7a4:	33 1f       	adc	r19, r19
     7a6:	4a 95       	dec	r20
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <follow_path+0x98>
     7aa:	4c 85       	ldd	r20, Y+12	; 0x0c
     7ac:	5d 85       	ldd	r21, Y+13	; 0x0d
     7ae:	6e 85       	ldd	r22, Y+14	; 0x0e
     7b0:	7f 85       	ldd	r23, Y+15	; 0x0f
     7b2:	00 e2       	ldi	r16, 0x20	; 32
     7b4:	10 e0       	ldi	r17, 0x00	; 0
     7b6:	c6 01       	movw	r24, r12
     7b8:	5e dd       	rcall	.-1348   	; 0x276 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     7ba:	81 11       	cpse	r24, r1
     7bc:	86 c0       	rjmp	.+268    	; 0x8ca <follow_path+0x1c0>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     7be:	f6 01       	movw	r30, r12
     7c0:	80 81       	ld	r24, Z
     7c2:	88 23       	and	r24, r24
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <follow_path+0xbe>
     7c6:	7a c0       	rjmp	.+244    	; 0x8bc <follow_path+0x1b2>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     7c8:	43 85       	ldd	r20, Z+11	; 0x0b
     7ca:	43 fd       	sbrc	r20, 3
     7cc:	72 c0       	rjmp	.+228    	; 0x8b2 <follow_path+0x1a8>
     7ce:	6a 81       	ldd	r22, Y+2	; 0x02
     7d0:	7b 81       	ldd	r23, Y+3	; 0x03
     7d2:	9b 01       	movw	r18, r22
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     7d4:	ea 15       	cp	r30, r10
     7d6:	fb 05       	cpc	r31, r11
     7d8:	09 f0       	breq	.+2      	; 0x7dc <follow_path+0xd2>
     7da:	62 c0       	rjmp	.+196    	; 0x8a0 <follow_path+0x196>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
     7dc:	fb 01       	movw	r30, r22
     7de:	83 85       	ldd	r24, Z+11	; 0x0b
     7e0:	81 11       	cpse	r24, r1
     7e2:	75 c0       	rjmp	.+234    	; 0x8ce <follow_path+0x1c4>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
     7e4:	44 ff       	sbrs	r20, 4
     7e6:	75 c0       	rjmp	.+234    	; 0x8d2 <follow_path+0x1c8>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
     7e8:	d6 01       	movw	r26, r12
     7ea:	54 96       	adiw	r26, 0x14	; 20
     7ec:	8d 91       	ld	r24, X+
     7ee:	9c 91       	ld	r25, X
     7f0:	55 97       	sbiw	r26, 0x15	; 21
     7f2:	a0 e0       	ldi	r26, 0x00	; 0
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	dc 01       	movw	r26, r24
     7f8:	99 27       	eor	r25, r25
     7fa:	88 27       	eor	r24, r24
     7fc:	f6 01       	movw	r30, r12
     7fe:	42 8d       	ldd	r20, Z+26	; 0x1a
     800:	53 8d       	ldd	r21, Z+27	; 0x1b
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	84 2b       	or	r24, r20
     808:	95 2b       	or	r25, r21
     80a:	a6 2b       	or	r26, r22
     80c:	b7 2b       	or	r27, r23
     80e:	8c 83       	std	Y+4, r24	; 0x04
     810:	9d 83       	std	Y+5, r25	; 0x05
     812:	ae 83       	std	Y+6, r26	; 0x06
     814:	bf 83       	std	Y+7, r27	; 0x07
     816:	ea 81       	ldd	r30, Y+2	; 0x02
     818:	fb 81       	ldd	r31, Y+3	; 0x03
     81a:	df 01       	movw	r26, r30
     81c:	cf 01       	movw	r24, r30
     81e:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     820:	a8 17       	cp	r26, r24
     822:	b9 07       	cpc	r27, r25
     824:	09 f4       	brne	.+2      	; 0x828 <follow_path+0x11e>
     826:	a0 cf       	rjmp	.-192    	; 0x768 <follow_path+0x5e>
     828:	9d 92       	st	X+, r9
     82a:	fa cf       	rjmp	.-12     	; 0x820 <follow_path+0x116>
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     82c:	8f 32       	cpi	r24, 0x2F	; 47
     82e:	09 f4       	brne	.+2      	; 0x832 <follow_path+0x128>
     830:	a8 cf       	rjmp	.-176    	; 0x782 <follow_path+0x78>
		if (c == '.' || i >= ni) {
     832:	8e 32       	cpi	r24, 0x2E	; 46
     834:	09 f4       	brne	.+2      	; 0x838 <follow_path+0x12e>
     836:	4f c0       	rjmp	.+158    	; 0x8d6 <follow_path+0x1cc>
     838:	94 17       	cp	r25, r20
     83a:	08 f0       	brcs	.+2      	; 0x83e <follow_path+0x134>
     83c:	a2 cf       	rjmp	.-188    	; 0x782 <follow_path+0x78>
     83e:	29 2f       	mov	r18, r25
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	01 e0       	ldi	r16, 0x01	; 1
     844:	09 0f       	add	r16, r25
		}
#ifdef _EXCVT
		if (c >= 0x80)					/* To upper extended char (SBCS) */
			c = cvt[c - 0x80];
#endif
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
     846:	6f e7       	ldi	r22, 0x7F	; 127
     848:	68 0f       	add	r22, r24
     84a:	6f 31       	cpi	r22, 0x1F	; 31
     84c:	20 f0       	brcs	.+8      	; 0x856 <follow_path+0x14c>
     84e:	60 e2       	ldi	r22, 0x20	; 32
     850:	68 0f       	add	r22, r24
     852:	6d 31       	cpi	r22, 0x1D	; 29
     854:	d0 f4       	brcc	.+52     	; 0x88a <follow_path+0x180>
     856:	64 2f       	mov	r22, r20
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	61 50       	subi	r22, 0x01	; 1
     85c:	71 09       	sbc	r23, r1
     85e:	26 17       	cp	r18, r22
     860:	37 07       	cpc	r19, r23
     862:	9c f4       	brge	.+38     	; 0x88a <follow_path+0x180>
			d = p[si++];				/* Get 2nd byte */
     864:	b7 01       	movw	r22, r14
     866:	65 0f       	add	r22, r21
     868:	71 1d       	adc	r23, r1
     86a:	db 01       	movw	r26, r22
     86c:	5c 91       	ld	r21, X
			sfn[i++] = c;
     86e:	2e 0f       	add	r18, r30
     870:	3f 1f       	adc	r19, r31
     872:	d9 01       	movw	r26, r18
     874:	8c 93       	st	X, r24
			sfn[i++] = d;
     876:	9e 5f       	subi	r25, 0xFE	; 254
     878:	9f 01       	movw	r18, r30
     87a:	20 0f       	add	r18, r16
     87c:	31 1d       	adc	r19, r1
     87e:	d9 01       	movw	r26, r18
     880:	5c 93       	st	X, r21
#ifdef _EXCVT
		if (c >= 0x80)					/* To upper extended char (SBCS) */
			c = cvt[c - 0x80];
#endif
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
     882:	52 e0       	ldi	r21, 0x02	; 2
     884:	51 0f       	add	r21, r17

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     886:	15 2f       	mov	r17, r21
     888:	72 cf       	rjmp	.-284    	; 0x76e <follow_path+0x64>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     88a:	9f e9       	ldi	r25, 0x9F	; 159
     88c:	98 0f       	add	r25, r24
     88e:	9a 31       	cpi	r25, 0x1A	; 26
     890:	08 f4       	brcc	.+2      	; 0x894 <follow_path+0x18a>
     892:	80 52       	subi	r24, 0x20	; 32
			sfn[i++] = c;
     894:	2e 0f       	add	r18, r30
     896:	3f 1f       	adc	r19, r31
     898:	d9 01       	movw	r26, r18
     89a:	8c 93       	st	X, r24
     89c:	90 2f       	mov	r25, r16
     89e:	f3 cf       	rjmp	.-26     	; 0x886 <follow_path+0x17c>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     8a0:	81 91       	ld	r24, Z+
     8a2:	d9 01       	movw	r26, r18
     8a4:	5d 91       	ld	r21, X+
     8a6:	9d 01       	movw	r18, r26
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	85 1b       	sub	r24, r21
     8ac:	91 09       	sbc	r25, r1
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <follow_path+0x1a8>
     8b0:	91 cf       	rjmp	.-222    	; 0x7d4 <follow_path+0xca>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
     8b2:	ce 01       	movw	r24, r28
     8b4:	74 de       	rcall	.-792    	; 0x59e <dir_next>
     8b6:	6e cf       	rjmp	.-292    	; 0x794 <follow_path+0x8a>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	99 f4       	brne	.+38     	; 0x8e2 <follow_path+0x1d8>
     8bc:	ea 81       	ldd	r30, Y+2	; 0x02
     8be:	fb 81       	ldd	r31, Y+3	; 0x03
     8c0:	83 85       	ldd	r24, Z+11	; 0x0b
     8c2:	88 23       	and	r24, r24
     8c4:	31 f0       	breq	.+12     	; 0x8d2 <follow_path+0x1c8>
     8c6:	83 e0       	ldi	r24, 0x03	; 3
     8c8:	0c c0       	rjmp	.+24     	; 0x8e2 <follow_path+0x1d8>
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	0a c0       	rjmp	.+20     	; 0x8e2 <follow_path+0x1d8>
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <follow_path+0x1d8>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	06 c0       	rjmp	.+12     	; 0x8e2 <follow_path+0x1d8>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
     8d6:	48 30       	cpi	r20, 0x08	; 8
     8d8:	09 f0       	breq	.+2      	; 0x8dc <follow_path+0x1d2>
     8da:	53 cf       	rjmp	.-346    	; 0x782 <follow_path+0x78>
			i = 8; ni = 11;
     8dc:	98 e0       	ldi	r25, 0x08	; 8
     8de:	4b e0       	ldi	r20, 0x0B	; 11
     8e0:	d2 cf       	rjmp	.-92     	; 0x886 <follow_path+0x17c>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	af 90       	pop	r10
     8f6:	9f 90       	pop	r9
     8f8:	08 95       	ret

000008fa <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
     8fa:	2f 92       	push	r2
     8fc:	3f 92       	push	r3
     8fe:	4f 92       	push	r4
     900:	5f 92       	push	r5
     902:	6f 92       	push	r6
     904:	7f 92       	push	r7
     906:	8f 92       	push	r8
     908:	9f 92       	push	r9
     90a:	af 92       	push	r10
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	a4 97       	sbiw	r28, 0x24	; 36
     924:	0f b6       	in	r0, 0x3f	; 63
     926:	f8 94       	cli
     928:	de bf       	out	0x3e, r29	; 62
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	cd bf       	out	0x3d, r28	; 61
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
     92e:	10 92 9f 00 	sts	0x009F, r1
     932:	10 92 9e 00 	sts	0x009E, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	09 f4       	brne	.+2      	; 0x93c <pf_mount+0x42>
     93a:	ca c0       	rjmp	.+404    	; 0xad0 <pf_mount+0x1d6>
     93c:	1c 01       	movw	r2, r24

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
     93e:	fe db       	rcall	.-2052   	; 0x13c <disk_initialize>
     940:	80 fd       	sbrc	r24, 0
     942:	c8 c0       	rjmp	.+400    	; 0xad4 <pf_mount+0x1da>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
     944:	40 e0       	ldi	r20, 0x00	; 0
     946:	50 e0       	ldi	r21, 0x00	; 0
     948:	ba 01       	movw	r22, r20
     94a:	ce 01       	movw	r24, r28
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	99 de       	rcall	.-718    	; 0x682 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	e9 f4       	brne	.+58     	; 0x98e <pf_mount+0x94>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
     954:	00 e1       	ldi	r16, 0x10	; 16
     956:	10 e0       	ldi	r17, 0x00	; 0
     958:	2e eb       	ldi	r18, 0xBE	; 190
     95a:	31 e0       	ldi	r19, 0x01	; 1
     95c:	40 e0       	ldi	r20, 0x00	; 0
     95e:	50 e0       	ldi	r21, 0x00	; 0
     960:	ba 01       	movw	r22, r20
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	87 dc       	rcall	.-1778   	; 0x276 <disk_readp>
     968:	88 23       	and	r24, r24
     96a:	11 f0       	breq	.+4      	; 0x970 <pf_mount+0x76>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	b3 c0       	rjmp	.+358    	; 0xad6 <pf_mount+0x1dc>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
     970:	8d 81       	ldd	r24, Y+5	; 0x05
     972:	81 11       	cpse	r24, r1
     974:	02 c0       	rjmp	.+4      	; 0x97a <pf_mount+0x80>
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	ae c0       	rjmp	.+348    	; 0xad6 <pf_mount+0x1dc>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
     97a:	49 84       	ldd	r4, Y+9	; 0x09
     97c:	5a 84       	ldd	r5, Y+10	; 0x0a
     97e:	6b 84       	ldd	r6, Y+11	; 0x0b
     980:	7c 84       	ldd	r7, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
     982:	b3 01       	movw	r22, r6
     984:	a2 01       	movw	r20, r4
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	7b de       	rcall	.-778    	; 0x682 <check_fs>
     98c:	03 c0       	rjmp	.+6      	; 0x994 <pf_mount+0x9a>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
     98e:	41 2c       	mov	r4, r1
     990:	51 2c       	mov	r5, r1
     992:	32 01       	movw	r6, r4
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     994:	83 30       	cpi	r24, 0x03	; 3
     996:	51 f3       	breq	.-44     	; 0x96c <pf_mount+0x72>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     998:	81 11       	cpse	r24, r1
     99a:	ed cf       	rjmp	.-38     	; 0x976 <pf_mount+0x7c>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
     99c:	04 e2       	ldi	r16, 0x24	; 36
     99e:	10 e0       	ldi	r17, 0x00	; 0
     9a0:	2d e0       	ldi	r18, 0x0D	; 13
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	b3 01       	movw	r22, r6
     9a6:	a2 01       	movw	r20, r4
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	64 dc       	rcall	.-1848   	; 0x276 <disk_readp>
     9ae:	81 11       	cpse	r24, r1
     9b0:	dd cf       	rjmp	.-70     	; 0x96c <pf_mount+0x72>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
     9b2:	6a 85       	ldd	r22, Y+10	; 0x0a
     9b4:	7b 85       	ldd	r23, Y+11	; 0x0b
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
     9ba:	61 15       	cp	r22, r1
     9bc:	71 05       	cpc	r23, r1
     9be:	81 05       	cpc	r24, r1
     9c0:	91 05       	cpc	r25, r1
     9c2:	21 f4       	brne	.+8      	; 0x9cc <pf_mount+0xd2>
     9c4:	68 8d       	ldd	r22, Y+24	; 0x18
     9c6:	79 8d       	ldd	r23, Y+25	; 0x19
     9c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9ca:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
     9cc:	2c 81       	ldd	r18, Y+4	; 0x04
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e0       	ldi	r20, 0x00	; 0
     9d2:	50 e0       	ldi	r21, 0x00	; 0
     9d4:	e5 d6       	rcall	.+3530   	; 0x17a0 <__umulsidi3>
     9d6:	49 01       	movw	r8, r18
     9d8:	5a 01       	movw	r10, r20
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
     9da:	0a 81       	ldd	r16, Y+2	; 0x02
     9dc:	1b 81       	ldd	r17, Y+3	; 0x03
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	73 01       	movw	r14, r6
     9e4:	62 01       	movw	r12, r4
     9e6:	c0 0e       	add	r12, r16
     9e8:	d1 1e       	adc	r13, r17
     9ea:	e2 1e       	adc	r14, r18
     9ec:	f3 1e       	adc	r15, r19
     9ee:	f1 01       	movw	r30, r2
     9f0:	c2 86       	std	Z+10, r12	; 0x0a
     9f2:	d3 86       	std	Z+11, r13	; 0x0b
     9f4:	e4 86       	std	Z+12, r14	; 0x0c
     9f6:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
     9f8:	49 81       	ldd	r20, Y+1	; 0x01
     9fa:	42 83       	std	Z+2, r20	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
     9fc:	4d 80       	ldd	r4, Y+5	; 0x05
     9fe:	5e 80       	ldd	r5, Y+6	; 0x06
     a00:	55 82       	std	Z+5, r5	; 0x05
     a02:	44 82       	std	Z+4, r4	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
     a04:	8f 81       	ldd	r24, Y+7	; 0x07
     a06:	98 85       	ldd	r25, Y+8	; 0x08
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	a1 05       	cpc	r26, r1
     a10:	b1 05       	cpc	r27, r1
     a12:	21 f4       	brne	.+8      	; 0xa1c <pf_mount+0x122>
     a14:	8c 89       	ldd	r24, Y+20	; 0x14
     a16:	9d 89       	ldd	r25, Y+21	; 0x15
     a18:	ae 89       	ldd	r26, Y+22	; 0x16
     a1a:	bf 89       	ldd	r27, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
     a1c:	54 e0       	ldi	r21, 0x04	; 4
     a1e:	56 94       	lsr	r5
     a20:	47 94       	ror	r4
     a22:	5a 95       	dec	r21
     a24:	e1 f7       	brne	.-8      	; 0xa1e <pf_mount+0x124>
     a26:	61 2c       	mov	r6, r1
     a28:	71 2c       	mov	r7, r1
     a2a:	80 1b       	sub	r24, r16
     a2c:	91 0b       	sbc	r25, r17
     a2e:	a2 0b       	sbc	r26, r18
     a30:	b3 0b       	sbc	r27, r19
     a32:	88 19       	sub	r24, r8
     a34:	99 09       	sbc	r25, r9
     a36:	aa 09       	sbc	r26, r10
     a38:	bb 09       	sbc	r27, r11
     a3a:	bc 01       	movw	r22, r24
     a3c:	cd 01       	movw	r24, r26
     a3e:	64 19       	sub	r22, r4
     a40:	75 09       	sbc	r23, r5
     a42:	86 09       	sbc	r24, r6
     a44:	97 09       	sbc	r25, r7
		) / fs->csize + 2;
     a46:	24 2f       	mov	r18, r20
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	84 d6       	rcall	.+3336   	; 0x1758 <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
     a50:	da 01       	movw	r26, r20
     a52:	c9 01       	movw	r24, r18
     a54:	02 96       	adiw	r24, 0x02	; 2
     a56:	a1 1d       	adc	r26, r1
     a58:	b1 1d       	adc	r27, r1
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
     a5a:	f1 01       	movw	r30, r2
     a5c:	86 83       	std	Z+6, r24	; 0x06
     a5e:	97 83       	std	Z+7, r25	; 0x07
     a60:	a0 87       	std	Z+8, r26	; 0x08
     a62:	b1 87       	std	Z+9, r27	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
     a64:	87 3f       	cpi	r24, 0xF7	; 247
     a66:	ff e0       	ldi	r31, 0x0F	; 15
     a68:	9f 07       	cpc	r25, r31
     a6a:	a1 05       	cpc	r26, r1
     a6c:	b1 05       	cpc	r27, r1
     a6e:	38 f0       	brcs	.+14     	; 0xa7e <pf_mount+0x184>
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
     a70:	87 3f       	cpi	r24, 0xF7	; 247
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	a1 05       	cpc	r26, r1
     a76:	b1 05       	cpc	r27, r1
     a78:	20 f0       	brcs	.+8      	; 0xa82 <pf_mount+0x188>
#if _FS_FAT32
		fmt = FS_FAT32;
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <pf_mount+0x18a>
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
#if _FS_FAT12
		fmt = FS_FAT12;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	01 c0       	rjmp	.+2      	; 0xa84 <pf_mount+0x18a>
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
     a82:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
     a84:	f1 01       	movw	r30, r2
     a86:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
     a88:	83 30       	cpi	r24, 0x03	; 3
     a8a:	29 f4       	brne	.+10     	; 0xa96 <pf_mount+0x19c>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
     a8c:	88 a1       	ldd	r24, Y+32	; 0x20
     a8e:	99 a1       	ldd	r25, Y+33	; 0x21
     a90:	aa a1       	ldd	r26, Y+34	; 0x22
     a92:	bb a1       	ldd	r27, Y+35	; 0x23
     a94:	07 c0       	rjmp	.+14     	; 0xaa4 <pf_mount+0x1aa>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
     a96:	d5 01       	movw	r26, r10
     a98:	c4 01       	movw	r24, r8
     a9a:	8c 0d       	add	r24, r12
     a9c:	9d 1d       	adc	r25, r13
     a9e:	ae 1d       	adc	r26, r14
     aa0:	bf 1d       	adc	r27, r15
     aa2:	f1 01       	movw	r30, r2
     aa4:	86 87       	std	Z+14, r24	; 0x0e
     aa6:	97 87       	std	Z+15, r25	; 0x0f
     aa8:	a0 8b       	std	Z+16, r26	; 0x10
     aaa:	b1 8b       	std	Z+17, r27	; 0x11
     aac:	4c 0c       	add	r4, r12
     aae:	5d 1c       	adc	r5, r13
     ab0:	6e 1c       	adc	r6, r14
     ab2:	7f 1c       	adc	r7, r15
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
     ab4:	84 0c       	add	r8, r4
     ab6:	95 1c       	adc	r9, r5
     ab8:	a6 1c       	adc	r10, r6
     aba:	b7 1c       	adc	r11, r7
     abc:	f1 01       	movw	r30, r2
     abe:	82 8a       	std	Z+18, r8	; 0x12
     ac0:	93 8a       	std	Z+19, r9	; 0x13
     ac2:	a4 8a       	std	Z+20, r10	; 0x14
     ac4:	b5 8a       	std	Z+21, r11	; 0x15

	fs->flag = 0;
     ac6:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
     ac8:	30 92 9f 00 	sts	0x009F, r3
     acc:	20 92 9e 00 	sts	0x009E, r2
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
	if (!fs) return FR_OK;				/* Unregister fs object */
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <pf_mount+0x1dc>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
     ad4:	82 e0       	ldi	r24, 0x02	; 2

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
     ad6:	a4 96       	adiw	r28, 0x24	; 36
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	f8 94       	cli
     adc:	de bf       	out	0x3e, r29	; 62
     ade:	0f be       	out	0x3f, r0	; 63
     ae0:	cd bf       	out	0x3d, r28	; 61
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	9f 90       	pop	r9
     af8:	8f 90       	pop	r8
     afa:	7f 90       	pop	r7
     afc:	6f 90       	pop	r6
     afe:	5f 90       	pop	r5
     b00:	4f 90       	pop	r4
     b02:	3f 90       	pop	r3
     b04:	2f 90       	pop	r2
     b06:	08 95       	ret

00000b08 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	cf 93       	push	r28
     b0e:	df 93       	push	r29
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
     b14:	ec 97       	sbiw	r28, 0x3c	; 60
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     b20:	00 91 9e 00 	lds	r16, 0x009E
     b24:	10 91 9f 00 	lds	r17, 0x009F


	if (!fs)						/* Check file system */
     b28:	01 15       	cp	r16, r1
     b2a:	11 05       	cpc	r17, r1
     b2c:	c1 f1       	breq	.+112    	; 0xb9e <pf_open+0x96>
     b2e:	ac 01       	movw	r20, r24
		return FR_NOT_ENABLED;

	fs->flag = 0;
     b30:	f8 01       	movw	r30, r16
     b32:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
     b34:	ce 01       	movw	r24, r28
     b36:	c1 96       	adiw	r24, 0x31	; 49
     b38:	9c a3       	std	Y+36, r25	; 0x24
     b3a:	8b a3       	std	Y+35, r24	; 0x23
	res = follow_path(&dj, dir, path);	/* Follow the file path */
     b3c:	be 01       	movw	r22, r28
     b3e:	6f 5f       	subi	r22, 0xFF	; 255
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	40 97       	sbiw	r24, 0x10	; 16
     b44:	e2 dd       	rcall	.-1084   	; 0x70a <follow_path>
	if (res != FR_OK) return res;		/* Follow failed */
     b46:	81 11       	cpse	r24, r1
     b48:	2d c0       	rjmp	.+90     	; 0xba4 <pf_open+0x9c>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	88 23       	and	r24, r24
     b4e:	49 f1       	breq	.+82     	; 0xba2 <pf_open+0x9a>
     b50:	8c 85       	ldd	r24, Y+12	; 0x0c
     b52:	84 fd       	sbrc	r24, 4
     b54:	26 c0       	rjmp	.+76     	; 0xba2 <pf_open+0x9a>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
     b56:	8d 89       	ldd	r24, Y+21	; 0x15
     b58:	9e 89       	ldd	r25, Y+22	; 0x16
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	dc 01       	movw	r26, r24
     b60:	99 27       	eor	r25, r25
     b62:	88 27       	eor	r24, r24
     b64:	4b 8d       	ldd	r20, Y+27	; 0x1b
     b66:	5c 8d       	ldd	r21, Y+28	; 0x1c
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	84 2b       	or	r24, r20
     b6e:	95 2b       	or	r25, r21
     b70:	a6 2b       	or	r26, r22
     b72:	b7 2b       	or	r27, r23
     b74:	f8 01       	movw	r30, r16
     b76:	86 8f       	std	Z+30, r24	; 0x1e
     b78:	97 8f       	std	Z+31, r25	; 0x1f
     b7a:	a0 a3       	std	Z+32, r26	; 0x20
     b7c:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
     b7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     b80:	9e 8d       	ldd	r25, Y+30	; 0x1e
     b82:	af 8d       	ldd	r26, Y+31	; 0x1f
     b84:	b8 a1       	ldd	r27, Y+32	; 0x20
     b86:	82 8f       	std	Z+26, r24	; 0x1a
     b88:	93 8f       	std	Z+27, r25	; 0x1b
     b8a:	a4 8f       	std	Z+28, r26	; 0x1c
     b8c:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
     b8e:	16 8a       	std	Z+22, r1	; 0x16
     b90:	17 8a       	std	Z+23, r1	; 0x17
     b92:	10 8e       	std	Z+24, r1	; 0x18
     b94:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	03 c0       	rjmp	.+6      	; 0xba4 <pf_open+0x9c>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
		return FR_NOT_ENABLED;
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	01 c0       	rjmp	.+2      	; 0xba4 <pf_open+0x9c>
	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
     ba2:	83 e0       	ldi	r24, 0x03	; 3
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
     ba4:	ec 96       	adiw	r28, 0x3c	; 60
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
     bba:	4f 92       	push	r4
     bbc:	5f 92       	push	r5
     bbe:	6f 92       	push	r6
     bc0:	7f 92       	push	r7
     bc2:	8f 92       	push	r8
     bc4:	9f 92       	push	r9
     bc6:	af 92       	push	r10
     bc8:	bf 92       	push	r11
     bca:	cf 92       	push	r12
     bcc:	df 92       	push	r13
     bce:	ef 92       	push	r14
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	4c 01       	movw	r8, r24
     bdc:	6b 01       	movw	r12, r22
     bde:	5a 01       	movw	r10, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
     be0:	c0 91 9e 00 	lds	r28, 0x009E
     be4:	d0 91 9f 00 	lds	r29, 0x009F


	*br = 0;
     be8:	fa 01       	movw	r30, r20
     bea:	11 82       	std	Z+1, r1	; 0x01
     bec:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     bee:	20 97       	sbiw	r28, 0x00	; 0
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <pf_read+0x3a>
     bf2:	9d c0       	rjmp	.+314    	; 0xd2e <pf_read+0x174>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	80 ff       	sbrs	r24, 0
     bf8:	9c c0       	rjmp	.+312    	; 0xd32 <pf_read+0x178>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
     bfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bfc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bfe:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c00:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c02:	4e 89       	ldd	r20, Y+22	; 0x16
     c04:	5f 89       	ldd	r21, Y+23	; 0x17
     c06:	68 8d       	ldd	r22, Y+24	; 0x18
     c08:	79 8d       	ldd	r23, Y+25	; 0x19
     c0a:	84 1b       	sub	r24, r20
     c0c:	95 0b       	sbc	r25, r21
     c0e:	a6 0b       	sbc	r26, r22
     c10:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
     c12:	a6 01       	movw	r20, r12
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	84 17       	cp	r24, r20
     c1a:	95 07       	cpc	r25, r21
     c1c:	a6 07       	cpc	r26, r22
     c1e:	b7 07       	cpc	r27, r23
     c20:	08 f4       	brcc	.+2      	; 0xc24 <pf_read+0x6a>
     c22:	6c 01       	movw	r12, r24
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
     c24:	34 01       	movw	r6, r8
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
     c26:	41 2c       	mov	r4, r1
     c28:	32 e0       	ldi	r19, 0x02	; 2
     c2a:	53 2e       	mov	r5, r19
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
     c2c:	c1 14       	cp	r12, r1
     c2e:	d1 04       	cpc	r13, r1
     c30:	09 f4       	brne	.+2      	; 0xc34 <pf_read+0x7a>
     c32:	78 c0       	rjmp	.+240    	; 0xd24 <pf_read+0x16a>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
     c34:	8e 89       	ldd	r24, Y+22	; 0x16
     c36:	9f 89       	ldd	r25, Y+23	; 0x17
     c38:	a8 8d       	ldd	r26, Y+24	; 0x18
     c3a:	b9 8d       	ldd	r27, Y+25	; 0x19
     c3c:	ac 01       	movw	r20, r24
     c3e:	bd 01       	movw	r22, r26
     c40:	51 70       	andi	r21, 0x01	; 1
     c42:	66 27       	eor	r22, r22
     c44:	77 27       	eor	r23, r23
     c46:	45 2b       	or	r20, r21
     c48:	46 2b       	or	r20, r22
     c4a:	47 2b       	or	r20, r23
     c4c:	c9 f5       	brne	.+114    	; 0xcc0 <pf_read+0x106>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
     c4e:	fa 80       	ldd	r15, Y+2	; 0x02
     c50:	fa 94       	dec	r15
     c52:	ac 01       	movw	r20, r24
     c54:	bd 01       	movw	r22, r26
     c56:	29 e0       	ldi	r18, 0x09	; 9
     c58:	76 95       	lsr	r23
     c5a:	67 95       	ror	r22
     c5c:	57 95       	ror	r21
     c5e:	47 95       	ror	r20
     c60:	2a 95       	dec	r18
     c62:	d1 f7       	brne	.-12     	; 0xc58 <pf_read+0x9e>
     c64:	f4 22       	and	r15, r20
			if (!cs) {								/* On the cluster boundary? */
     c66:	c1 f4       	brne	.+48     	; 0xc98 <pf_read+0xde>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
     c68:	89 2b       	or	r24, r25
     c6a:	8a 2b       	or	r24, r26
     c6c:	8b 2b       	or	r24, r27
     c6e:	29 f4       	brne	.+10     	; 0xc7a <pf_read+0xc0>
     c70:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c72:	7f 8d       	ldd	r23, Y+31	; 0x1f
     c74:	88 a1       	ldd	r24, Y+32	; 0x20
     c76:	99 a1       	ldd	r25, Y+33	; 0x21
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <pf_read+0xca>
     c7a:	6a a1       	ldd	r22, Y+34	; 0x22
     c7c:	7b a1       	ldd	r23, Y+35	; 0x23
     c7e:	8c a1       	ldd	r24, Y+36	; 0x24
     c80:	9d a1       	ldd	r25, Y+37	; 0x25
     c82:	b7 db       	rcall	.-2194   	; 0x3f2 <get_fat>
				if (clst <= 1) goto fr_abort;
     c84:	62 30       	cpi	r22, 0x02	; 2
     c86:	71 05       	cpc	r23, r1
     c88:	81 05       	cpc	r24, r1
     c8a:	91 05       	cpc	r25, r1
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <pf_read+0xd6>
     c8e:	4c c0       	rjmp	.+152    	; 0xd28 <pf_read+0x16e>
				fs->curr_clust = clst;				/* Update current cluster */
     c90:	6a a3       	std	Y+34, r22	; 0x22
     c92:	7b a3       	std	Y+35, r23	; 0x23
     c94:	8c a3       	std	Y+36, r24	; 0x24
     c96:	9d a3       	std	Y+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
     c98:	6a a1       	ldd	r22, Y+34	; 0x22
     c9a:	7b a1       	ldd	r23, Y+35	; 0x23
     c9c:	8c a1       	ldd	r24, Y+36	; 0x24
     c9e:	9d a1       	ldd	r25, Y+37	; 0x25
     ca0:	20 db       	rcall	.-2496   	; 0x2e2 <clust2sect>
			if (!sect) goto fr_abort;
     ca2:	61 15       	cp	r22, r1
     ca4:	71 05       	cpc	r23, r1
     ca6:	81 05       	cpc	r24, r1
     ca8:	91 05       	cpc	r25, r1
     caa:	f1 f1       	breq	.+124    	; 0xd28 <pf_read+0x16e>
			fs->dsect = sect + cs;
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	8f 0d       	add	r24, r15
     cb2:	91 1d       	adc	r25, r1
     cb4:	a1 1d       	adc	r26, r1
     cb6:	b1 1d       	adc	r27, r1
     cb8:	8e a3       	std	Y+38, r24	; 0x26
     cba:	9f a3       	std	Y+39, r25	; 0x27
     cbc:	a8 a7       	std	Y+40, r26	; 0x28
     cbe:	b9 a7       	std	Y+41, r27	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
     cc0:	2e 89       	ldd	r18, Y+22	; 0x16
     cc2:	3f 89       	ldd	r19, Y+23	; 0x17
     cc4:	31 70       	andi	r19, 0x01	; 1
     cc6:	c2 01       	movw	r24, r4
     cc8:	82 1b       	sub	r24, r18
     cca:	93 0b       	sbc	r25, r19
     ccc:	76 01       	movw	r14, r12
     cce:	8c 15       	cp	r24, r12
     cd0:	9d 05       	cpc	r25, r13
     cd2:	08 f4       	brcc	.+2      	; 0xcd6 <pf_read+0x11c>
     cd4:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
     cd6:	4e a1       	ldd	r20, Y+38	; 0x26
     cd8:	5f a1       	ldd	r21, Y+39	; 0x27
     cda:	68 a5       	ldd	r22, Y+40	; 0x28
     cdc:	79 a5       	ldd	r23, Y+41	; 0x29
     cde:	81 14       	cp	r8, r1
     ce0:	91 04       	cpc	r9, r1
     ce2:	11 f0       	breq	.+4      	; 0xce8 <pf_read+0x12e>
     ce4:	c3 01       	movw	r24, r6
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <pf_read+0x132>
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	87 01       	movw	r16, r14
     cee:	c3 da       	rcall	.-2682   	; 0x276 <disk_readp>
		if (dr) goto fr_abort;
     cf0:	81 11       	cpse	r24, r1
     cf2:	1a c0       	rjmp	.+52     	; 0xd28 <pf_read+0x16e>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
     cf4:	8e 89       	ldd	r24, Y+22	; 0x16
     cf6:	9f 89       	ldd	r25, Y+23	; 0x17
     cf8:	a8 8d       	ldd	r26, Y+24	; 0x18
     cfa:	b9 8d       	ldd	r27, Y+25	; 0x19
     cfc:	8e 0d       	add	r24, r14
     cfe:	9f 1d       	adc	r25, r15
     d00:	a1 1d       	adc	r26, r1
     d02:	b1 1d       	adc	r27, r1
     d04:	8e 8b       	std	Y+22, r24	; 0x16
     d06:	9f 8b       	std	Y+23, r25	; 0x17
     d08:	a8 8f       	std	Y+24, r26	; 0x18
     d0a:	b9 8f       	std	Y+25, r27	; 0x19
     d0c:	6e 0c       	add	r6, r14
     d0e:	7f 1c       	adc	r7, r15
		btr -= rcnt; *br += rcnt;
     d10:	ce 18       	sub	r12, r14
     d12:	df 08       	sbc	r13, r15
     d14:	f5 01       	movw	r30, r10
     d16:	80 81       	ld	r24, Z
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	e8 0e       	add	r14, r24
     d1c:	f9 1e       	adc	r15, r25
     d1e:	f1 82       	std	Z+1, r15	; 0x01
     d20:	e0 82       	st	Z, r14
     d22:	84 cf       	rjmp	.-248    	; 0xc2c <pf_read+0x72>
	}

	return FR_OK;
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <pf_read+0x17a>

fr_abort:
	fs->flag = 0;
     d28:	19 82       	std	Y+1, r1	; 0x01
	return FR_DISK_ERR;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	03 c0       	rjmp	.+6      	; 0xd34 <pf_read+0x17a>
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     d2e:	86 e0       	ldi	r24, 0x06	; 6
     d30:	01 c0       	rjmp	.+2      	; 0xd34 <pf_read+0x17a>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
     d32:	85 e0       	ldi	r24, 0x05	; 5
	return FR_OK;

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	8f 90       	pop	r8
     d4c:	7f 90       	pop	r7
     d4e:	6f 90       	pop	r6
     d50:	5f 90       	pop	r5
     d52:	4f 90       	pop	r4
     d54:	08 95       	ret

00000d56 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     d56:	4f 92       	push	r4
     d58:	5f 92       	push	r5
     d5a:	6f 92       	push	r6
     d5c:	7f 92       	push	r7
     d5e:	8f 92       	push	r8
     d60:	9f 92       	push	r9
     d62:	af 92       	push	r10
     d64:	bf 92       	push	r11
     d66:	cf 92       	push	r12
     d68:	df 92       	push	r13
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	00 d0       	rcall	.+0      	; 0xd78 <pf_lseek+0x22>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <pf_lseek+0x24>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	36 2f       	mov	r19, r22
     d80:	27 2f       	mov	r18, r23
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     d82:	00 91 9e 00 	lds	r16, 0x009E
     d86:	10 91 9f 00 	lds	r17, 0x009F


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     d8a:	01 15       	cp	r16, r1
     d8c:	11 05       	cpc	r17, r1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <pf_lseek+0x3c>
     d90:	e1 c0       	rjmp	.+450    	; 0xf54 <pf_lseek+0x1fe>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     d92:	d8 01       	movw	r26, r16
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	4c 91       	ld	r20, X
     d98:	11 97       	sbiw	r26, 0x01	; 1
     d9a:	40 ff       	sbrs	r20, 0
     d9c:	dd c0       	rjmp	.+442    	; 0xf58 <pf_lseek+0x202>
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
     d9e:	5a 96       	adiw	r26, 0x1a	; 26
     da0:	4d 91       	ld	r20, X+
     da2:	5d 91       	ld	r21, X+
     da4:	6d 91       	ld	r22, X+
     da6:	7c 91       	ld	r23, X
     da8:	5d 97       	sbiw	r26, 0x1d	; 29
     daa:	c3 2e       	mov	r12, r19
     dac:	d2 2e       	mov	r13, r18
     dae:	7c 01       	movw	r14, r24
     db0:	4c 15       	cp	r20, r12
     db2:	5d 05       	cpc	r21, r13
     db4:	6e 05       	cpc	r22, r14
     db6:	7f 05       	cpc	r23, r15
     db8:	10 f4       	brcc	.+4      	; 0xdbe <pf_lseek+0x68>
     dba:	6a 01       	movw	r12, r20
     dbc:	7b 01       	movw	r14, r22
	ifptr = fs->fptr;
     dbe:	f8 01       	movw	r30, r16
     dc0:	46 88       	ldd	r4, Z+22	; 0x16
     dc2:	57 88       	ldd	r5, Z+23	; 0x17
     dc4:	60 8c       	ldd	r6, Z+24	; 0x18
     dc6:	71 8c       	ldd	r7, Z+25	; 0x19
	fs->fptr = 0;
     dc8:	16 8a       	std	Z+22, r1	; 0x16
     dca:	17 8a       	std	Z+23, r1	; 0x17
     dcc:	10 8e       	std	Z+24, r1	; 0x18
     dce:	11 8e       	std	Z+25, r1	; 0x19
	if (ofs > 0) {
     dd0:	c1 14       	cp	r12, r1
     dd2:	d1 04       	cpc	r13, r1
     dd4:	e1 04       	cpc	r14, r1
     dd6:	f1 04       	cpc	r15, r1
     dd8:	09 f4       	brne	.+2      	; 0xddc <pf_lseek+0x86>
     dda:	c0 c0       	rjmp	.+384    	; 0xf5c <pf_lseek+0x206>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     ddc:	82 80       	ldd	r8, Z+2	; 0x02
     dde:	91 2c       	mov	r9, r1
     de0:	a1 2c       	mov	r10, r1
     de2:	b1 2c       	mov	r11, r1
     de4:	39 e0       	ldi	r19, 0x09	; 9
     de6:	88 0c       	add	r8, r8
     de8:	99 1c       	adc	r9, r9
     dea:	aa 1c       	adc	r10, r10
     dec:	bb 1c       	adc	r11, r11
     dee:	3a 95       	dec	r19
     df0:	d1 f7       	brne	.-12     	; 0xde6 <pf_lseek+0x90>
		if (ifptr > 0 &&
     df2:	41 14       	cp	r4, r1
     df4:	51 04       	cpc	r5, r1
     df6:	61 04       	cpc	r6, r1
     df8:	71 04       	cpc	r7, r1
     dfa:	e9 f1       	breq	.+122    	; 0xe76 <pf_lseek+0x120>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
     dfc:	b1 e0       	ldi	r27, 0x01	; 1
     dfe:	4b 1a       	sub	r4, r27
     e00:	51 08       	sbc	r5, r1
     e02:	61 08       	sbc	r6, r1
     e04:	71 08       	sbc	r7, r1
     e06:	c7 01       	movw	r24, r14
     e08:	b6 01       	movw	r22, r12
     e0a:	61 50       	subi	r22, 0x01	; 1
     e0c:	71 09       	sbc	r23, r1
     e0e:	81 09       	sbc	r24, r1
     e10:	91 09       	sbc	r25, r1
     e12:	a5 01       	movw	r20, r10
     e14:	94 01       	movw	r18, r8
     e16:	a0 d4       	rcall	.+2368   	; 0x1758 <__udivmodsi4>
     e18:	29 83       	std	Y+1, r18	; 0x01
     e1a:	3a 83       	std	Y+2, r19	; 0x02
     e1c:	4b 83       	std	Y+3, r20	; 0x03
     e1e:	5c 83       	std	Y+4, r21	; 0x04
     e20:	c3 01       	movw	r24, r6
     e22:	b2 01       	movw	r22, r4
     e24:	a5 01       	movw	r20, r10
     e26:	94 01       	movw	r18, r8
     e28:	97 d4       	rcall	.+2350   	; 0x1758 <__udivmodsi4>
	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
	if (ofs > 0) {
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
		if (ifptr > 0 &&
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	9a 81       	ldd	r25, Y+2	; 0x02
     e2e:	ab 81       	ldd	r26, Y+3	; 0x03
     e30:	bc 81       	ldd	r27, Y+4	; 0x04
     e32:	82 17       	cp	r24, r18
     e34:	93 07       	cpc	r25, r19
     e36:	a4 07       	cpc	r26, r20
     e38:	b5 07       	cpc	r27, r21
     e3a:	e8 f0       	brcs	.+58     	; 0xe76 <pf_lseek+0x120>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     e3c:	88 27       	eor	r24, r24
     e3e:	99 27       	eor	r25, r25
     e40:	dc 01       	movw	r26, r24
     e42:	88 19       	sub	r24, r8
     e44:	99 09       	sbc	r25, r9
     e46:	aa 09       	sbc	r26, r10
     e48:	bb 09       	sbc	r27, r11
     e4a:	48 22       	and	r4, r24
     e4c:	59 22       	and	r5, r25
     e4e:	6a 22       	and	r6, r26
     e50:	7b 22       	and	r7, r27
     e52:	d8 01       	movw	r26, r16
     e54:	56 96       	adiw	r26, 0x16	; 22
     e56:	4d 92       	st	X+, r4
     e58:	5d 92       	st	X+, r5
     e5a:	6d 92       	st	X+, r6
     e5c:	7c 92       	st	X, r7
     e5e:	59 97       	sbiw	r26, 0x19	; 25
			ofs -= fs->fptr;
     e60:	c4 18       	sub	r12, r4
     e62:	d5 08       	sbc	r13, r5
     e64:	e6 08       	sbc	r14, r6
     e66:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
     e68:	92 96       	adiw	r26, 0x22	; 34
     e6a:	6d 91       	ld	r22, X+
     e6c:	7d 91       	ld	r23, X+
     e6e:	8d 91       	ld	r24, X+
     e70:	9c 91       	ld	r25, X
     e72:	95 97       	sbiw	r26, 0x25	; 37
     e74:	30 c0       	rjmp	.+96     	; 0xed6 <pf_lseek+0x180>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     e76:	f8 01       	movw	r30, r16
     e78:	66 8d       	ldd	r22, Z+30	; 0x1e
     e7a:	77 8d       	ldd	r23, Z+31	; 0x1f
     e7c:	80 a1       	ldd	r24, Z+32	; 0x20
     e7e:	91 a1       	ldd	r25, Z+33	; 0x21
			fs->curr_clust = clst;
     e80:	62 a3       	std	Z+34, r22	; 0x22
     e82:	73 a3       	std	Z+35, r23	; 0x23
     e84:	84 a3       	std	Z+36, r24	; 0x24
     e86:	95 a3       	std	Z+37, r25	; 0x25
     e88:	26 c0       	rjmp	.+76     	; 0xed6 <pf_lseek+0x180>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     e8a:	b3 da       	rcall	.-2714   	; 0x3f2 <get_fat>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
     e8c:	62 30       	cpi	r22, 0x02	; 2
     e8e:	71 05       	cpc	r23, r1
     e90:	81 05       	cpc	r24, r1
     e92:	91 05       	cpc	r25, r1
     e94:	08 f4       	brcc	.+2      	; 0xe98 <pf_lseek+0x142>
     e96:	59 c0       	rjmp	.+178    	; 0xf4a <pf_lseek+0x1f4>
     e98:	f8 01       	movw	r30, r16
     e9a:	46 80       	ldd	r4, Z+6	; 0x06
     e9c:	57 80       	ldd	r5, Z+7	; 0x07
     e9e:	60 84       	ldd	r6, Z+8	; 0x08
     ea0:	71 84       	ldd	r7, Z+9	; 0x09
     ea2:	64 15       	cp	r22, r4
     ea4:	75 05       	cpc	r23, r5
     ea6:	86 05       	cpc	r24, r6
     ea8:	97 05       	cpc	r25, r7
     eaa:	08 f0       	brcs	.+2      	; 0xeae <pf_lseek+0x158>
     eac:	4e c0       	rjmp	.+156    	; 0xf4a <pf_lseek+0x1f4>
			fs->curr_clust = clst;
     eae:	62 a3       	std	Z+34, r22	; 0x22
     eb0:	73 a3       	std	Z+35, r23	; 0x23
     eb2:	84 a3       	std	Z+36, r24	; 0x24
     eb4:	95 a3       	std	Z+37, r25	; 0x25
			fs->fptr += bcs;
     eb6:	46 88       	ldd	r4, Z+22	; 0x16
     eb8:	57 88       	ldd	r5, Z+23	; 0x17
     eba:	60 8c       	ldd	r6, Z+24	; 0x18
     ebc:	71 8c       	ldd	r7, Z+25	; 0x19
     ebe:	48 0c       	add	r4, r8
     ec0:	59 1c       	adc	r5, r9
     ec2:	6a 1c       	adc	r6, r10
     ec4:	7b 1c       	adc	r7, r11
     ec6:	46 8a       	std	Z+22, r4	; 0x16
     ec8:	57 8a       	std	Z+23, r5	; 0x17
     eca:	60 8e       	std	Z+24, r6	; 0x18
     ecc:	71 8e       	std	Z+25, r7	; 0x19
			ofs -= bcs;
     ece:	c8 18       	sub	r12, r8
     ed0:	d9 08       	sbc	r13, r9
     ed2:	ea 08       	sbc	r14, r10
     ed4:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     ed6:	8c 14       	cp	r8, r12
     ed8:	9d 04       	cpc	r9, r13
     eda:	ae 04       	cpc	r10, r14
     edc:	bf 04       	cpc	r11, r15
     ede:	a8 f2       	brcs	.-86     	; 0xe8a <pf_lseek+0x134>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     ee0:	d8 01       	movw	r26, r16
     ee2:	56 96       	adiw	r26, 0x16	; 22
     ee4:	8d 90       	ld	r8, X+
     ee6:	9d 90       	ld	r9, X+
     ee8:	ad 90       	ld	r10, X+
     eea:	bc 90       	ld	r11, X
     eec:	59 97       	sbiw	r26, 0x19	; 25
     eee:	c8 0c       	add	r12, r8
     ef0:	d9 1c       	adc	r13, r9
     ef2:	ea 1c       	adc	r14, r10
     ef4:	fb 1c       	adc	r15, r11
     ef6:	f8 01       	movw	r30, r16
     ef8:	c6 8a       	std	Z+22, r12	; 0x16
     efa:	d7 8a       	std	Z+23, r13	; 0x17
     efc:	e0 8e       	std	Z+24, r14	; 0x18
     efe:	f1 8e       	std	Z+25, r15	; 0x19
		sect = clust2sect(clst);		/* Current sector */
     f00:	f0 d9       	rcall	.-3104   	; 0x2e2 <clust2sect>
		if (!sect) goto fe_abort;
     f02:	61 15       	cp	r22, r1
     f04:	71 05       	cpc	r23, r1
     f06:	81 05       	cpc	r24, r1
     f08:	91 05       	cpc	r25, r1
     f0a:	f9 f0       	breq	.+62     	; 0xf4a <pf_lseek+0x1f4>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
     f0c:	29 e0       	ldi	r18, 0x09	; 9
     f0e:	f6 94       	lsr	r15
     f10:	e7 94       	ror	r14
     f12:	d7 94       	ror	r13
     f14:	c7 94       	ror	r12
     f16:	2a 95       	dec	r18
     f18:	d1 f7       	brne	.-12     	; 0xf0e <pf_lseek+0x1b8>
     f1a:	d8 01       	movw	r26, r16
     f1c:	12 96       	adiw	r26, 0x02	; 2
     f1e:	2c 91       	ld	r18, X
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	21 50       	subi	r18, 0x01	; 1
     f24:	31 09       	sbc	r19, r1
     f26:	49 01       	movw	r8, r18
     f28:	33 0f       	add	r19, r19
     f2a:	aa 08       	sbc	r10, r10
     f2c:	bb 08       	sbc	r11, r11
     f2e:	c8 20       	and	r12, r8
     f30:	d9 20       	and	r13, r9
     f32:	ea 20       	and	r14, r10
     f34:	fb 20       	and	r15, r11
     f36:	c6 0e       	add	r12, r22
     f38:	d7 1e       	adc	r13, r23
     f3a:	e8 1e       	adc	r14, r24
     f3c:	f9 1e       	adc	r15, r25
     f3e:	f8 01       	movw	r30, r16
     f40:	c6 a2       	std	Z+38, r12	; 0x26
     f42:	d7 a2       	std	Z+39, r13	; 0x27
     f44:	e0 a6       	std	Z+40, r14	; 0x28
     f46:	f1 a6       	std	Z+41, r15	; 0x29
     f48:	09 c0       	rjmp	.+18     	; 0xf5c <pf_lseek+0x206>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     f4a:	d8 01       	movw	r26, r16
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	1c 92       	st	X, r1
	return FR_DISK_ERR;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <pf_lseek+0x208>
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     f54:	86 e0       	ldi	r24, 0x06	; 6
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <pf_lseek+0x208>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
			return FR_NOT_OPENED;
     f58:	85 e0       	ldi	r24, 0x05	; 5
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <pf_lseek+0x208>
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
     f5c:	80 e0       	ldi	r24, 0x00	; 0

fe_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	df 90       	pop	r13
     f74:	cf 90       	pop	r12
     f76:	bf 90       	pop	r11
     f78:	af 90       	pop	r10
     f7a:	9f 90       	pop	r9
     f7c:	8f 90       	pop	r8
     f7e:	7f 90       	pop	r7
     f80:	6f 90       	pop	r6
     f82:	5f 90       	pop	r5
     f84:	4f 90       	pop	r4
     f86:	08 95       	ret

00000f88 <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
     f94:	ac 97       	sbiw	r28, 0x2c	; 44
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	de bf       	out	0x3e, r29	; 62
     f9c:	0f be       	out	0x3f, r0	; 63
     f9e:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
     fa0:	20 91 9e 00 	lds	r18, 0x009E
     fa4:	30 91 9f 00 	lds	r19, 0x009F
     fa8:	23 2b       	or	r18, r19
     faa:	79 f1       	breq	.+94     	; 0x100a <pf_opendir+0x82>
     fac:	ab 01       	movw	r20, r22
     fae:	8c 01       	movw	r16, r24
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
     fb0:	ce 01       	movw	r24, r28
     fb2:	81 96       	adiw	r24, 0x21	; 33
     fb4:	f8 01       	movw	r30, r16
     fb6:	93 83       	std	Z+3, r25	; 0x03
     fb8:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
     fba:	be 01       	movw	r22, r28
     fbc:	6f 5f       	subi	r22, 0xFF	; 255
     fbe:	7f 4f       	sbci	r23, 0xFF	; 255
     fc0:	c8 01       	movw	r24, r16
     fc2:	a3 db       	rcall	.-2234   	; 0x70a <follow_path>
		if (res == FR_OK) {						/* Follow completed */
     fc4:	81 11       	cpse	r24, r1
     fc6:	1e c0       	rjmp	.+60     	; 0x1004 <pf_opendir+0x7c>
			if (dir[0]) {						/* It is not the root dir */
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	88 23       	and	r24, r24
     fcc:	c9 f0       	breq	.+50     	; 0x1000 <pf_opendir+0x78>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
     fce:	8c 85       	ldd	r24, Y+12	; 0x0c
     fd0:	84 fd       	sbrc	r24, 4
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <pf_opendir+0x50>
					dj->sclust = LD_CLUST(dir);
				else							/* The object is not a directory */
					res = FR_NO_PATH;
     fd4:	84 e0       	ldi	r24, 0x04	; 4
     fd6:	1a c0       	rjmp	.+52     	; 0x100c <pf_opendir+0x84>
		dj->fn = sp;
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
		if (res == FR_OK) {						/* Follow completed */
			if (dir[0]) {						/* It is not the root dir */
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
					dj->sclust = LD_CLUST(dir);
     fd8:	8d 89       	ldd	r24, Y+21	; 0x15
     fda:	9e 89       	ldd	r25, Y+22	; 0x16
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	dc 01       	movw	r26, r24
     fe2:	99 27       	eor	r25, r25
     fe4:	88 27       	eor	r24, r24
     fe6:	4b 8d       	ldd	r20, Y+27	; 0x1b
     fe8:	5c 8d       	ldd	r21, Y+28	; 0x1c
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	84 2b       	or	r24, r20
     ff0:	95 2b       	or	r25, r21
     ff2:	a6 2b       	or	r26, r22
     ff4:	b7 2b       	or	r27, r23
     ff6:	f8 01       	movw	r30, r16
     ff8:	84 83       	std	Z+4, r24	; 0x04
     ffa:	95 83       	std	Z+5, r25	; 0x05
     ffc:	a6 83       	std	Z+6, r26	; 0x06
     ffe:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    1000:	c8 01       	movw	r24, r16
    1002:	af d9       	rcall	.-3234   	; 0x362 <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    1004:	83 30       	cpi	r24, 0x03	; 3
    1006:	11 f4       	brne	.+4      	; 0x100c <pf_opendir+0x84>
    1008:	e5 cf       	rjmp	.-54     	; 0xfd4 <pf_opendir+0x4c>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
    100a:	86 e0       	ldi	r24, 0x06	; 6
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	return res;
}
    100c:	ac 96       	adiw	r28, 0x2c	; 44
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	0f 91       	pop	r16
    1020:	08 95       	ret

00001022 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	ac 97       	sbiw	r28, 0x2c	; 44
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    1042:	20 91 9e 00 	lds	r18, 0x009E
    1046:	30 91 9f 00 	lds	r19, 0x009F
    104a:	23 2b       	or	r18, r19
    104c:	09 f4       	brne	.+2      	; 0x1050 <pf_readdir+0x2e>
    104e:	b0 c0       	rjmp	.+352    	; 0x11b0 <pf_readdir+0x18e>
    1050:	6b 01       	movw	r12, r22
    1052:	7c 01       	movw	r14, r24
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    1054:	ce 01       	movw	r24, r28
    1056:	81 96       	adiw	r24, 0x21	; 33
    1058:	d7 01       	movw	r26, r14
    105a:	13 96       	adiw	r26, 0x03	; 3
    105c:	9c 93       	st	X, r25
    105e:	8e 93       	st	-X, r24
    1060:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
    1062:	67 2b       	or	r22, r23
    1064:	19 f4       	brne	.+6      	; 0x106c <pf_readdir+0x4a>
			res = dir_rewind(dj);
    1066:	c7 01       	movw	r24, r14
    1068:	7c d9       	rcall	.-3336   	; 0x362 <dir_rewind>
    106a:	af c0       	rjmp	.+350    	; 0x11ca <pf_readdir+0x1a8>
    106c:	93 e0       	ldi	r25, 0x03	; 3
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    106e:	d7 01       	movw	r26, r14
    1070:	1c 96       	adiw	r26, 0x0c	; 12
    1072:	4d 91       	ld	r20, X+
    1074:	5d 91       	ld	r21, X+
    1076:	6d 91       	ld	r22, X+
    1078:	7c 91       	ld	r23, X
    107a:	1f 97       	sbiw	r26, 0x0f	; 15
    107c:	41 15       	cp	r20, r1
    107e:	51 05       	cpc	r21, r1
    1080:	61 05       	cpc	r22, r1
    1082:	71 05       	cpc	r23, r1
    1084:	11 f1       	breq	.+68     	; 0x10ca <pf_readdir+0xa8>
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1086:	f7 01       	movw	r30, r14
    1088:	20 81       	ld	r18, Z
    108a:	31 81       	ldd	r19, Z+1	; 0x01
    108c:	2f 70       	andi	r18, 0x0F	; 15
    108e:	33 27       	eor	r19, r19
    1090:	85 e0       	ldi	r24, 0x05	; 5
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	8a 95       	dec	r24
    1098:	e1 f7       	brne	.-8      	; 0x1092 <pf_readdir+0x70>
    109a:	00 e2       	ldi	r16, 0x20	; 32
    109c:	10 e0       	ldi	r17, 0x00	; 0
    109e:	ce 01       	movw	r24, r28
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	e9 d8       	rcall	.-3630   	; 0x276 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    10a4:	81 11       	cpse	r24, r1
    10a6:	86 c0       	rjmp	.+268    	; 0x11b4 <pf_readdir+0x192>
		c = dir[DIR_Name];
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    10aa:	88 23       	and	r24, r24
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <pf_readdir+0x8e>
    10ae:	84 c0       	rjmp	.+264    	; 0x11b8 <pf_readdir+0x196>
		a = dir[DIR_Attr] & AM_MASK;
    10b0:	9c 85       	ldd	r25, Y+12	; 0x0c
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    10b2:	85 3e       	cpi	r24, 0xE5	; 229
    10b4:	21 f0       	breq	.+8      	; 0x10be <pf_readdir+0x9c>
    10b6:	8e 32       	cpi	r24, 0x2E	; 46
    10b8:	11 f0       	breq	.+4      	; 0x10be <pf_readdir+0x9c>
    10ba:	93 ff       	sbrs	r25, 3
    10bc:	11 c0       	rjmp	.+34     	; 0x10e0 <pf_readdir+0xbe>
			break;
		res = dir_next(dj);			/* Next entry */
    10be:	c7 01       	movw	r24, r14
    10c0:	6e da       	rcall	.-2852   	; 0x59e <dir_next>
    10c2:	98 2f       	mov	r25, r24
		if (res != FR_OK) break;
    10c4:	88 23       	and	r24, r24
    10c6:	99 f2       	breq	.-90     	; 0x106e <pf_readdir+0x4c>
    10c8:	78 c0       	rjmp	.+240    	; 0x11ba <pf_readdir+0x198>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    10ca:	89 2f       	mov	r24, r25
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    10cc:	99 23       	and	r25, r25
    10ce:	41 f0       	breq	.+16     	; 0x10e0 <pf_readdir+0xbe>
    10d0:	f7 01       	movw	r30, r14
    10d2:	14 86       	std	Z+12, r1	; 0x0c
    10d4:	15 86       	std	Z+13, r1	; 0x0d
    10d6:	16 86       	std	Z+14, r1	; 0x0e
    10d8:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    10da:	93 30       	cpi	r25, 0x03	; 3
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <pf_readdir+0xbe>
    10de:	6f c0       	rjmp	.+222    	; 0x11be <pf_readdir+0x19c>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    10e0:	86 01       	movw	r16, r12
    10e2:	07 5f       	subi	r16, 0xF7	; 247
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
    10e6:	d7 01       	movw	r26, r14
    10e8:	1c 96       	adiw	r26, 0x0c	; 12
    10ea:	4d 91       	ld	r20, X+
    10ec:	5d 91       	ld	r21, X+
    10ee:	6d 91       	ld	r22, X+
    10f0:	7c 91       	ld	r23, X
    10f2:	1f 97       	sbiw	r26, 0x0f	; 15
    10f4:	45 2b       	or	r20, r21
    10f6:	46 2b       	or	r20, r22
    10f8:	47 2b       	or	r20, r23
    10fa:	09 f4       	brne	.+2      	; 0x10fe <pf_readdir+0xdc>
    10fc:	4a c0       	rjmp	.+148    	; 0x1192 <pf_readdir+0x170>
    10fe:	9e 01       	movw	r18, r28
    1100:	2f 5f       	subi	r18, 0xFF	; 255
    1102:	3f 4f       	sbci	r19, 0xFF	; 255
    1104:	f6 01       	movw	r30, r12
    1106:	71 96       	adiw	r30, 0x11	; 17
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
    1108:	d9 01       	movw	r26, r18
    110a:	8d 91       	ld	r24, X+
    110c:	9d 01       	movw	r18, r26
			if (c == ' ') break;
    110e:	80 32       	cpi	r24, 0x20	; 32
    1110:	71 f0       	breq	.+28     	; 0x112e <pf_readdir+0x10c>
			if (c == 0x05) c = 0xE5;
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	09 f4       	brne	.+2      	; 0x1118 <pf_readdir+0xf6>
    1116:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    1118:	0f 5f       	subi	r16, 0xFF	; 255
    111a:	1f 4f       	sbci	r17, 0xFF	; 255
    111c:	a8 01       	movw	r20, r16
    111e:	41 50       	subi	r20, 0x01	; 1
    1120:	51 09       	sbc	r21, r1
    1122:	da 01       	movw	r26, r20
    1124:	8c 93       	st	X, r24
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    1126:	0e 17       	cp	r16, r30
    1128:	1f 07       	cpc	r17, r31
    112a:	71 f7       	brne	.-36     	; 0x1108 <pf_readdir+0xe6>
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <pf_readdir+0x10e>
			c = dir[i];
			if (c == ' ') break;
    112e:	f8 01       	movw	r30, r16
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    1130:	89 85       	ldd	r24, Y+9	; 0x09
    1132:	80 32       	cpi	r24, 0x20	; 32
    1134:	99 f0       	breq	.+38     	; 0x115c <pf_readdir+0x13a>
			*p++ = '.';
    1136:	9e e2       	ldi	r25, 0x2E	; 46
    1138:	90 83       	st	Z, r25
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
    113a:	9f 01       	movw	r18, r30
    113c:	2e 5f       	subi	r18, 0xFE	; 254
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	81 83       	std	Z+1, r24	; 0x01
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    1142:	8a 85       	ldd	r24, Y+10	; 0x0a
				if (c == ' ') break;
    1144:	80 32       	cpi	r24, 0x20	; 32
    1146:	31 f0       	breq	.+12     	; 0x1154 <pf_readdir+0x132>
				*p++ = c;
    1148:	2f 5f       	subi	r18, 0xFF	; 255
    114a:	3f 4f       	sbci	r19, 0xFF	; 255
    114c:	82 83       	std	Z+2, r24	; 0x02
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    114e:	8b 85       	ldd	r24, Y+11	; 0x0b
				if (c == ' ') break;
    1150:	80 32       	cpi	r24, 0x20	; 32
    1152:	11 f4       	brne	.+4      	; 0x1158 <pf_readdir+0x136>

	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
			if (c == ' ') break;
    1154:	f9 01       	movw	r30, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <pf_readdir+0x13a>
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
    1158:	83 83       	std	Z+3, r24	; 0x03
    115a:	34 96       	adiw	r30, 0x04	; 4
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    115c:	8c 85       	ldd	r24, Y+12	; 0x0c
    115e:	d6 01       	movw	r26, r12
    1160:	18 96       	adiw	r26, 0x08	; 8
    1162:	8c 93       	st	X, r24
    1164:	18 97       	sbiw	r26, 0x08	; 8
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    1166:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1168:	5e 8d       	ldd	r21, Y+30	; 0x1e
    116a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    116c:	78 a1       	ldd	r23, Y+32	; 0x20
    116e:	4d 93       	st	X+, r20
    1170:	5d 93       	st	X+, r21
    1172:	6d 93       	st	X+, r22
    1174:	7c 93       	st	X, r23
    1176:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1178:	89 8d       	ldd	r24, Y+25	; 0x19
    117a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    117c:	15 96       	adiw	r26, 0x05	; 5
    117e:	9c 93       	st	X, r25
    1180:	8e 93       	st	-X, r24
    1182:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1184:	8f 89       	ldd	r24, Y+23	; 0x17
    1186:	98 8d       	ldd	r25, Y+24	; 0x18
    1188:	17 96       	adiw	r26, 0x07	; 7
    118a:	9c 93       	st	X, r25
    118c:	8e 93       	st	-X, r24
    118e:	16 97       	sbiw	r26, 0x06	; 6
    1190:	8f 01       	movw	r16, r30
	}
	*p = 0;
    1192:	f8 01       	movw	r30, r16
    1194:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1196:	c7 01       	movw	r24, r14
    1198:	02 da       	rcall	.-3068   	; 0x59e <dir_next>
				if (res == FR_NO_FILE) {
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	b1 f4       	brne	.+44     	; 0x11ca <pf_readdir+0x1a8>
					dj->sect = 0;
    119e:	d7 01       	movw	r26, r14
    11a0:	1c 96       	adiw	r26, 0x0c	; 12
    11a2:	1d 92       	st	X+, r1
    11a4:	1d 92       	st	X+, r1
    11a6:	1d 92       	st	X+, r1
    11a8:	1c 92       	st	X, r1
    11aa:	1f 97       	sbiw	r26, 0x0f	; 15
					res = FR_OK;
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <pf_readdir+0x1a8>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
    11b0:	86 e0       	ldi	r24, 0x06	; 6
    11b2:	0b c0       	rjmp	.+22     	; 0x11ca <pf_readdir+0x1a8>

	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    11b4:	91 e0       	ldi	r25, 0x01	; 1
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <pf_readdir+0x198>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    11b8:	93 e0       	ldi	r25, 0x03	; 3
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    11ba:	89 2f       	mov	r24, r25
    11bc:	89 cf       	rjmp	.-238    	; 0x10d0 <pf_readdir+0xae>
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    11be:	91 11       	cpse	r25, r1
    11c0:	04 c0       	rjmp	.+8      	; 0x11ca <pf_readdir+0x1a8>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    11c2:	86 01       	movw	r16, r12
    11c4:	07 5f       	subi	r16, 0xF7	; 247
    11c6:	1f 4f       	sbci	r17, 0xFF	; 255
    11c8:	e4 cf       	rjmp	.-56     	; 0x1192 <pf_readdir+0x170>
			}
		}
	}

	return res;
}
    11ca:	ac 96       	adiw	r28, 0x2c	; 44
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	df 91       	pop	r29
    11d8:	cf 91       	pop	r28
    11da:	1f 91       	pop	r17
    11dc:	0f 91       	pop	r16
    11de:	ff 90       	pop	r15
    11e0:	ef 90       	pop	r14
    11e2:	df 90       	pop	r13
    11e4:	cf 90       	pop	r12
    11e6:	08 95       	ret

000011e8 <init_spi>:
    11e8:	88 e0       	ldi	r24, 0x08	; 8
    11ea:	8d b9       	out	0x0d, r24	; 13
    11ec:	c1 9a       	sbi	0x18, 1	; 24
    11ee:	c3 9a       	sbi	0x18, 3	; 24
    11f0:	08 95       	ret

000011f2 <select>:
    11f2:	08 95       	ret

000011f4 <deselect>:
    11f4:	08 95       	ret

000011f6 <rcv_spi>:
    11f6:	84 e0       	ldi	r24, 0x04	; 4
    11f8:	86 bb       	out	0x16, r24	; 22
    11fa:	86 bb       	out	0x16, r24	; 22
    11fc:	86 bb       	out	0x16, r24	; 22
    11fe:	86 bb       	out	0x16, r24	; 22
    1200:	86 bb       	out	0x16, r24	; 22
    1202:	86 bb       	out	0x16, r24	; 22
    1204:	86 bb       	out	0x16, r24	; 22
    1206:	86 bb       	out	0x16, r24	; 22
    1208:	86 bb       	out	0x16, r24	; 22
    120a:	86 bb       	out	0x16, r24	; 22
    120c:	86 bb       	out	0x16, r24	; 22
    120e:	86 bb       	out	0x16, r24	; 22
    1210:	86 bb       	out	0x16, r24	; 22
    1212:	86 bb       	out	0x16, r24	; 22
    1214:	86 bb       	out	0x16, r24	; 22
    1216:	86 bb       	out	0x16, r24	; 22
    1218:	00 00       	nop
    121a:	8f b1       	in	r24, 0x0f	; 15
    121c:	08 95       	ret

0000121e <xmit_spi>:
    121e:	94 e0       	ldi	r25, 0x04	; 4
    1220:	68 b3       	in	r22, 0x18	; 24
    1222:	78 e0       	ldi	r23, 0x08	; 8
    1224:	87 fb       	bst	r24, 7
    1226:	61 f9       	bld	r22, 1
    1228:	68 bb       	out	0x18, r22	; 24
    122a:	88 0f       	add	r24, r24
    122c:	96 bb       	out	0x16, r25	; 22
    122e:	96 bb       	out	0x16, r25	; 22
    1230:	7a 95       	dec	r23
    1232:	c1 f7       	brne	.-16     	; 0x1224 <xmit_spi+0x6>
    1234:	c1 9a       	sbi	0x18, 1	; 24
    1236:	08 95       	ret

00001238 <read_blk_part>:
    1238:	dc 01       	movw	r26, r24
    123a:	fb 01       	movw	r30, r22
    123c:	22 e0       	ldi	r18, 0x02	; 2
    123e:	32 e0       	ldi	r19, 0x02	; 2
    1240:	2e 1b       	sub	r18, r30
    1242:	3f 0b       	sbc	r19, r31
    1244:	24 1b       	sub	r18, r20
    1246:	35 0b       	sbc	r19, r21
    1248:	84 e0       	ldi	r24, 0x04	; 4
    124a:	31 97       	sbiw	r30, 0x01	; 1
    124c:	88 f0       	brcs	.+34     	; 0x1270 <read_blk_part+0x38>
    124e:	86 bb       	out	0x16, r24	; 22
    1250:	86 bb       	out	0x16, r24	; 22
    1252:	86 bb       	out	0x16, r24	; 22
    1254:	86 bb       	out	0x16, r24	; 22
    1256:	86 bb       	out	0x16, r24	; 22
    1258:	86 bb       	out	0x16, r24	; 22
    125a:	86 bb       	out	0x16, r24	; 22
    125c:	86 bb       	out	0x16, r24	; 22
    125e:	86 bb       	out	0x16, r24	; 22
    1260:	86 bb       	out	0x16, r24	; 22
    1262:	86 bb       	out	0x16, r24	; 22
    1264:	86 bb       	out	0x16, r24	; 22
    1266:	86 bb       	out	0x16, r24	; 22
    1268:	86 bb       	out	0x16, r24	; 22
    126a:	86 bb       	out	0x16, r24	; 22
    126c:	86 bb       	out	0x16, r24	; 22
    126e:	ed cf       	rjmp	.-38     	; 0x124a <read_blk_part+0x12>
    1270:	10 97       	sbiw	r26, 0x00	; 0
    1272:	31 f0       	breq	.+12     	; 0x1280 <fb_wave>

00001274 <fb_mem>:
    1274:	c0 df       	rcall	.-128    	; 0x11f6 <rcv_spi>
    1276:	8d 93       	st	X+, r24
    1278:	41 50       	subi	r20, 0x01	; 1
    127a:	50 40       	sbci	r21, 0x00	; 0
    127c:	d9 f7       	brne	.-10     	; 0x1274 <fb_mem>
    127e:	2f c0       	rjmp	.+94     	; 0x12de <fb_exit>

00001280 <fb_wave>:
    1280:	8c 99       	sbic	0x11, 4	; 17
    1282:	56 95       	lsr	r21
    1284:	8c 99       	sbic	0x11, 4	; 17
    1286:	47 95       	ror	r20
    1288:	89 99       	sbic	0x11, 1	; 17
    128a:	56 95       	lsr	r21
    128c:	89 99       	sbic	0x11, 1	; 17
    128e:	47 95       	ror	r20
    1290:	60 91 a0 00 	lds	r22, 0x00A0
    1294:	ac ec       	ldi	r26, 0xCC	; 204
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	a6 0f       	add	r26, r22
    129a:	b1 1d       	adc	r27, r1
    129c:	80 91 dc 01 	lds	r24, 0x01DC
    12a0:	8c 3f       	cpi	r24, 0xFC	; 252
    12a2:	e0 f7       	brcc	.-8      	; 0x129c <fb_wave+0x1c>
    12a4:	8c 99       	sbic	0x11, 4	; 17
    12a6:	a7 df       	rcall	.-178    	; 0x11f6 <rcv_spi>
    12a8:	a6 df       	rcall	.-180    	; 0x11f6 <rcv_spi>
    12aa:	8c 99       	sbic	0x11, 4	; 17
    12ac:	80 58       	subi	r24, 0x80	; 128
    12ae:	e8 2f       	mov	r30, r24
    12b0:	89 9b       	sbis	0x11, 1	; 17
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <fb_wave+0x42>
    12b4:	8c 99       	sbic	0x11, 4	; 17
    12b6:	9f df       	rcall	.-194    	; 0x11f6 <rcv_spi>
    12b8:	9e df       	rcall	.-196    	; 0x11f6 <rcv_spi>
    12ba:	8c 99       	sbic	0x11, 4	; 17
    12bc:	80 58       	subi	r24, 0x80	; 128
    12be:	e8 0f       	add	r30, r24
    12c0:	e7 95       	ror	r30
    12c2:	ed 93       	st	X+, r30
    12c4:	f8 94       	cli
    12c6:	80 91 dc 01 	lds	r24, 0x01DC
    12ca:	83 95       	inc	r24
    12cc:	80 93 dc 01 	sts	0x01DC, r24
    12d0:	78 94       	sei
    12d2:	63 95       	inc	r22
    12d4:	41 50       	subi	r20, 0x01	; 1
    12d6:	50 40       	sbci	r21, 0x00	; 0
    12d8:	e9 f6       	brne	.-70     	; 0x1294 <fb_wave+0x14>
    12da:	60 93 a0 00 	sts	0x00A0, r22

000012de <fb_exit>:
    12de:	84 e0       	ldi	r24, 0x04	; 4
    12e0:	86 bb       	out	0x16, r24	; 22
    12e2:	86 bb       	out	0x16, r24	; 22
    12e4:	86 bb       	out	0x16, r24	; 22
    12e6:	86 bb       	out	0x16, r24	; 22
    12e8:	86 bb       	out	0x16, r24	; 22
    12ea:	86 bb       	out	0x16, r24	; 22
    12ec:	86 bb       	out	0x16, r24	; 22
    12ee:	86 bb       	out	0x16, r24	; 22
    12f0:	86 bb       	out	0x16, r24	; 22
    12f2:	86 bb       	out	0x16, r24	; 22
    12f4:	86 bb       	out	0x16, r24	; 22
    12f6:	86 bb       	out	0x16, r24	; 22
    12f8:	86 bb       	out	0x16, r24	; 22
    12fa:	86 bb       	out	0x16, r24	; 22
    12fc:	86 bb       	out	0x16, r24	; 22
    12fe:	86 bb       	out	0x16, r24	; 22
    1300:	21 50       	subi	r18, 0x01	; 1
    1302:	30 40       	sbci	r19, 0x00	; 0
    1304:	69 f7       	brne	.-38     	; 0x12e0 <fb_exit+0x2>
    1306:	08 95       	ret

00001308 <__vector_10>:
    1308:	8f 93       	push	r24
    130a:	8f b7       	in	r24, 0x3f	; 63
    130c:	8f 93       	push	r24
    130e:	ef 93       	push	r30
    1310:	ff 93       	push	r31
    1312:	e0 91 a2 00 	lds	r30, 0x00A2
    1316:	ff 27       	eor	r31, r31
    1318:	e4 53       	subi	r30, 0x34	; 52
    131a:	ff 4f       	sbci	r31, 0xFF	; 255
    131c:	80 91 dc 01 	lds	r24, 0x01DC
    1320:	81 50       	subi	r24, 0x01	; 1
    1322:	38 f0       	brcs	.+14     	; 0x1332 <__vector_10+0x2a>
    1324:	80 93 dc 01 	sts	0x01DC, r24
    1328:	81 91       	ld	r24, Z+
    132a:	8b bd       	out	0x2b, r24	; 43
    132c:	ec 5c       	subi	r30, 0xCC	; 204
    132e:	e0 93 a2 00 	sts	0x00A2, r30
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	8f 91       	pop	r24
    1338:	8f bf       	out	0x3f, r24	; 63
    133a:	8f 91       	pop	r24
    133c:	18 95       	reti

0000133e <main>:

/*-----------------------------------------------------------------------*/
/* Main                                                                  */

int main (void)
{
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	1f 92       	push	r1
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
	FRESULT res;
	char *dir;
	BYTE org_osc = OSCCAL;
    1348:	11 b7       	in	r17, 0x31	; 49

	cli();
    134a:	f8 94       	cli
	MCUSR = 0;
    134c:	14 be       	out	0x34, r1	; 52
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    134e:	9f e0       	ldi	r25, 0x0F	; 15
    1350:	88 e1       	ldi	r24, 0x18	; 24
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	a8 95       	wdr
    1358:	81 bd       	out	0x21, r24	; 33
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	91 bd       	out	0x21, r25	; 33
	wdt_enable(WDTO_2S);

	PORTB = 0b101001;		/* Initialize port: - - H L H L L P */
    135e:	89 e2       	ldi	r24, 0x29	; 41
    1360:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0b111110 & ~(1 >> CS);
    1362:	8e e3       	ldi	r24, 0x3E	; 62
    1364:	87 bb       	out	0x17, r24	; 23
	
	SETUP_PIN_CHANGE;
    1366:	ab 9a       	sbi	0x15, 3	; 21
	ENABLE_PIN_INTR;
    1368:	9b b7       	in	r25, 0x3b	; 59
    136a:	90 62       	ori	r25, 0x20	; 32
    136c:	9b bf       	out	0x3b, r25	; 59
	
	while(PINB & (1 << CS)); //wait until main board is ready
    136e:	b3 99       	sbic	0x16, 3	; 22
    1370:	fe cf       	rjmp	.-4      	; 0x136e <main+0x30>
	
	sei();
    1372:	78 94       	sei
	
	//setup sdcard
	if(pf_mount(&Fs) == FR_OK){
    1374:	8d ed       	ldi	r24, 0xDD	; 221
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	49 83       	std	Y+1, r20	; 0x01
    137a:	bf da       	rcall	.-2690   	; 0x8fa <pf_mount>
    137c:	49 81       	ldd	r20, Y+1	; 0x01
    137e:	81 11       	cpse	r24, r1
    1380:	20 c0       	rjmp	.+64     	; 0x13c2 <main+0x84>
		Buff[0] = 0;
    1382:	10 92 cc 00 	sts	0x00CC, r1
		if (!pf_open("osccal")) pf_read(Buff, 1, &rb);	/* Adjust frequency */
    1386:	80 e9       	ldi	r24, 0x90	; 144
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	be db       	rcall	.-2180   	; 0xb08 <pf_open>
    138c:	81 11       	cpse	r24, r1
    138e:	07 c0       	rjmp	.+14     	; 0x139e <main+0x60>
    1390:	4a ec       	ldi	r20, 0xCA	; 202
    1392:	50 e0       	ldi	r21, 0x00	; 0
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	70 e0       	ldi	r23, 0x00	; 0
    1398:	8c ec       	ldi	r24, 0xCC	; 204
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e dc       	rcall	.-2020   	; 0xbba <pf_read>
		OSCCAL = org_osc + Buff[0];
    139e:	80 91 cc 00 	lds	r24, 0x00CC
    13a2:	81 0f       	add	r24, r17
    13a4:	81 bf       	out	0x31, r24	; 49

		res = pf_opendir(&Dir, dir = "sounds");	/* Open sound file directory */
    13a6:	67 e9       	ldi	r22, 0x97	; 151
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	8c ec       	ldi	r24, 0xCC	; 204
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	ec dd       	rcall	.-1064   	; 0xf88 <pf_opendir>
    13b0:	48 2f       	mov	r20, r24
		if (res == FR_NO_PATH)
    13b2:	84 30       	cpi	r24, 0x04	; 4
    13b4:	31 f4       	brne	.+12     	; 0x13c2 <main+0x84>
		res = pf_opendir(&Dir, dir = "");	/* Open root directory */
    13b6:	66 e9       	ldi	r22, 0x96	; 150
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	8c ec       	ldi	r24, 0xCC	; 204
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	e4 dd       	rcall	.-1080   	; 0xf88 <pf_opendir>
    13c0:	48 2f       	mov	r20, r24
	}
	else{
		//error out some how
	}
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);	//set power down mode
    13c2:	85 b7       	in	r24, 0x35	; 53
    13c4:	87 7e       	andi	r24, 0xE7	; 231
    13c6:	80 61       	ori	r24, 0x10	; 16
    13c8:	85 bf       	out	0x35, r24	; 53
    13ca:	80 e8       	ldi	r24, 0x80	; 128
    13cc:	38 2e       	mov	r3, r24
    13ce:	98 e1       	ldi	r25, 0x18	; 24
    13d0:	29 2e       	mov	r2, r25
    13d2:	2f e0       	ldi	r18, 0x0F	; 15
    13d4:	92 2e       	mov	r9, r18
		
		while (res == FR_OK) {				/* Play until find file */
			wdt_reset();
			res = pf_readdir(&Dir, &Fno);		/* Get a dir entry */
			if (res || !Fno.fname[0]) break;	/* Break on error or end of dir */
			if (!(Fno.fattrib & (AM_DIR|AM_HID)) && Fno.fname == fileName){ //check if equal to requested file name
    13d6:	0d eb       	ldi	r16, 0xBD	; 189
    13d8:	10 e0       	ldi	r17, 0x00	; 0
			if (b != 8 && b != 16) return 0;		/* Check resolution (8/16 bit) */
			GPIOR0 |= b;							/* Save resolution flag */
			if (b & 16) al <<= 1;
			f = LD_DWORD(&Buff[4]);					/* Check sampling freqency (8k-48k) */
			if (f < 8000 || f > 48000) return 4;
			OCR0A = (BYTE)(F_CPU / 8 / f) - 1;		/* Set sampling interval */
    13da:	30 e4       	ldi	r19, 0x40	; 64
    13dc:	43 2e       	mov	r4, r19
    13de:	32 e4       	ldi	r19, 0x42	; 66
    13e0:	53 2e       	mov	r5, r19
    13e2:	3f e0       	ldi	r19, 0x0F	; 15
    13e4:	63 2e       	mov	r6, r19
    13e6:	71 2c       	mov	r7, r1
			TCCR0B = 0b00000010;
			TIMSK = _BV(OCIE0A);
			ramp(1);
		}

		pf_read(0, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
    13e8:	a1 2c       	mov	r10, r1
    13ea:	52 e0       	ldi	r21, 0x02	; 2
    13ec:	b5 2e       	mov	r11, r21
	}
	
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);	//set power down mode
	
	for (;;) {
		TCCR0B = 0; TCCR0A = 0;	/* Stop TC0 */
    13ee:	13 be       	out	0x33, r1	; 51
    13f0:	1a bc       	out	0x2a, r1	; 42
		if (TCCR1) {	/* Stop TC1 if enabled */
    13f2:	80 b7       	in	r24, 0x30	; 48
    13f4:	88 23       	and	r24, r24
    13f6:	71 f0       	breq	.+28     	; 0x1414 <main+0xd6>
    13f8:	80 e8       	ldi	r24, 0x80	; 128
		v = 128; d = (BYTE)-1;
	}

	n = 128;
	do {
		v += d;
    13fa:	81 50       	subi	r24, 0x01	; 1
		OCR1A = v; OCR1B = v;
    13fc:	8e bd       	out	0x2e, r24	; 46
    13fe:	8b bd       	out	0x2b, r24	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1400:	e7 ec       	ldi	r30, 0xC7	; 199
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	31 97       	sbiw	r30, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <main+0xc6>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <main+0xcc>
    140a:	00 00       	nop
		delay_us(100);
	} while (--n);
    140c:	81 11       	cpse	r24, r1
    140e:	f5 cf       	rjmp	.-22     	; 0x13fa <main+0xbc>
	
	for (;;) {
		TCCR0B = 0; TCCR0A = 0;	/* Stop TC0 */
		if (TCCR1) {	/* Stop TC1 if enabled */
			ramp(0);
			TCCR1 = 0; GTCCR = 0;
    1410:	10 be       	out	0x30, r1	; 48
    1412:	1c bc       	out	0x2c, r1	; 44
void wdt_disable (void)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	a8 95       	wdr
    141a:	81 b5       	in	r24, 0x21	; 33
    141c:	88 61       	ori	r24, 0x18	; 24
    141e:	81 bd       	out	0x21, r24	; 33
    1420:	11 bc       	out	0x21, r1	; 33
    1422:	0f be       	out	0x3f, r0	; 63
		}
		wdt_disable();
		sleep_enable();
    1424:	85 b7       	in	r24, 0x35	; 53
    1426:	80 62       	ori	r24, 0x20	; 32
    1428:	85 bf       	out	0x35, r24	; 53
		while(!newFile) sleep_cpu(); //Sleep until interrupt changes filename
    142a:	80 91 b3 00 	lds	r24, 0x00B3
    142e:	81 11       	cpse	r24, r1
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <main+0xf8>
    1432:	88 95       	sleep
    1434:	fa cf       	rjmp	.-12     	; 0x142a <main+0xec>
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	a8 95       	wdr
    143c:	21 bc       	out	0x21, r2	; 33
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	91 bc       	out	0x21, r9	; 33
		wdt_enable(WDTO_2S);
		
		while (res == FR_OK) {				/* Play until find file */
    1442:	41 11       	cpse	r20, r1
    1444:	d4 cf       	rjmp	.-88     	; 0x13ee <main+0xb0>
			wdt_reset();
    1446:	a8 95       	wdr
			res = pf_readdir(&Dir, &Fno);		/* Get a dir entry */
    1448:	64 eb       	ldi	r22, 0xB4	; 180
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	8c ec       	ldi	r24, 0xCC	; 204
    144e:	91 e0       	ldi	r25, 0x01	; 1
    1450:	e8 dd       	rcall	.-1072   	; 0x1022 <pf_readdir>
    1452:	48 2f       	mov	r20, r24
			if (res || !Fno.fname[0]) break;	/* Break on error or end of dir */
    1454:	81 11       	cpse	r24, r1
    1456:	cb cf       	rjmp	.-106    	; 0x13ee <main+0xb0>
    1458:	80 91 bd 00 	lds	r24, 0x00BD
    145c:	88 23       	and	r24, r24
    145e:	09 f4       	brne	.+2      	; 0x1462 <main+0x124>
    1460:	c6 cf       	rjmp	.-116    	; 0x13ee <main+0xb0>
			if (!(Fno.fattrib & (AM_DIR|AM_HID)) && Fno.fname == fileName){ //check if equal to requested file name
    1462:	80 91 bc 00 	lds	r24, 0x00BC
    1466:	82 71       	andi	r24, 0x12	; 18
    1468:	71 f7       	brne	.-36     	; 0x1446 <main+0x108>
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	03 3a       	cpi	r16, 0xA3	; 163
    146e:	1f 07       	cpc	r17, r31
    1470:	51 f7       	brne	.-44     	; 0x1446 <main+0x108>
				newFile = false;
    1472:	10 92 b3 00 	sts	0x00B3, r1
	FRESULT res;
	BYTE sw;
	WORD btr;


	wdt_reset();
    1476:	a8 95       	wdr

	res = pf_open((char*)Buff);		/* Open sound file */
    1478:	8c ec       	ldi	r24, 0xCC	; 204
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	45 db       	rcall	.-2422   	; 0xb08 <pf_open>
    147e:	48 2f       	mov	r20, r24
	if (res == FR_OK) {
    1480:	81 11       	cpse	r24, r1
    1482:	61 c1       	rjmp	.+706    	; 0x1746 <main+0x408>
{
	DWORD sz, f;
	BYTE b, al = 0;


	if (pf_read(Buff, 12, &rb)) return 1;	/* Load file header (12 bytes) */
    1484:	4a ec       	ldi	r20, 0xCA	; 202
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	6c e0       	ldi	r22, 0x0C	; 12
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	8c ec       	ldi	r24, 0xCC	; 204
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	94 db       	rcall	.-2264   	; 0xbba <pf_read>
    1492:	81 11       	cpse	r24, r1
    1494:	5f c1       	rjmp	.+702    	; 0x1754 <main+0x416>

	if (rb != 12 || LD_DWORD(Buff+8) != FCC('W','A','V','E')) return 0;
    1496:	80 91 ca 00 	lds	r24, 0x00CA
    149a:	90 91 cb 00 	lds	r25, 0x00CB
    149e:	0c 97       	sbiw	r24, 0x0c	; 12
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <main+0x166>
    14a2:	58 c1       	rjmp	.+688    	; 0x1754 <main+0x416>
    14a4:	80 91 d4 00 	lds	r24, 0x00D4
    14a8:	90 91 d5 00 	lds	r25, 0x00D5
    14ac:	a0 91 d6 00 	lds	r26, 0x00D6
    14b0:	b0 91 d7 00 	lds	r27, 0x00D7
    14b4:	87 35       	cpi	r24, 0x57	; 87
    14b6:	91 44       	sbci	r25, 0x41	; 65
    14b8:	a6 45       	sbci	r26, 0x56	; 86
    14ba:	b5 44       	sbci	r27, 0x45	; 69
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <main+0x182>
    14be:	4a c1       	rjmp	.+660    	; 0x1754 <main+0x416>
    14c0:	81 2c       	mov	r8, r1

	for (;;) {
		wdt_reset();
    14c2:	a8 95       	wdr
		pf_read(Buff, 8, &rb);			/* Get Chunk ID and size */
    14c4:	4a ec       	ldi	r20, 0xCA	; 202
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	68 e0       	ldi	r22, 0x08	; 8
    14ca:	70 e0       	ldi	r23, 0x00	; 0
    14cc:	8c ec       	ldi	r24, 0xCC	; 204
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	74 db       	rcall	.-2328   	; 0xbba <pf_read>
		if (rb != 8) return 0;
    14d2:	80 91 ca 00 	lds	r24, 0x00CA
    14d6:	90 91 cb 00 	lds	r25, 0x00CB
    14da:	08 97       	sbiw	r24, 0x08	; 8
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <main+0x1a2>
    14de:	3a c1       	rjmp	.+628    	; 0x1754 <main+0x416>
		sz = LD_DWORD(&Buff[4]);		/* Chunk size */
    14e0:	c0 90 d0 00 	lds	r12, 0x00D0
    14e4:	d0 90 d1 00 	lds	r13, 0x00D1
    14e8:	e0 90 d2 00 	lds	r14, 0x00D2
    14ec:	f0 90 d3 00 	lds	r15, 0x00D3

		switch (LD_DWORD(&Buff[0])) {	/* Switch by chunk ID */
    14f0:	80 91 cc 00 	lds	r24, 0x00CC
    14f4:	90 91 cd 00 	lds	r25, 0x00CD
    14f8:	a0 91 ce 00 	lds	r26, 0x00CE
    14fc:	b0 91 cf 00 	lds	r27, 0x00CF
    1500:	8c 34       	cpi	r24, 0x4C	; 76
    1502:	69 e4       	ldi	r22, 0x49	; 73
    1504:	96 07       	cpc	r25, r22
    1506:	63 e5       	ldi	r22, 0x53	; 83
    1508:	a6 07       	cpc	r26, r22
    150a:	64 e5       	ldi	r22, 0x54	; 84
    150c:	b6 07       	cpc	r27, r22
    150e:	09 f4       	brne	.+2      	; 0x1512 <main+0x1d4>
    1510:	c5 c0       	rjmp	.+394    	; 0x169c <main+0x35e>
    1512:	78 f4       	brcc	.+30     	; 0x1532 <main+0x1f4>
    1514:	86 36       	cpi	r24, 0x66	; 102
    1516:	fd e6       	ldi	r31, 0x6D	; 109
    1518:	9f 07       	cpc	r25, r31
    151a:	f4 e7       	ldi	r31, 0x74	; 116
    151c:	af 07       	cpc	r26, r31
    151e:	f0 e2       	ldi	r31, 0x20	; 32
    1520:	bf 07       	cpc	r27, r31
    1522:	b9 f0       	breq	.+46     	; 0x1552 <main+0x214>
    1524:	84 34       	cpi	r24, 0x44	; 68
    1526:	99 44       	sbci	r25, 0x49	; 73
    1528:	a3 45       	sbci	r26, 0x53	; 83
    152a:	b0 45       	sbci	r27, 0x50	; 80
    152c:	09 f0       	breq	.+2      	; 0x1530 <main+0x1f2>
    152e:	12 c1       	rjmp	.+548    	; 0x1754 <main+0x416>
    1530:	b5 c0       	rjmp	.+362    	; 0x169c <main+0x35e>
    1532:	84 36       	cpi	r24, 0x64	; 100
    1534:	61 e6       	ldi	r22, 0x61	; 97
    1536:	96 07       	cpc	r25, r22
    1538:	64 e7       	ldi	r22, 0x74	; 116
    153a:	a6 07       	cpc	r26, r22
    153c:	61 e6       	ldi	r22, 0x61	; 97
    153e:	b6 07       	cpc	r27, r22
    1540:	09 f4       	brne	.+2      	; 0x1544 <main+0x206>
    1542:	5e c0       	rjmp	.+188    	; 0x1600 <main+0x2c2>
    1544:	86 36       	cpi	r24, 0x66	; 102
    1546:	91 46       	sbci	r25, 0x61	; 97
    1548:	a3 46       	sbci	r26, 0x63	; 99
    154a:	b4 47       	sbci	r27, 0x74	; 116
    154c:	09 f0       	breq	.+2      	; 0x1550 <main+0x212>
    154e:	02 c1       	rjmp	.+516    	; 0x1754 <main+0x416>
    1550:	a5 c0       	rjmp	.+330    	; 0x169c <main+0x35e>
		case FCC('f','m','t',' ') :					/* 'fmt ' chunk */
			if (sz & 1) sz++;						/* Align chunk size */
    1552:	c0 fe       	sbrs	r12, 0
    1554:	05 c0       	rjmp	.+10     	; 0x1560 <main+0x222>
    1556:	ff ef       	ldi	r31, 0xFF	; 255
    1558:	cf 1a       	sub	r12, r31
    155a:	df 0a       	sbc	r13, r31
    155c:	ef 0a       	sbc	r14, r31
    155e:	ff 0a       	sbc	r15, r31
			if (sz > 100 || sz < 16) return 0;		/* Check chunk size */
    1560:	d7 01       	movw	r26, r14
    1562:	c6 01       	movw	r24, r12
    1564:	40 97       	sbiw	r24, 0x10	; 16
    1566:	a1 09       	sbc	r26, r1
    1568:	b1 09       	sbc	r27, r1
    156a:	85 35       	cpi	r24, 0x55	; 85
    156c:	91 05       	cpc	r25, r1
    156e:	a1 05       	cpc	r26, r1
    1570:	b1 05       	cpc	r27, r1
    1572:	08 f0       	brcs	.+2      	; 0x1576 <main+0x238>
    1574:	ef c0       	rjmp	.+478    	; 0x1754 <main+0x416>
			pf_read(Buff, sz, &rb);					/* Get content */
    1576:	4a ec       	ldi	r20, 0xCA	; 202
    1578:	50 e0       	ldi	r21, 0x00	; 0
    157a:	b6 01       	movw	r22, r12
    157c:	8c ec       	ldi	r24, 0xCC	; 204
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	1c db       	rcall	.-2504   	; 0xbba <pf_read>
			if (rb != sz) return 0;
    1582:	80 91 ca 00 	lds	r24, 0x00CA
    1586:	90 91 cb 00 	lds	r25, 0x00CB
    158a:	a0 e0       	ldi	r26, 0x00	; 0
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	8c 15       	cp	r24, r12
    1590:	9d 05       	cpc	r25, r13
    1592:	ae 05       	cpc	r26, r14
    1594:	bf 05       	cpc	r27, r15
    1596:	09 f0       	breq	.+2      	; 0x159a <main+0x25c>
    1598:	dd c0       	rjmp	.+442    	; 0x1754 <main+0x416>
			if (Buff[0] != 1) return 0;				/* Check coding type (LPCM) */
    159a:	80 91 cc 00 	lds	r24, 0x00CC
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	09 f0       	breq	.+2      	; 0x15a4 <main+0x266>
    15a2:	d8 c0       	rjmp	.+432    	; 0x1754 <main+0x416>
			b = Buff[2];
    15a4:	80 90 ce 00 	lds	r8, 0x00CE
			if (b != 1 && b != 2) return 0;			/* Check channels (1/2) */
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	88 0d       	add	r24, r8
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <main+0x274>
    15b0:	d1 c0       	rjmp	.+418    	; 0x1754 <main+0x416>
			GPIOR0 = al = b;						/* Save channel flag */
    15b2:	81 ba       	out	0x11, r8	; 17
			b = Buff[14];
    15b4:	80 91 da 00 	lds	r24, 0x00DA
			if (b != 8 && b != 16) return 0;		/* Check resolution (8/16 bit) */
    15b8:	88 30       	cpi	r24, 0x08	; 8
    15ba:	19 f0       	breq	.+6      	; 0x15c2 <main+0x284>
    15bc:	80 31       	cpi	r24, 0x10	; 16
    15be:	09 f0       	breq	.+2      	; 0x15c2 <main+0x284>
    15c0:	c9 c0       	rjmp	.+402    	; 0x1754 <main+0x416>
			GPIOR0 |= b;							/* Save resolution flag */
    15c2:	91 b3       	in	r25, 0x11	; 17
    15c4:	98 2b       	or	r25, r24
    15c6:	91 bb       	out	0x11, r25	; 17
			if (b & 16) al <<= 1;
    15c8:	84 fd       	sbrc	r24, 4
    15ca:	88 0c       	add	r8, r8
			f = LD_DWORD(&Buff[4]);					/* Check sampling freqency (8k-48k) */
    15cc:	20 91 d0 00 	lds	r18, 0x00D0
    15d0:	30 91 d1 00 	lds	r19, 0x00D1
    15d4:	40 91 d2 00 	lds	r20, 0x00D2
    15d8:	50 91 d3 00 	lds	r21, 0x00D3
			if (f < 8000 || f > 48000) return 4;
    15dc:	da 01       	movw	r26, r20
    15de:	c9 01       	movw	r24, r18
    15e0:	80 54       	subi	r24, 0x40	; 64
    15e2:	9f 41       	sbci	r25, 0x1F	; 31
    15e4:	a1 09       	sbc	r26, r1
    15e6:	b1 09       	sbc	r27, r1
    15e8:	81 34       	cpi	r24, 0x41	; 65
    15ea:	9c 49       	sbci	r25, 0x9C	; 156
    15ec:	a1 05       	cpc	r26, r1
    15ee:	b1 05       	cpc	r27, r1
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <main+0x2b6>
    15f2:	b0 c0       	rjmp	.+352    	; 0x1754 <main+0x416>
			OCR0A = (BYTE)(F_CPU / 8 / f) - 1;		/* Set sampling interval */
    15f4:	c3 01       	movw	r24, r6
    15f6:	b2 01       	movw	r22, r4
    15f8:	af d0       	rcall	.+350    	; 0x1758 <__udivmodsi4>
    15fa:	21 50       	subi	r18, 0x01	; 1
    15fc:	29 bd       	out	0x29, r18	; 41
    15fe:	61 cf       	rjmp	.-318    	; 0x14c2 <main+0x184>
			break;

		case FCC('d','a','t','a') :		/* 'data' chunk */
			if (!al) return 0;							/* Check if format is valid */
    1600:	88 20       	and	r8, r8
    1602:	09 f4       	brne	.+2      	; 0x1606 <main+0x2c8>
    1604:	a7 c0       	rjmp	.+334    	; 0x1754 <main+0x416>
			if (sz < 1024 || (sz & (al - 1))) return 0;	/* Check size */
    1606:	c1 14       	cp	r12, r1
    1608:	84 e0       	ldi	r24, 0x04	; 4
    160a:	d8 06       	cpc	r13, r24
    160c:	e1 04       	cpc	r14, r1
    160e:	f1 04       	cpc	r15, r1
    1610:	08 f4       	brcc	.+2      	; 0x1614 <main+0x2d6>
    1612:	a0 c0       	rjmp	.+320    	; 0x1754 <main+0x416>
    1614:	88 2d       	mov	r24, r8
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	01 97       	sbiw	r24, 0x01	; 1
    161a:	09 2e       	mov	r0, r25
    161c:	00 0c       	add	r0, r0
    161e:	aa 0b       	sbc	r26, r26
    1620:	bb 0b       	sbc	r27, r27
    1622:	ac 01       	movw	r20, r24
    1624:	bd 01       	movw	r22, r26
    1626:	4c 21       	and	r20, r12
    1628:	5d 21       	and	r21, r13
    162a:	6e 21       	and	r22, r14
    162c:	7f 21       	and	r23, r15
    162e:	45 2b       	or	r20, r21
    1630:	46 2b       	or	r20, r22
    1632:	47 2b       	or	r20, r23
    1634:	09 f0       	breq	.+2      	; 0x1638 <main+0x2fa>
    1636:	8e c0       	rjmp	.+284    	; 0x1754 <main+0x416>
			if (Fs.fptr & (al - 1)) return 0;			/* Check word alignment */
    1638:	40 91 f3 01 	lds	r20, 0x01F3
    163c:	50 91 f4 01 	lds	r21, 0x01F4
    1640:	60 91 f5 01 	lds	r22, 0x01F5
    1644:	70 91 f6 01 	lds	r23, 0x01F6
    1648:	84 23       	and	r24, r20
    164a:	95 23       	and	r25, r21
    164c:	a6 23       	and	r26, r22
    164e:	b7 23       	and	r27, r23
    1650:	89 2b       	or	r24, r25
    1652:	8a 2b       	or	r24, r26
    1654:	8b 2b       	or	r24, r27
    1656:	09 f0       	breq	.+2      	; 0x165a <main+0x31c>
    1658:	7d c0       	rjmp	.+250    	; 0x1754 <main+0x416>
	res = pf_open((char*)Buff);		/* Open sound file */
	if (res == FR_OK) {
		sz = load_header();			/* Check file format and ready to play */
		if (sz < 1024) return 255;	/* Cannot play this file */

		FifoCt = 0; FifoRi = 0; FifoWi = 0;	/* Reset audio FIFO */
    165a:	10 92 dc 01 	sts	0x01DC, r1
    165e:	10 92 a2 00 	sts	0x00A2, r1
    1662:	10 92 a0 00 	sts	0x00A0, r1

		if (!TCCR1) {				/* Enable audio out if not enabled */
    1666:	80 b7       	in	r24, 0x30	; 48
    1668:	88 23       	and	r24, r24
    166a:	79 f1       	breq	.+94     	; 0x16ca <main+0x38c>
			TCCR0B = 0b00000010;
			TIMSK = _BV(OCIE0A);
			ramp(1);
		}

		pf_read(0, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
    166c:	80 91 f3 01 	lds	r24, 0x01F3
    1670:	90 91 f4 01 	lds	r25, 0x01F4
    1674:	91 70       	andi	r25, 0x01	; 1
    1676:	b5 01       	movw	r22, r10
    1678:	68 1b       	sub	r22, r24
    167a:	79 0b       	sbc	r23, r25
    167c:	4a ec       	ldi	r20, 0xCA	; 202
    167e:	50 e0       	ldi	r21, 0x00	; 0
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9a da       	rcall	.-2764   	; 0xbba <pf_read>
		sz -= rb;
    1686:	80 91 ca 00 	lds	r24, 0x00CA
    168a:	90 91 cb 00 	lds	r25, 0x00CB
    168e:	c8 1a       	sub	r12, r24
    1690:	d9 0a       	sbc	r13, r25
    1692:	e1 08       	sbc	r14, r1
    1694:	f1 08       	sbc	r15, r1
		sw = 1;	/* Button status flag */
    1696:	88 24       	eor	r8, r8
    1698:	83 94       	inc	r8
    169a:	47 c0       	rjmp	.+142    	; 0x172a <main+0x3ec>
			return sz;									/* Start to play */

		case FCC('D','I','S','P') :		/* 'DISP' chunk */
		case FCC('L','I','S','T') :		/* 'LIST' chunk */
		case FCC('f','a','c','t') :		/* 'fact' chunk */
			if (sz & 1) sz++;				/* Align chunk size */
    169c:	c0 fe       	sbrs	r12, 0
    169e:	05 c0       	rjmp	.+10     	; 0x16aa <main+0x36c>
    16a0:	ef ef       	ldi	r30, 0xFF	; 255
    16a2:	ce 1a       	sub	r12, r30
    16a4:	de 0a       	sbc	r13, r30
    16a6:	ee 0a       	sbc	r14, r30
    16a8:	fe 0a       	sbc	r15, r30
			pf_lseek(Fs.fptr + sz);			/* Skip this chunk */
    16aa:	80 91 f3 01 	lds	r24, 0x01F3
    16ae:	90 91 f4 01 	lds	r25, 0x01F4
    16b2:	a0 91 f5 01 	lds	r26, 0x01F5
    16b6:	b0 91 f6 01 	lds	r27, 0x01F6
    16ba:	bc 01       	movw	r22, r24
    16bc:	cd 01       	movw	r24, r26
    16be:	6c 0d       	add	r22, r12
    16c0:	7d 1d       	adc	r23, r13
    16c2:	8e 1d       	adc	r24, r14
    16c4:	9f 1d       	adc	r25, r15
    16c6:	47 db       	rcall	.-2418   	; 0xd56 <pf_lseek>
    16c8:	fc ce       	rjmp	.-520    	; 0x14c2 <main+0x184>
		if (sz < 1024) return 255;	/* Cannot play this file */

		FifoCt = 0; FifoRi = 0; FifoWi = 0;	/* Reset audio FIFO */

		if (!TCCR1) {				/* Enable audio out if not enabled */
			PLLCSR = 0b00000110;	/* Select PLL clock for TC1.ck */
    16ca:	86 e0       	ldi	r24, 0x06	; 6
    16cc:	87 bd       	out	0x27, r24	; 39
			GTCCR =  0b01100000;	/* Enable OC1B as PWM */
    16ce:	80 e6       	ldi	r24, 0x60	; 96
    16d0:	8c bd       	out	0x2c, r24	; 44
			TCCR1 = MODE ? 0b01100001 : 0b00000001;	/* Start TC1 and enable OC1A as PWM if needed */
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	80 bf       	out	0x30, r24	; 48
			TCCR0A = 0b00000010;	/* Statr TC0 as interval timer at 2MHz */
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	8a bd       	out	0x2a, r24	; 42
			TCCR0B = 0b00000010;
    16da:	83 bf       	out	0x33, r24	; 51
			TIMSK = _BV(OCIE0A);
    16dc:	80 e1       	ldi	r24, 0x10	; 16
    16de:	89 bf       	out	0x39, r24	; 57
    16e0:	80 e0       	ldi	r24, 0x00	; 0
		v = 128; d = (BYTE)-1;
	}

	n = 128;
	do {
		v += d;
    16e2:	8f 5f       	subi	r24, 0xFF	; 255
		OCR1A = v; OCR1B = v;
    16e4:	8e bd       	out	0x2e, r24	; 46
    16e6:	8b bd       	out	0x2b, r24	; 43
    16e8:	e7 ec       	ldi	r30, 0xC7	; 199
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	31 97       	sbiw	r30, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <main+0x3ae>
    16f0:	00 c0       	rjmp	.+0      	; 0x16f2 <main+0x3b4>
    16f2:	00 00       	nop
		delay_us(100);
	} while (--n);
    16f4:	80 38       	cpi	r24, 0x80	; 128
    16f6:	a9 f7       	brne	.-22     	; 0x16e2 <main+0x3a4>
    16f8:	b9 cf       	rjmp	.-142    	; 0x166c <main+0x32e>
		sz -= rb;
		sw = 1;	/* Button status flag */
		do {	/* Data transfer loop */
			wdt_reset();

			btr = (sz > 1024) ? 1024 : (WORD)sz;/* A chunk of audio data */
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	74 e0       	ldi	r23, 0x04	; 4
			res = pf_read(0, btr, &rb);	/* Forward the data into audio FIFO */
    16fe:	4a ec       	ldi	r20, 0xCA	; 202
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	59 da       	rcall	.-2894   	; 0xbba <pf_read>
    1708:	48 2f       	mov	r20, r24
			if (rb != 1024) break;		/* Break on error or end of data */
    170a:	20 91 ca 00 	lds	r18, 0x00CA
    170e:	30 91 cb 00 	lds	r19, 0x00CB
    1712:	21 15       	cp	r18, r1
    1714:	34 40       	sbci	r19, 0x04	; 4
    1716:	b9 f4       	brne	.+46     	; 0x1746 <main+0x408>
			sz -= rb;					/* Decrease data counter */
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	d8 1a       	sub	r13, r24
    171c:	e1 08       	sbc	r14, r1
    171e:	f1 08       	sbc	r15, r1

			sw <<= 1;					/* Break on button down */
    1720:	88 0c       	add	r8, r8
		} while (!newFile || ++sw != 1); //break on filename change
    1722:	80 91 b3 00 	lds	r24, 0x00B3
    1726:	81 11       	cpse	r24, r1
    1728:	0a c0       	rjmp	.+20     	; 0x173e <main+0x400>

		pf_read(0, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
		sz -= rb;
		sw = 1;	/* Button status flag */
		do {	/* Data transfer loop */
			wdt_reset();
    172a:	a8 95       	wdr

			btr = (sz > 1024) ? 1024 : (WORD)sz;/* A chunk of audio data */
    172c:	f1 e0       	ldi	r31, 0x01	; 1
    172e:	cf 16       	cp	r12, r31
    1730:	f4 e0       	ldi	r31, 0x04	; 4
    1732:	df 06       	cpc	r13, r31
    1734:	e1 04       	cpc	r14, r1
    1736:	f1 04       	cpc	r15, r1
    1738:	00 f7       	brcc	.-64     	; 0x16fa <main+0x3bc>
    173a:	b6 01       	movw	r22, r12
    173c:	e0 cf       	rjmp	.-64     	; 0x16fe <main+0x3c0>
			res = pf_read(0, btr, &rb);	/* Forward the data into audio FIFO */
			if (rb != 1024) break;		/* Break on error or end of data */
			sz -= rb;					/* Decrease data counter */

			sw <<= 1;					/* Break on button down */
		} while (!newFile || ++sw != 1); //break on filename change
    173e:	83 94       	inc	r8
    1740:	e1 e0       	ldi	r30, 0x01	; 1
    1742:	8e 12       	cpse	r8, r30
    1744:	f2 cf       	rjmp	.-28     	; 0x172a <main+0x3ec>
	}

	while (FifoCt) ;			/* Wait for audio FIFO empty */
    1746:	80 91 dc 01 	lds	r24, 0x01DC
    174a:	81 11       	cpse	r24, r1
    174c:	fc cf       	rjmp	.-8      	; 0x1746 <main+0x408>
	OCR1A = 128; OCR1B = 128;	/* Return output to center level */
    174e:	3e bc       	out	0x2e, r3	; 46
    1750:	3b bc       	out	0x2b, r3	; 43
    1752:	4d ce       	rjmp	.-870    	; 0x13ee <main+0xb0>
	wdt_reset();

	res = pf_open((char*)Buff);		/* Open sound file */
	if (res == FR_OK) {
		sz = load_header();			/* Check file format and ready to play */
		if (sz < 1024) return 255;	/* Cannot play this file */
    1754:	4f ef       	ldi	r20, 0xFF	; 255
    1756:	4b ce       	rjmp	.-874    	; 0x13ee <main+0xb0>

00001758 <__udivmodsi4>:
    1758:	a1 e2       	ldi	r26, 0x21	; 33
    175a:	1a 2e       	mov	r1, r26
    175c:	aa 1b       	sub	r26, r26
    175e:	bb 1b       	sub	r27, r27
    1760:	fd 01       	movw	r30, r26
    1762:	0d c0       	rjmp	.+26     	; 0x177e <__udivmodsi4_ep>

00001764 <__udivmodsi4_loop>:
    1764:	aa 1f       	adc	r26, r26
    1766:	bb 1f       	adc	r27, r27
    1768:	ee 1f       	adc	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	a2 17       	cp	r26, r18
    176e:	b3 07       	cpc	r27, r19
    1770:	e4 07       	cpc	r30, r20
    1772:	f5 07       	cpc	r31, r21
    1774:	20 f0       	brcs	.+8      	; 0x177e <__udivmodsi4_ep>
    1776:	a2 1b       	sub	r26, r18
    1778:	b3 0b       	sbc	r27, r19
    177a:	e4 0b       	sbc	r30, r20
    177c:	f5 0b       	sbc	r31, r21

0000177e <__udivmodsi4_ep>:
    177e:	66 1f       	adc	r22, r22
    1780:	77 1f       	adc	r23, r23
    1782:	88 1f       	adc	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	1a 94       	dec	r1
    1788:	69 f7       	brne	.-38     	; 0x1764 <__udivmodsi4_loop>
    178a:	60 95       	com	r22
    178c:	70 95       	com	r23
    178e:	80 95       	com	r24
    1790:	90 95       	com	r25
    1792:	9b 01       	movw	r18, r22
    1794:	ac 01       	movw	r20, r24
    1796:	bd 01       	movw	r22, r26
    1798:	cf 01       	movw	r24, r30
    179a:	08 95       	ret

0000179c <__mulsidi3>:
    179c:	68 94       	set
    179e:	00 13       	cpse	r16, r16

000017a0 <__umulsidi3>:
    17a0:	e8 94       	clt
    17a2:	a0 e0       	ldi	r26, 0x00	; 0
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e6 ed       	ldi	r30, 0xD6	; 214
    17a8:	fb e0       	ldi	r31, 0x0B	; 11
    17aa:	1d c0       	rjmp	.+58     	; 0x17e6 <__prologue_saves__+0x10>
    17ac:	ef ef       	ldi	r30, 0xFF	; 255
    17ae:	e7 f9       	bld	r30, 7
    17b0:	59 01       	movw	r10, r18
    17b2:	6a 01       	movw	r12, r20
    17b4:	5e 23       	and	r21, r30
    17b6:	55 0f       	add	r21, r21
    17b8:	ee 08       	sbc	r14, r14
    17ba:	fe 2c       	mov	r15, r14
    17bc:	87 01       	movw	r16, r14
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
    17c2:	9e 23       	and	r25, r30
    17c4:	99 0f       	add	r25, r25
    17c6:	66 0b       	sbc	r22, r22
    17c8:	76 2f       	mov	r23, r22
    17ca:	cb 01       	movw	r24, r22
    17cc:	3b d0       	rcall	.+118    	; 0x1844 <__muldi3>
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	ea e0       	ldi	r30, 0x0A	; 10
    17d4:	24 c0       	rjmp	.+72     	; 0x181e <__epilogue_restores__+0x10>

000017d6 <__prologue_saves__>:
    17d6:	2f 92       	push	r2
    17d8:	3f 92       	push	r3
    17da:	4f 92       	push	r4
    17dc:	5f 92       	push	r5
    17de:	6f 92       	push	r6
    17e0:	7f 92       	push	r7
    17e2:	8f 92       	push	r8
    17e4:	9f 92       	push	r9
    17e6:	af 92       	push	r10
    17e8:	bf 92       	push	r11
    17ea:	cf 92       	push	r12
    17ec:	df 92       	push	r13
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	ca 1b       	sub	r28, r26
    1800:	db 0b       	sbc	r29, r27
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	09 94       	ijmp

0000180e <__epilogue_restores__>:
    180e:	2a 88       	ldd	r2, Y+18	; 0x12
    1810:	39 88       	ldd	r3, Y+17	; 0x11
    1812:	48 88       	ldd	r4, Y+16	; 0x10
    1814:	5f 84       	ldd	r5, Y+15	; 0x0f
    1816:	6e 84       	ldd	r6, Y+14	; 0x0e
    1818:	7d 84       	ldd	r7, Y+13	; 0x0d
    181a:	8c 84       	ldd	r8, Y+12	; 0x0c
    181c:	9b 84       	ldd	r9, Y+11	; 0x0b
    181e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1820:	b9 84       	ldd	r11, Y+9	; 0x09
    1822:	c8 84       	ldd	r12, Y+8	; 0x08
    1824:	df 80       	ldd	r13, Y+7	; 0x07
    1826:	ee 80       	ldd	r14, Y+6	; 0x06
    1828:	fd 80       	ldd	r15, Y+5	; 0x05
    182a:	0c 81       	ldd	r16, Y+4	; 0x04
    182c:	1b 81       	ldd	r17, Y+3	; 0x03
    182e:	aa 81       	ldd	r26, Y+2	; 0x02
    1830:	b9 81       	ldd	r27, Y+1	; 0x01
    1832:	ce 0f       	add	r28, r30
    1834:	d1 1d       	adc	r29, r1
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	de bf       	out	0x3e, r29	; 62
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	ed 01       	movw	r28, r26
    1842:	08 95       	ret

00001844 <__muldi3>:
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	9f 92       	push	r9
    184a:	a0 e4       	ldi	r26, 0x40	; 64
    184c:	9a 2e       	mov	r9, r26
    184e:	00 24       	eor	r0, r0
    1850:	d0 01       	movw	r26, r0
    1852:	e0 01       	movw	r28, r0
    1854:	f0 01       	movw	r30, r0
    1856:	16 95       	lsr	r17
    1858:	07 95       	ror	r16
    185a:	f7 94       	ror	r15
    185c:	e7 94       	ror	r14
    185e:	d7 94       	ror	r13
    1860:	c7 94       	ror	r12
    1862:	b7 94       	ror	r11
    1864:	a7 94       	ror	r10
    1866:	48 f4       	brcc	.+18     	; 0x187a <__muldi3+0x36>
    1868:	10 68       	ori	r17, 0x80	; 128
    186a:	a2 0f       	add	r26, r18
    186c:	b3 1f       	adc	r27, r19
    186e:	c4 1f       	adc	r28, r20
    1870:	d5 1f       	adc	r29, r21
    1872:	e6 1f       	adc	r30, r22
    1874:	f7 1f       	adc	r31, r23
    1876:	08 1e       	adc	r0, r24
    1878:	19 1e       	adc	r1, r25
    187a:	22 0f       	add	r18, r18
    187c:	33 1f       	adc	r19, r19
    187e:	44 1f       	adc	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	66 1f       	adc	r22, r22
    1884:	77 1f       	adc	r23, r23
    1886:	88 1f       	adc	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	9a 94       	dec	r9
    188c:	21 f7       	brne	.-56     	; 0x1856 <__muldi3+0x12>
    188e:	9d 01       	movw	r18, r26
    1890:	ae 01       	movw	r20, r28
    1892:	bf 01       	movw	r22, r30
    1894:	c0 01       	movw	r24, r0
    1896:	11 24       	eor	r1, r1
    1898:	9f 90       	pop	r9
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <strcpy>:
    18a0:	fb 01       	movw	r30, r22
    18a2:	dc 01       	movw	r26, r24
    18a4:	01 90       	ld	r0, Z+
    18a6:	0d 92       	st	X+, r0
    18a8:	00 20       	and	r0, r0
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <strcpy+0x4>
    18ac:	08 95       	ret

000018ae <_exit>:
    18ae:	f8 94       	cli

000018b0 <__stop_program>:
    18b0:	ff cf       	rjmp	.-2      	; 0x18b0 <__stop_program>
