
Blink85.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000145  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000d3  00000000  00000000  00000291  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000127  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000187  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000637  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	1c c0       	rjmp	.+56     	; 0x66 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <util/delay.h>


int main(void)
{
	DDRB |= 1 << DDB3;
  30:	bb 9a       	sbi	0x17, 3	; 23
    /* Replace with your application code */
    while (1) 
    {
		PORTB ^= (1 << PB3);
  32:	98 e0       	ldi	r25, 0x08	; 8
  34:	88 b3       	in	r24, 0x18	; 24
  36:	89 27       	eor	r24, r25
  38:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3a:	2f ef       	ldi	r18, 0xFF	; 255
  3c:	30 e7       	ldi	r19, 0x70	; 112
  3e:	82 e0       	ldi	r24, 0x02	; 2
  40:	21 50       	subi	r18, 0x01	; 1
  42:	30 40       	sbci	r19, 0x00	; 0
  44:	80 40       	sbci	r24, 0x00	; 0
  46:	e1 f7       	brne	.-8      	; 0x40 <__SREG__+0x1>
  48:	00 c0       	rjmp	.+0      	; 0x4a <__SREG__+0xb>
  4a:	00 00       	nop
		_delay_ms(100);
		PORTB ^= (1 << PB3);
  4c:	88 b3       	in	r24, 0x18	; 24
  4e:	89 27       	eor	r24, r25
  50:	88 bb       	out	0x18, r24	; 24
  52:	2f ef       	ldi	r18, 0xFF	; 255
  54:	30 e7       	ldi	r19, 0x70	; 112
  56:	82 e0       	ldi	r24, 0x02	; 2
  58:	21 50       	subi	r18, 0x01	; 1
  5a:	30 40       	sbci	r19, 0x00	; 0
  5c:	80 40       	sbci	r24, 0x00	; 0
  5e:	e1 f7       	brne	.-8      	; 0x58 <__SREG__+0x19>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
  64:	e7 cf       	rjmp	.-50     	; 0x34 <main+0x4>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
