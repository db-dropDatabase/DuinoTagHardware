
obj_hr/sd8p_hr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018de  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000018de  00001992  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000015a  00800072  00800072  000019a4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000019a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019d8  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000a8  00000000  00000000  00001a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002056  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006d7  00000000  00000000  00003b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007c5  00000000  00000000  000041ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000032c  00000000  00000000  000049b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000493  00000000  00000000  00004ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001c43  00000000  00000000  00005173  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  00006db6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
       2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
       4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
       6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
       8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
      14:	b9 c0       	rjmp	.+370    	; 0x188 <__vector_10>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	ae c1       	rjmp	.+860    	; 0x376 <__vector_12>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
      1e:	11 24       	eor	r1, r1
      20:	1f be       	out	0x3f, r1	; 63
      22:	cf e5       	ldi	r28, 0x5F	; 95
      24:	d2 e0       	ldi	r29, 0x02	; 2
      26:	de bf       	out	0x3e, r29	; 62
      28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
      2a:	10 e0       	ldi	r17, 0x00	; 0
      2c:	a0 e6       	ldi	r26, 0x60	; 96
      2e:	b0 e0       	ldi	r27, 0x00	; 0
      30:	ee ed       	ldi	r30, 0xDE	; 222
      32:	f8 e1       	ldi	r31, 0x18	; 24
      34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
      36:	05 90       	lpm	r0, Z+
      38:	0d 92       	st	X+, r0
      3a:	a2 37       	cpi	r26, 0x72	; 114
      3c:	b1 07       	cpc	r27, r17
      3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
      40:	21 e0       	ldi	r18, 0x01	; 1
      42:	a2 e7       	ldi	r26, 0x72	; 114
      44:	b0 e0       	ldi	r27, 0x00	; 0
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	ac 3c       	cpi	r26, 0xCC	; 204
      4c:	b2 07       	cpc	r27, r18
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	80 d9       	rcall	.-3328   	; 0xfffff352 <__fuse+0xff7df352>
      52:	43 cc       	rjmp	.-1914   	; 0xfffff8da <__fuse+0xff7df8da>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_spi>:
; void init_spi (void);

.global init_spi
.func init_spi
init_spi:
	ldi	r24, 0b00001000			; Enable only SCK and DI. DO is controlled by software
      56:	88 e0       	ldi	r24, 0x08	; 8
	out	_SFR_IO_ADDR(USICR), r24
      58:	8d b9       	out	0x0d, r24	; 13
	sbi	_SFR_IO_ADDR(PORTB), B_DO	; MMC DI = H
      5a:	c5 9a       	sbi	0x18, 5	; 24
	sbi	_SFR_IO_ADDR(PORTB), B_CS	; MMC CS = H
      5c:	c3 9a       	sbi	0x18, 3	; 24
	ret
      5e:	08 95       	ret

00000060 <select>:
; void deselect (void);

.global select
.func select
select:
	cbi	_SFR_IO_ADDR(PORTB), B_CS	; CS = L
      60:	c3 98       	cbi	0x18, 3	; 24
	ret
      62:	08 95       	ret

00000064 <deselect>:
.endfunc

.global deselect
.func deselect
deselect:
	sbi	_SFR_IO_ADDR(PORTB), B_CS	; CS = H
      64:	c3 9a       	sbi	0x18, 3	; 24
	ret
      66:	08 95       	ret

00000068 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, 0b000100			;PB2(SCK)
      68:	84 e0       	ldi	r24, 0x04	; 4
	.rept 16				;Toggle SCK 16 times
	out	_SFR_IO_ADDR(PINB), r24		;
	.endr					;/
      6a:	86 bb       	out	0x16, r24	; 22
      6c:	86 bb       	out	0x16, r24	; 22
      6e:	86 bb       	out	0x16, r24	; 22
      70:	86 bb       	out	0x16, r24	; 22
      72:	86 bb       	out	0x16, r24	; 22
      74:	86 bb       	out	0x16, r24	; 22
      76:	86 bb       	out	0x16, r24	; 22
      78:	86 bb       	out	0x16, r24	; 22
      7a:	86 bb       	out	0x16, r24	; 22
      7c:	86 bb       	out	0x16, r24	; 22
      7e:	86 bb       	out	0x16, r24	; 22
      80:	86 bb       	out	0x16, r24	; 22
      82:	86 bb       	out	0x16, r24	; 22
      84:	86 bb       	out	0x16, r24	; 22
      86:	86 bb       	out	0x16, r24	; 22
      88:	86 bb       	out	0x16, r24	; 22
	nop					;Read shift register
      8a:	00 00       	nop
	in	r24, _SFR_IO_ADDR(USIDR)	;/
      8c:	8f b1       	in	r24, 0x0f	; 15
	ret
      8e:	08 95       	ret

00000090 <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, 0b000100			; PB2(SCK)
      90:	94 e0       	ldi	r25, 0x04	; 4
	in	r22, _SFR_IO_ADDR(PORTB)
      92:	68 b3       	in	r22, 0x18	; 24

	ldi	r23, 8
      94:	78 e0       	ldi	r23, 0x08	; 8
1:	bst	r24, 7				;MMC DI = data bit to be sent
      96:	87 fb       	bst	r24, 7
	bld	r22, B_DO			;
      98:	65 f9       	bld	r22, 5
	out	_SFR_IO_ADDR(PORTB), r22	;
      9a:	68 bb       	out	0x18, r22	; 24
	lsl	r24				;/
      9c:	88 0f       	add	r24, r24
	out	_SFR_IO_ADDR(PINB), r25		;SCK = H
      9e:	96 bb       	out	0x16, r25	; 22
	out	_SFR_IO_ADDR(PINB), r25		;SCK = L
      a0:	96 bb       	out	0x16, r25	; 22
	dec	r23				;while(--r23)
      a2:	7a 95       	dec	r23
	brne	1b				;/
      a4:	c1 f7       	brne	.-16     	; 0x96 <xmit_spi+0x6>

	sbi	_SFR_IO_ADDR(PORTB), B_DO	;MMC DI = H
      a6:	c5 9a       	sbi	0x18, 5	; 24
	ret
      a8:	08 95       	ret

000000aa <read_blk_part>:
; void read_blk_part (void*, WORD, WORD);

.global read_blk_part
.func read_blk_part
read_blk_part:
	movw	XL, r24			;X = R25:R24 (destination memory address)
      aa:	dc 01       	movw	r26, r24
	movw	ZL, r22			;Z = R23:R22 (byte offset in the sector)
      ac:	fb 01       	movw	r30, r22

	ldi	r18, lo8(514)		;R19:R18 = 514, Number of bytes to receive
      ae:	22 e0       	ldi	r18, 0x02	; 2
	ldi	r19, hi8(514)		;/
      b0:	32 e0       	ldi	r19, 0x02	; 2
	sub	r18, ZL			;R19:R18 -= Z
      b2:	2e 1b       	sub	r18, r30
	sbc	r19, ZH			;/
      b4:	3f 0b       	sbc	r19, r31
	sub	r18, r20		;R19:R18 -= R21:R20
      b6:	24 1b       	sub	r18, r20
	sbc	r19, r21		;/
      b8:	35 0b       	sbc	r19, r21

	; Skip leading data bytes
	ldi	r24, 0b000100		;PB2(SCK)
      ba:	84 e0       	ldi	r24, 0x04	; 4
1:	sbiw	ZL, 1			;Skip leading data...
      bc:	31 97       	sbiw	r30, 0x01	; 1
	brcs	2f			;
      be:	88 f0       	brcs	.+34     	; 0xe2 <read_blk_part+0x38>
	.rept 16			;Discard a byte on SPI
	out	_SFR_IO_ADDR(PINB), r24	;
	.endr				;/
      c0:	86 bb       	out	0x16, r24	; 22
      c2:	86 bb       	out	0x16, r24	; 22
      c4:	86 bb       	out	0x16, r24	; 22
      c6:	86 bb       	out	0x16, r24	; 22
      c8:	86 bb       	out	0x16, r24	; 22
      ca:	86 bb       	out	0x16, r24	; 22
      cc:	86 bb       	out	0x16, r24	; 22
      ce:	86 bb       	out	0x16, r24	; 22
      d0:	86 bb       	out	0x16, r24	; 22
      d2:	86 bb       	out	0x16, r24	; 22
      d4:	86 bb       	out	0x16, r24	; 22
      d6:	86 bb       	out	0x16, r24	; 22
      d8:	86 bb       	out	0x16, r24	; 22
      da:	86 bb       	out	0x16, r24	; 22
      dc:	86 bb       	out	0x16, r24	; 22
      de:	86 bb       	out	0x16, r24	; 22
	rjmp	1b			;
      e0:	ed cf       	rjmp	.-38     	; 0xbc <read_blk_part+0x12>
2:	sbiw	XL, 0			;Destination?
      e2:	10 97       	sbiw	r26, 0x00	; 0
	breq	fb_wave
      e4:	31 f0       	breq	.+12     	; 0xf2 <fb_wave>

000000e6 <fb_mem>:

fb_mem:	; Store the data bytes to the memory
	rcall	rcv_spi			;do
      e6:	c0 df       	rcall	.-128    	; 0x68 <rcv_spi>
	st	X+, r24			; *X++ = rcv_spi()
      e8:	8d 93       	st	X+, r24
	subi	r20, 1			;while (--r21:r20)
      ea:	41 50       	subi	r20, 0x01	; 1
	sbci	r21, 0			;
      ec:	50 40       	sbci	r21, 0x00	; 0
	brne	fb_mem			;/
      ee:	d9 f7       	brne	.-10     	; 0xe6 <fb_mem>
	rjmp	fb_exit
      f0:	36 c0       	rjmp	.+108    	; 0x15e <fb_exit>

000000f2 <fb_wave>:

fb_wave: ; Store the data bytes to the audio FIFO
	sbic	_FLAGS, 4		;if (16bit data) R21:R20 /= 2;
      f2:	8c 99       	sbic	0x11, 4	; 17
	lsr	r21			;
      f4:	56 95       	lsr	r21
	sbic	_FLAGS, 4		;
      f6:	8c 99       	sbic	0x11, 4	; 17
	ror	r20			;/
      f8:	47 95       	ror	r20
	sbic	_FLAGS, 1		;if (Stereo data) R21:R20 /= 2;
      fa:	89 99       	sbic	0x11, 1	; 17
	lsr	r21			;
      fc:	56 95       	lsr	r21
	sbic	_FLAGS, 1		;
      fe:	89 99       	sbic	0x11, 1	; 17
	ror	r20			;/
     100:	47 95       	ror	r20
	lds	r22, FifoWi		;r22 = FIFO write index
     102:	60 91 76 00 	lds	r22, 0x0076

3:	ldi	XL, lo8(Buff)		;X = Buff + R22
     106:	a0 e9       	ldi	r26, 0x90	; 144
	ldi	XH, hi8(Buff)		;
     108:	b0 e0       	ldi	r27, 0x00	; 0
	add	XL, r22			;
     10a:	a6 0f       	add	r26, r22
	adc	XH, r1			;/
     10c:	b1 1d       	adc	r27, r1
4:	lds	r24, FifoCt		;wait while FIFO full
     10e:	80 91 a0 01 	lds	r24, 0x01A0
	cpi	r24, 252		;
     112:	8c 3f       	cpi	r24, 0xFC	; 252
	brcc	4b			;/
     114:	e0 f7       	brcc	.-8      	; 0x10e <fb_wave+0x1c>
#if MODE >= 1	/* Dual output */
#if MODE >= 2	/* Hi-Res */
	rcall	rcv_spi			;Get L-ch/Mono data into Z
     116:	a8 df       	rcall	.-176    	; 0x68 <rcv_spi>
	clr	ZL			;
     118:	ee 27       	eor	r30, r30
	sbis	_FLAGS, 4		;
     11a:	8c 9b       	sbis	0x11, 4	; 17
	rjmp	6f			;
     11c:	03 c0       	rjmp	.+6      	; 0x124 <fb_wave+0x32>
	mov	ZL, r24			;
     11e:	e8 2f       	mov	r30, r24
	rcall	rcv_spi			;
     120:	a3 df       	rcall	.-186    	; 0x68 <rcv_spi>
	subi	r24, 0x80		;
     122:	80 58       	subi	r24, 0x80	; 128
6:	mov	ZH, r24			;/
     124:	f8 2f       	mov	r31, r24
	sbis	_FLAGS, 1		;if Mono data, no R-ch data
     126:	89 9b       	sbis	0x11, 1	; 17
	rjmp	8f			;/
     128:	0b c0       	rjmp	.+22     	; 0x140 <fb_wave+0x4e>
	rcall	rcv_spi			;Get R-ch data and mix it to Z
     12a:	9e df       	rcall	.-196    	; 0x68 <rcv_spi>
	clr	r25			;
     12c:	99 27       	eor	r25, r25
	sbis	_FLAGS, 4		;
     12e:	8c 9b       	sbis	0x11, 4	; 17
	rjmp	7f			;
     130:	03 c0       	rjmp	.+6      	; 0x138 <fb_wave+0x46>
	mov	r25, r24		;
     132:	98 2f       	mov	r25, r24
	rcall	rcv_spi			;
     134:	99 df       	rcall	.-206    	; 0x68 <rcv_spi>
	subi	r24, 0x80		;
     136:	80 58       	subi	r24, 0x80	; 128
7:	add	ZL, r25			;
     138:	e9 0f       	add	r30, r25
	adc	ZH, r24			;
     13a:	f8 1f       	adc	r31, r24
	ror	ZH			;
     13c:	f7 95       	ror	r31
	ror	ZL			;/
     13e:	e7 95       	ror	r30
	rcall	rcv_spi			;
	sbic	_FLAGS, 4		;
	subi	r24, 0x80		;
	mov	ZL, r24			;/
#endif
9:	st	X+, ZL			;Store Z into FIFO
     140:	ed 93       	st	X+, r30
	st	X+, ZH			;/
     142:	fd 93       	st	X+, r31
	cli				;
     144:	f8 94       	cli
	lds	r24, FifoCt		;
     146:	80 91 a0 01 	lds	r24, 0x01A0
	subi	r24, -2			;
     14a:	8e 5f       	subi	r24, 0xFE	; 254
	sts	FifoCt, r24		;
     14c:	80 93 a0 01 	sts	0x01A0, r24
	sei				;
     150:	78 94       	sei
	subi	r22, -2			;/
     152:	6e 5f       	subi	r22, 0xFE	; 254
	inc	r24			;
	sts	FifoCt, r24		;
	sei				;
	inc	r22			;/
#endif
	subi	r20, lo8(1)		;while(--R21:R20)
     154:	41 50       	subi	r20, 0x01	; 1
	sbci	r21, hi8(1)		;
     156:	50 40       	sbci	r21, 0x00	; 0
	brne	3b			;/
     158:	b1 f6       	brne	.-84     	; 0x106 <fb_wave+0x14>
	sts	FifoWi, r22		;Save FIFO write index
     15a:	60 93 76 00 	sts	0x0076, r22

0000015e <fb_exit>:

fb_exit:	/* Diacard trailing data bytes and CRC */
	ldi	r24, 0b000100		;PB2(SCK)
     15e:	84 e0       	ldi	r24, 0x04	; 4
1:	.rept 16			;Discard a byte on SPI
	out	_SFR_IO_ADDR(PINB), r24	;
	.endr				;/
     160:	86 bb       	out	0x16, r24	; 22
     162:	86 bb       	out	0x16, r24	; 22
     164:	86 bb       	out	0x16, r24	; 22
     166:	86 bb       	out	0x16, r24	; 22
     168:	86 bb       	out	0x16, r24	; 22
     16a:	86 bb       	out	0x16, r24	; 22
     16c:	86 bb       	out	0x16, r24	; 22
     16e:	86 bb       	out	0x16, r24	; 22
     170:	86 bb       	out	0x16, r24	; 22
     172:	86 bb       	out	0x16, r24	; 22
     174:	86 bb       	out	0x16, r24	; 22
     176:	86 bb       	out	0x16, r24	; 22
     178:	86 bb       	out	0x16, r24	; 22
     17a:	86 bb       	out	0x16, r24	; 22
     17c:	86 bb       	out	0x16, r24	; 22
     17e:	86 bb       	out	0x16, r24	; 22
	subi	r18, lo8(1)		;Repeat r19:r18 times
     180:	21 50       	subi	r18, 0x01	; 1
	sbci	r19, hi8(1)		;
     182:	30 40       	sbci	r19, 0x00	; 0
	brne	1b			;/
     184:	69 f7       	brne	.-38     	; 0x160 <fb_exit+0x2>

	ret
     186:	08 95       	ret

00000188 <__vector_10>:


.global TIM0_COMPA_vect
.func TIM0_COMPA_vect
TIM0_COMPA_vect:
	push	r24				;Save regs.
     188:	8f 93       	push	r24
	in	r24, _SFR_IO_ADDR(SREG)		;
     18a:	8f b7       	in	r24, 0x3f	; 63
	push	r24				;
     18c:	8f 93       	push	r24
	push	ZL				;
     18e:	ef 93       	push	r30
	push	ZH				;/
     190:	ff 93       	push	r31

	lds	ZL, FifoRi			;Get FIFO read index
     192:	e0 91 77 00 	lds	r30, 0x0077
	clr	ZH				;Z = pointer to the top of FIFO
     196:	ff 27       	eor	r31, r31
	subi	ZL, lo8(-(Buff))		;
     198:	e0 57       	subi	r30, 0x70	; 112
	sbci	ZH, hi8(-(Buff))		;/
     19a:	ff 4f       	sbci	r31, 0xFF	; 255
	lds	r24, FifoCt			;Load FIFO data counter
     19c:	80 91 a0 01 	lds	r24, 0x01A0

#if MODE >= 1	/* Dual output */
	subi	r24, 2				;Check availability of the sampling data
     1a0:	82 50       	subi	r24, 0x02	; 2
	brcs	9f				;/
     1a2:	48 f0       	brcs	.+18     	; 0x1b6 <__vector_10+0x2e>
	sts	FifoCt, r24			;Save FIFO data counter
     1a4:	80 93 a0 01 	sts	0x01A0, r24
	ld	r24, Z+				;Get R-ch/LSB data and send it to PWM
     1a8:	81 91       	ld	r24, Z+
	out	_SFR_IO_ADDR(OCR1A), r24	;/
     1aa:	8e bd       	out	0x2e, r24	; 46
	ld	r24, Z+				;Get L-ch/MSB data and send it to PWM
     1ac:	81 91       	ld	r24, Z+
	out	_SFR_IO_ADDR(OCR1B), r24	;/
     1ae:	8b bd       	out	0x2b, r24	; 43
	brcs	9f				;/
	sts	FifoCt, r24			;Save FIFO data counter
	ld	r24, Z+				;Send data to PWM
	out	_SFR_IO_ADDR(OCR1B), r24	;/
#endif
	subi	ZL, lo8(Buff)			;Save FIFO read index
     1b0:	e0 59       	subi	r30, 0x90	; 144
	sts	FifoRi, ZL			;/
     1b2:	e0 93 77 00 	sts	0x0077, r30

9:	pop	ZH				;Restore regs.
     1b6:	ff 91       	pop	r31
	pop	ZL				;
     1b8:	ef 91       	pop	r30
	pop	r24				;
     1ba:	8f 91       	pop	r24
	out	_SFR_IO_ADDR(SREG), r24		;
     1bc:	8f bf       	out	0x3f, r24	; 63
	pop	r24				;/
     1be:	8f 91       	pop	r24
	reti
     1c0:	18 95       	reti

000001c2 <xputc>:

.func xputc
.global xputc
xputc:
#if CR_CRLF
	cpi	r24, 10		;LF --> CRLF
     1c2:	8a 30       	cpi	r24, 0x0A	; 10
	brne	1f		;
     1c4:	19 f4       	brne	.+6      	; 0x1cc <xputc+0xa>
	ldi	r24, 13		;
     1c6:	8d e0       	ldi	r24, 0x0D	; 13
	rcall	1f		;
     1c8:	01 d0       	rcall	.+2      	; 0x1cc <xputc+0xa>
	ldi	r24, 10		;/
     1ca:	8a e0       	ldi	r24, 0x0A	; 10
1:
#endif
	push	ZH
     1cc:	ff 93       	push	r31
	push	ZL
     1ce:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     1d0:	e0 91 72 00 	lds	r30, 0x0072
	lds	ZH, xfunc_out+1	;/
     1d4:	f0 91 73 00 	lds	r31, 0x0073
	sbiw	ZL, 0		;Skip if null
     1d8:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     1da:	09 f0       	breq	.+2      	; 0x1de <xputc+0x1c>
	icall
     1dc:	09 95       	icall
2:	pop	ZL
     1de:	ef 91       	pop	r30
	pop	ZH
     1e0:	ff 91       	pop	r31
	ret
     1e2:	08 95       	ret

000001e4 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     1e4:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     1e6:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     1e8:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     1ea:	11 f0       	breq	.+4      	; 0x1f0 <xputs+0xc>
	rcall	xputc
     1ec:	ea df       	rcall	.-44     	; 0x1c2 <xputc>
	rjmp	1b
     1ee:	fb cf       	rjmp	.-10     	; 0x1e6 <xputs+0x2>
2:	ret
     1f0:	08 95       	ret

000001f2 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     1f2:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     1f4:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     1f6:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     1f8:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     1fa:	0c c0       	rjmp	.+24     	; 0x214 <xitoa+0x22>
	neg	r20		;
     1fc:	41 95       	neg	r20
	sbrs	r25, 7		;
     1fe:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     200:	09 c0       	rjmp	.+18     	; 0x214 <xitoa+0x22>
	ldi	r30, '-'	;
     202:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     204:	60 95       	com	r22
	com	r23		;
     206:	70 95       	com	r23
	com	r24		;
     208:	80 95       	com	r24
	com	r25		;
     20a:	90 95       	com	r25
	adc	r22, r1		;
     20c:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     20e:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     210:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     212:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     214:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     216:	02 c0       	rjmp	.+4      	; 0x21c <xitoa+0x2a>
	neg	r18		;
     218:	21 95       	neg	r18
	ldi	r19, '0'	;/
     21a:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     21c:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     21e:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     220:	66 0f       	add	r22, r22
	rol	r23		;
     222:	77 1f       	adc	r23, r23
	rol	r24		;
     224:	88 1f       	adc	r24, r24
	rol	r25		;
     226:	99 1f       	adc	r25, r25
	rol	r26		;
     228:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     22a:	a4 17       	cp	r26, r20
	brcs	3f		;
     22c:	10 f0       	brcs	.+4      	; 0x232 <xitoa+0x40>
	sub	r26, r20	;
     22e:	a4 1b       	sub	r26, r20
	inc	r22		;
     230:	63 95       	inc	r22
3:	dec	r21		;
     232:	5a 95       	dec	r21
	brne	2b		;/
     234:	a9 f7       	brne	.-22     	; 0x220 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     236:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     238:	08 f0       	brcs	.+2      	; 0x23c <xitoa+0x4a>
	subi	r26, -7		;
     23a:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     23c:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     23e:	af 93       	push	r26
	inc	r31		;/
     240:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     242:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     244:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     246:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     248:	91 05       	cpc	r25, r1
	brne	1b		;/
     24a:	41 f7       	brne	.-48     	; 0x21c <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     24c:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     24e:	11 f4       	brne	.+4      	; 0x254 <xitoa+0x62>
	push	r30		;
     250:	ef 93       	push	r30
	inc	r31		;/
     252:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     254:	f2 17       	cp	r31, r18
	brcc	6f		;
     256:	18 f4       	brcc	.+6      	; 0x25e <xitoa+0x6c>
	push	r19		;
     258:	3f 93       	push	r19
	inc	r31		;
     25a:	f3 95       	inc	r31
	rjmp	5b		;/
     25c:	fb cf       	rjmp	.-10     	; 0x254 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     25e:	8f 91       	pop	r24
	rcall	xputc		;
     260:	b0 df       	rcall	.-160    	; 0x1c2 <xputc>
	dec	r31		;
     262:	fa 95       	dec	r31
	brne	6b		;/
     264:	e1 f7       	brne	.-8      	; 0x25e <xitoa+0x6c>

	ret
     266:	08 95       	ret

00000268 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     268:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     26a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     26c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     26e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     270:	21 f0       	breq	.+8      	; 0x27a <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     272:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     274:	19 f0       	breq	.+6      	; 0x27c <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     276:	a5 df       	rcall	.-182    	; 0x1c2 <xputc>
	rjmp	0b		;/
     278:	f9 cf       	rjmp	.-14     	; 0x26c <xvprintf+0x4>
90:	ret
     27a:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     27c:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     27e:	e8 94       	clt
	_LPMI	r21		;Get flags
     280:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     282:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     284:	c1 f3       	breq	.-16     	; 0x276 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     286:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     288:	11 f4       	brne	.+4      	; 0x28e <xvprintf+0x26>
	set			;/
     28a:	68 94       	set
22:	_LPMI	r21		;Get width
     28c:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     28e:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     290:	48 f4       	brcc	.+18     	; 0x2a4 <xvprintf+0x3c>
	subi	r21, '0'	;
     292:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     294:	90 f3       	brcs	.-28     	; 0x27a <xvprintf+0x12>
	lsl	r18		;
     296:	22 0f       	add	r18, r18
	mov	r0, r18		;
     298:	02 2e       	mov	r0, r18
	lsl	r18		;
     29a:	22 0f       	add	r18, r18
	lsl	r18		;
     29c:	22 0f       	add	r18, r18
	add	r18, r0		;
     29e:	20 0d       	add	r18, r0
	add	r18, r21	;
     2a0:	25 0f       	add	r18, r21
	rjmp	22b		;/
     2a2:	f4 cf       	rjmp	.-24     	; 0x28c <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     2a4:	0e f4       	brtc	.+2      	; 0x2a8 <xvprintf+0x40>
	neg	r18		;
     2a6:	21 95       	neg	r18
25:	ld	r24, Y+		;
     2a8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     2aa:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     2ac:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     2ae:	19 f3       	breq	.-58     	; 0x276 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     2b0:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     2b2:	29 f1       	breq	.+74     	; 0x2fe <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     2b4:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     2b6:	59 f1       	breq	.+86     	; 0x30e <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     2b8:	bc 01       	movw	r22, r24
	clr	r24		;
     2ba:	88 27       	eor	r24, r24
	clr	r25		;
     2bc:	99 27       	eor	r25, r25
	clt			;/
     2be:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     2c0:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     2c2:	21 f4       	brne	.+8      	; 0x2cc <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     2c4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     2c6:	99 91       	ld	r25, Y+
	set			;
     2c8:	68 94       	set
	_LPMI	r21		;/
     2ca:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     2cc:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     2ce:	39 f4       	brne	.+14     	; 0x2de <xvprintf+0x76>
	ldi	r20, -10	;
     2d0:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     2d2:	7e f0       	brts	.+30     	; 0x2f2 <xvprintf+0x8a>
	sbrs	r23, 7		;
     2d4:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     2d6:	0d c0       	rjmp	.+26     	; 0x2f2 <xvprintf+0x8a>
	ldi	r24, -1		;
     2d8:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     2da:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     2dc:	0a c0       	rjmp	.+20     	; 0x2f2 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     2de:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     2e0:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     2e2:	39 f0       	breq	.+14     	; 0x2f2 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     2e4:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     2e6:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     2e8:	21 f0       	breq	.+8      	; 0x2f2 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     2ea:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     2ec:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     2ee:	09 f0       	breq	.+2      	; 0x2f2 <xvprintf+0x8a>
	ret			;abort
     2f0:	08 95       	ret
40:	push	ZH		;Output the value
     2f2:	ff 93       	push	r31
	push	ZL		;
     2f4:	ef 93       	push	r30
	rcall	xitoa		;
     2f6:	7d df       	rcall	.-262    	; 0x1f2 <xitoa>
42:	pop	ZL		;
     2f8:	ef 91       	pop	r30
	pop	ZH		;
     2fa:	ff 91       	pop	r31
	rjmp	0b		;/
     2fc:	b7 cf       	rjmp	.-146    	; 0x26c <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     2fe:	ff 93       	push	r31
	push	ZL
     300:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     302:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     304:	81 91       	ld	r24, Z+
	cpi	r24, 0
     306:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     308:	b9 f3       	breq	.-18     	; 0x2f8 <xvprintf+0x90>
	rcall	xputc
     30a:	5b df       	rcall	.-330    	; 0x1c2 <xputc>
	rjmp	51b
     30c:	fb cf       	rjmp	.-10     	; 0x304 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     30e:	ff 93       	push	r31
	push	ZL
     310:	ef 93       	push	r30
	rcall	xputs
     312:	68 df       	rcall	.-304    	; 0x1e4 <xputs>
	rjmp	42b
     314:	f1 cf       	rjmp	.-30     	; 0x2f8 <xvprintf+0x90>

00000316 <xprintf>:


.func xprintf
.global xprintf
xprintf:
	push	YH
     316:	df 93       	push	r29
	push	YL
     318:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     31a:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     31c:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     31e:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     320:	a3 df       	rcall	.-186    	; 0x268 <xvprintf>
	pop	YL
     322:	cf 91       	pop	r28
	pop	YH
     324:	df 91       	pop	r29
	ret
     326:	08 95       	ret

00000328 <putram>:

#if USE_XSPRINTF

.func xsprintf
putram:
	_MOVW	ZH,ZL, r15,r14
     328:	f7 01       	movw	r30, r14
	st	Z+, r24
     32a:	81 93       	st	Z+, r24
	_MOVW	r15,r14, ZH,ZL
     32c:	7f 01       	movw	r14, r30
	ret
     32e:	08 95       	ret

00000330 <xsprintf>:
.global xsprintf
xsprintf:
	push	YH
     330:	df 93       	push	r29
	push	YL
     332:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     334:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     336:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     338:	25 96       	adiw	r28, 0x05	; 5
	lds	ZL, xfunc_out+0	;Save registered output function
     33a:	e0 91 72 00 	lds	r30, 0x0072
	lds	ZH, xfunc_out+1	;
     33e:	f0 91 73 00 	lds	r31, 0x0073
	push	ZL		;
     342:	ef 93       	push	r30
	push	ZH		;/
     344:	ff 93       	push	r31
	ldi	ZL, lo8(pm(putram));Set local output function
     346:	e4 e9       	ldi	r30, 0x94	; 148
	ldi	ZH, hi8(pm(putram));
     348:	f1 e0       	ldi	r31, 0x01	; 1
	sts	xfunc_out+0, ZL	;
     34a:	e0 93 72 00 	sts	0x0072, r30
	sts	xfunc_out+1, ZH	;/
     34e:	f0 93 73 00 	sts	0x0073, r31
	push	r15		;Initialize pointer to string buffer
     352:	ff 92       	push	r15
	push	r14		;
     354:	ef 92       	push	r14
	ld	r14, Y+		;
     356:	e9 90       	ld	r14, Y+
	ld	r15, Y+		;/
     358:	f9 90       	ld	r15, Y+
	rcall	xvprintf
     35a:	86 df       	rcall	.-244    	; 0x268 <xvprintf>
	_MOVW	ZH,ZL, r15,r14	;Terminate string
     35c:	f7 01       	movw	r30, r14
	st	Z, r1		;
     35e:	10 82       	st	Z, r1
	pop	r14		;
     360:	ef 90       	pop	r14
	pop	r15		;/
     362:	ff 90       	pop	r15
	pop	ZH		;Restore registered output function
     364:	ff 91       	pop	r31
	pop	ZL		;
     366:	ef 91       	pop	r30
	sts	xfunc_out+0, ZL	;
     368:	e0 93 72 00 	sts	0x0072, r30
	sts	xfunc_out+1, ZH	;/
     36c:	f0 93 73 00 	sts	0x0073, r31
	pop	YL
     370:	cf 91       	pop	r28
	pop	YH
     372:	df 91       	pop	r29
	ret
     374:	08 95       	ret

00000376 <__vector_12>:
	wdt_reset();
	WDTCR = _BV(WDE) | 0b110;				/* Set WDT to reset mode in timeout of 1s */
}


EMPTY_INTERRUPT(WDT_vect);
     376:	18 95       	reti

00000378 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
     378:	8f 92       	push	r8
     37a:	9f 92       	push	r9
     37c:	af 92       	push	r10
     37e:	bf 92       	push	r11
     380:	cf 92       	push	r12
     382:	df 92       	push	r13
     384:	ef 92       	push	r14
     386:	ff 92       	push	r15
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
	FATFS *fs = FatFs;
     38c:	c0 91 74 00 	lds	r28, 0x0074
     390:	d0 91 75 00 	lds	r29, 0x0075


	clst -= 2;
     394:	62 50       	subi	r22, 0x02	; 2
     396:	71 09       	sbc	r23, r1
     398:	81 09       	sbc	r24, r1
     39a:	91 09       	sbc	r25, r1
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     39c:	ce 80       	ldd	r12, Y+6	; 0x06
     39e:	df 80       	ldd	r13, Y+7	; 0x07
     3a0:	e8 84       	ldd	r14, Y+8	; 0x08
     3a2:	f9 84       	ldd	r15, Y+9	; 0x09
     3a4:	22 e0       	ldi	r18, 0x02	; 2
     3a6:	c2 1a       	sub	r12, r18
     3a8:	d1 08       	sbc	r13, r1
     3aa:	e1 08       	sbc	r14, r1
     3ac:	f1 08       	sbc	r15, r1
     3ae:	6c 15       	cp	r22, r12
     3b0:	7d 05       	cpc	r23, r13
     3b2:	8e 05       	cpc	r24, r14
     3b4:	9f 05       	cpc	r25, r15
     3b6:	90 f4       	brcc	.+36     	; 0x3dc <clust2sect+0x64>
	return (DWORD)clst * fs->csize + fs->database;
     3b8:	2a 81       	ldd	r18, Y+2	; 0x02
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	f2 d9       	rcall	.-3100   	; 0xfffff7a6 <__fuse+0xff7df7a6>
     3c2:	49 01       	movw	r8, r18
     3c4:	5a 01       	movw	r10, r20
     3c6:	8a 89       	ldd	r24, Y+18	; 0x12
     3c8:	9b 89       	ldd	r25, Y+19	; 0x13
     3ca:	ac 89       	ldd	r26, Y+20	; 0x14
     3cc:	bd 89       	ldd	r27, Y+21	; 0x15
     3ce:	bc 01       	movw	r22, r24
     3d0:	cd 01       	movw	r24, r26
     3d2:	68 0d       	add	r22, r8
     3d4:	79 1d       	adc	r23, r9
     3d6:	8a 1d       	adc	r24, r10
     3d8:	9b 1d       	adc	r25, r11
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <clust2sect+0x6a>
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	70 e0       	ldi	r23, 0x00	; 0
     3e0:	cb 01       	movw	r24, r22
	return (DWORD)clst * fs->csize + fs->database;
}
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	bf 90       	pop	r11
     3f0:	af 90       	pop	r10
     3f2:	9f 90       	pop	r9
     3f4:	8f 90       	pop	r8
     3f6:	08 95       	ret

000003f8 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	dc 01       	movw	r26, r24
	CLUST clst;
	FATFS *fs = FatFs;
     402:	e0 91 74 00 	lds	r30, 0x0074
     406:	f0 91 75 00 	lds	r31, 0x0075


	dj->index = 0;
     40a:	11 96       	adiw	r26, 0x01	; 1
     40c:	1c 92       	st	X, r1
     40e:	1e 92       	st	-X, r1
	clst = dj->sclust;
     410:	14 96       	adiw	r26, 0x04	; 4
     412:	6d 91       	ld	r22, X+
     414:	7d 91       	ld	r23, X+
     416:	8d 91       	ld	r24, X+
     418:	9c 91       	ld	r25, X
     41a:	17 97       	sbiw	r26, 0x07	; 7
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     41c:	61 30       	cpi	r22, 0x01	; 1
     41e:	71 05       	cpc	r23, r1
     420:	81 05       	cpc	r24, r1
     422:	91 05       	cpc	r25, r1
     424:	61 f1       	breq	.+88     	; 0x47e <dir_rewind+0x86>
     426:	06 81       	ldd	r16, Z+6	; 0x06
     428:	17 81       	ldd	r17, Z+7	; 0x07
     42a:	20 85       	ldd	r18, Z+8	; 0x08
     42c:	31 85       	ldd	r19, Z+9	; 0x09
     42e:	60 17       	cp	r22, r16
     430:	71 07       	cpc	r23, r17
     432:	82 07       	cpc	r24, r18
     434:	93 07       	cpc	r25, r19
     436:	18 f5       	brcc	.+70     	; 0x47e <dir_rewind+0x86>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     438:	61 15       	cp	r22, r1
     43a:	71 05       	cpc	r23, r1
     43c:	81 05       	cpc	r24, r1
     43e:	91 05       	cpc	r25, r1
     440:	39 f4       	brne	.+14     	; 0x450 <dir_rewind+0x58>
     442:	20 81       	ld	r18, Z
     444:	23 30       	cpi	r18, 0x03	; 3
     446:	21 f4       	brne	.+8      	; 0x450 <dir_rewind+0x58>
		clst = (CLUST)fs->dirbase;
     448:	66 85       	ldd	r22, Z+14	; 0x0e
     44a:	77 85       	ldd	r23, Z+15	; 0x0f
     44c:	80 89       	ldd	r24, Z+16	; 0x10
     44e:	91 89       	ldd	r25, Z+17	; 0x11
     450:	ed 01       	movw	r28, r26
	dj->clust = clst;						/* Current cluster */
     452:	68 87       	std	Y+8, r22	; 0x08
     454:	79 87       	std	Y+9, r23	; 0x09
     456:	8a 87       	std	Y+10, r24	; 0x0a
     458:	9b 87       	std	Y+11, r25	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     45a:	61 15       	cp	r22, r1
     45c:	71 05       	cpc	r23, r1
     45e:	81 05       	cpc	r24, r1
     460:	91 05       	cpc	r25, r1
     462:	11 f0       	breq	.+4      	; 0x468 <dir_rewind+0x70>
     464:	89 df       	rcall	.-238    	; 0x378 <clust2sect>
     466:	04 c0       	rjmp	.+8      	; 0x470 <dir_rewind+0x78>
     468:	66 85       	ldd	r22, Z+14	; 0x0e
     46a:	77 85       	ldd	r23, Z+15	; 0x0f
     46c:	80 89       	ldd	r24, Z+16	; 0x10
     46e:	91 89       	ldd	r25, Z+17	; 0x11
     470:	6c 87       	std	Y+12, r22	; 0x0c
     472:	7d 87       	std	Y+13, r23	; 0x0d
     474:	8e 87       	std	Y+14, r24	; 0x0e
     476:	9f 87       	std	Y+15, r25	; 0x0f

	return FR_OK;	/* Seek succeeded */
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	02 c0       	rjmp	.+4      	; 0x482 <dir_rewind+0x8a>


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
     482:	df 91       	pop	r29
     484:	cf 91       	pop	r28
     486:	1f 91       	pop	r17
     488:	0f 91       	pop	r16
     48a:	08 95       	ret

0000048c <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     48c:	4f 92       	push	r4
     48e:	5f 92       	push	r5
     490:	6f 92       	push	r6
     492:	7f 92       	push	r7
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <get_fat+0x1e>
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <get_fat+0x20>
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
     4b0:	6b 01       	movw	r12, r22
     4b2:	7c 01       	movw	r14, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     4b4:	a0 90 74 00 	lds	r10, 0x0074
     4b8:	b0 90 75 00 	lds	r11, 0x0075


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     4bc:	82 e0       	ldi	r24, 0x02	; 2
     4be:	c8 16       	cp	r12, r24
     4c0:	d1 04       	cpc	r13, r1
     4c2:	e1 04       	cpc	r14, r1
     4c4:	f1 04       	cpc	r15, r1
     4c6:	08 f4       	brcc	.+2      	; 0x4ca <get_fat+0x3e>
     4c8:	a2 c0       	rjmp	.+324    	; 0x60e <get_fat+0x182>
     4ca:	f5 01       	movw	r30, r10
     4cc:	86 81       	ldd	r24, Z+6	; 0x06
     4ce:	97 81       	ldd	r25, Z+7	; 0x07
     4d0:	a0 85       	ldd	r26, Z+8	; 0x08
     4d2:	b1 85       	ldd	r27, Z+9	; 0x09
     4d4:	c8 16       	cp	r12, r24
     4d6:	d9 06       	cpc	r13, r25
     4d8:	ea 06       	cpc	r14, r26
     4da:	fb 06       	cpc	r15, r27
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <get_fat+0x54>
     4de:	97 c0       	rjmp	.+302    	; 0x60e <get_fat+0x182>
		return 1;

	switch (fs->fs_type) {
     4e0:	80 81       	ld	r24, Z
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <get_fat+0x5c>
     4e6:	52 c0       	rjmp	.+164    	; 0x58c <get_fat+0x100>
     4e8:	83 30       	cpi	r24, 0x03	; 3
     4ea:	09 f4       	brne	.+2      	; 0x4ee <get_fat+0x62>
     4ec:	6a c0       	rjmp	.+212    	; 0x5c2 <get_fat+0x136>
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <get_fat+0x68>
     4f2:	8d c0       	rjmp	.+282    	; 0x60e <get_fat+0x182>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     4f4:	26 01       	movw	r4, r12
     4f6:	56 94       	lsr	r5
     4f8:	47 94       	ror	r4
     4fa:	4c 0c       	add	r4, r12
     4fc:	5d 1c       	adc	r5, r13
		ofs = bc % 512; bc /= 512;
     4fe:	92 01       	movw	r18, r4
     500:	31 70       	andi	r19, 0x01	; 1
     502:	45 2c       	mov	r4, r5
     504:	55 24       	eor	r5, r5
     506:	46 94       	lsr	r4
     508:	61 2c       	mov	r6, r1
     50a:	71 2c       	mov	r7, r1
     50c:	42 85       	ldd	r20, Z+10	; 0x0a
     50e:	53 85       	ldd	r21, Z+11	; 0x0b
     510:	64 85       	ldd	r22, Z+12	; 0x0c
     512:	75 85       	ldd	r23, Z+13	; 0x0d
		if (ofs != 511) {
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     514:	44 0d       	add	r20, r4
     516:	55 1d       	adc	r21, r5
     518:	66 1d       	adc	r22, r6
     51a:	77 1d       	adc	r23, r7
	switch (fs->fs_type) {
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
		ofs = bc % 512; bc /= 512;
		if (ofs != 511) {
     51c:	2f 3f       	cpi	r18, 0xFF	; 255
     51e:	f1 e0       	ldi	r31, 0x01	; 1
     520:	3f 07       	cpc	r19, r31
     522:	29 f0       	breq	.+10     	; 0x52e <get_fat+0xa2>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     524:	02 e0       	ldi	r16, 0x02	; 2
     526:	10 e0       	ldi	r17, 0x00	; 0
     528:	ce 01       	movw	r24, r28
     52a:	01 96       	adiw	r24, 0x01	; 1
     52c:	1b c0       	rjmp	.+54     	; 0x564 <get_fat+0xd8>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     52e:	01 e0       	ldi	r16, 0x01	; 1
     530:	10 e0       	ldi	r17, 0x00	; 0
     532:	2f ef       	ldi	r18, 0xFF	; 255
     534:	31 e0       	ldi	r19, 0x01	; 1
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	db d6       	rcall	.+3510   	; 0x12f2 <disk_readp>
     53c:	89 2b       	or	r24, r25
     53e:	09 f0       	breq	.+2      	; 0x542 <get_fat+0xb6>
     540:	66 c0       	rjmp	.+204    	; 0x60e <get_fat+0x182>
     542:	f5 01       	movw	r30, r10
     544:	42 85       	ldd	r20, Z+10	; 0x0a
     546:	53 85       	ldd	r21, Z+11	; 0x0b
     548:	64 85       	ldd	r22, Z+12	; 0x0c
     54a:	75 85       	ldd	r23, Z+13	; 0x0d
     54c:	4f 5f       	subi	r20, 0xFF	; 255
     54e:	5f 4f       	sbci	r21, 0xFF	; 255
     550:	6f 4f       	sbci	r22, 0xFF	; 255
     552:	7f 4f       	sbci	r23, 0xFF	; 255
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     554:	44 0d       	add	r20, r4
     556:	55 1d       	adc	r21, r5
     558:	66 1d       	adc	r22, r6
     55a:	77 1d       	adc	r23, r7
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	ce 01       	movw	r24, r28
     562:	02 96       	adiw	r24, 0x02	; 2
     564:	c6 d6       	rcall	.+3468   	; 0x12f2 <disk_readp>
     566:	89 2b       	or	r24, r25
     568:	09 f0       	breq	.+2      	; 0x56c <get_fat+0xe0>
     56a:	51 c0       	rjmp	.+162    	; 0x60e <get_fat+0x182>
		}
		wc = LD_WORD(buf);
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     570:	c0 fe       	sbrs	r12, 0
     572:	07 c0       	rjmp	.+14     	; 0x582 <get_fat+0xf6>
     574:	bc 01       	movw	r22, r24
     576:	e4 e0       	ldi	r30, 0x04	; 4
     578:	76 95       	lsr	r23
     57a:	67 95       	ror	r22
     57c:	ea 95       	dec	r30
     57e:	e1 f7       	brne	.-8      	; 0x578 <get_fat+0xec>
     580:	02 c0       	rjmp	.+4      	; 0x586 <get_fat+0xfa>
     582:	bc 01       	movw	r22, r24
     584:	7f 70       	andi	r23, 0x0F	; 15
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	45 c0       	rjmp	.+138    	; 0x616 <get_fat+0x18a>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     58c:	96 01       	movw	r18, r12
     58e:	33 27       	eor	r19, r19
     590:	22 0f       	add	r18, r18
     592:	33 1f       	adc	r19, r19
     594:	77 27       	eor	r23, r23
     596:	6f 2d       	mov	r22, r15
     598:	5e 2d       	mov	r21, r14
     59a:	4d 2d       	mov	r20, r13
     59c:	f5 01       	movw	r30, r10
     59e:	82 85       	ldd	r24, Z+10	; 0x0a
     5a0:	93 85       	ldd	r25, Z+11	; 0x0b
     5a2:	a4 85       	ldd	r26, Z+12	; 0x0c
     5a4:	b5 85       	ldd	r27, Z+13	; 0x0d
     5a6:	48 0f       	add	r20, r24
     5a8:	59 1f       	adc	r21, r25
     5aa:	6a 1f       	adc	r22, r26
     5ac:	7b 1f       	adc	r23, r27
     5ae:	02 e0       	ldi	r16, 0x02	; 2
     5b0:	10 e0       	ldi	r17, 0x00	; 0
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	9d d6       	rcall	.+3386   	; 0x12f2 <disk_readp>
     5b8:	89 2b       	or	r24, r25
     5ba:	49 f5       	brne	.+82     	; 0x60e <get_fat+0x182>
		return LD_WORD(buf);
     5bc:	69 81       	ldd	r22, Y+1	; 0x01
     5be:	7a 81       	ldd	r23, Y+2	; 0x02
     5c0:	e2 cf       	rjmp	.-60     	; 0x586 <get_fat+0xfa>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     5c2:	96 01       	movw	r18, r12
     5c4:	2f 77       	andi	r18, 0x7F	; 127
     5c6:	33 27       	eor	r19, r19
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	22 0f       	add	r18, r18
     5ce:	33 1f       	adc	r19, r19
     5d0:	97 e0       	ldi	r25, 0x07	; 7
     5d2:	f6 94       	lsr	r15
     5d4:	e7 94       	ror	r14
     5d6:	d7 94       	ror	r13
     5d8:	c7 94       	ror	r12
     5da:	9a 95       	dec	r25
     5dc:	d1 f7       	brne	.-12     	; 0x5d2 <get_fat+0x146>
     5de:	f5 01       	movw	r30, r10
     5e0:	42 85       	ldd	r20, Z+10	; 0x0a
     5e2:	53 85       	ldd	r21, Z+11	; 0x0b
     5e4:	64 85       	ldd	r22, Z+12	; 0x0c
     5e6:	75 85       	ldd	r23, Z+13	; 0x0d
     5e8:	4c 0d       	add	r20, r12
     5ea:	5d 1d       	adc	r21, r13
     5ec:	6e 1d       	adc	r22, r14
     5ee:	7f 1d       	adc	r23, r15
     5f0:	04 e0       	ldi	r16, 0x04	; 4
     5f2:	10 e0       	ldi	r17, 0x00	; 0
     5f4:	ce 01       	movw	r24, r28
     5f6:	01 96       	adiw	r24, 0x01	; 1
     5f8:	7c d6       	rcall	.+3320   	; 0x12f2 <disk_readp>
     5fa:	89 2b       	or	r24, r25
     5fc:	41 f4       	brne	.+16     	; 0x60e <get_fat+0x182>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     5fe:	89 81       	ldd	r24, Y+1	; 0x01
     600:	9a 81       	ldd	r25, Y+2	; 0x02
     602:	ab 81       	ldd	r26, Y+3	; 0x03
     604:	bc 81       	ldd	r27, Y+4	; 0x04
     606:	bc 01       	movw	r22, r24
     608:	cd 01       	movw	r24, r26
     60a:	9f 70       	andi	r25, 0x0F	; 15
     60c:	04 c0       	rjmp	.+8      	; 0x616 <get_fat+0x18a>
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
}
     616:	0f 90       	pop	r0
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
     61c:	0f 90       	pop	r0
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	ff 90       	pop	r15
     628:	ef 90       	pop	r14
     62a:	df 90       	pop	r13
     62c:	cf 90       	pop	r12
     62e:	bf 90       	pop	r11
     630:	af 90       	pop	r10
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

0000063c <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	e3 e2       	ldi	r30, 0x23	; 35
     642:	f3 e0       	ldi	r31, 0x03	; 3
     644:	d5 c8       	rjmp	.-3670   	; 0xfffff7f0 <__fuse+0xff7df7f0>
     646:	ec 01       	movw	r28, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     648:	e0 90 74 00 	lds	r14, 0x0074
     64c:	f0 90 75 00 	lds	r15, 0x0075


	i = dj->index + 1;
     650:	08 81       	ld	r16, Y
     652:	19 81       	ldd	r17, Y+1	; 0x01
     654:	0f 5f       	subi	r16, 0xFF	; 255
     656:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     658:	19 f4       	brne	.+6      	; 0x660 <dir_next+0x24>
		return FR_NO_FILE;
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	57 c0       	rjmp	.+174    	; 0x70e <dir_next+0xd2>
	WORD i;
	FATFS *fs = FatFs;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     660:	4c 85       	ldd	r20, Y+12	; 0x0c
     662:	5d 85       	ldd	r21, Y+13	; 0x0d
     664:	6e 85       	ldd	r22, Y+14	; 0x0e
     666:	7f 85       	ldd	r23, Y+15	; 0x0f
     668:	41 15       	cp	r20, r1
     66a:	51 05       	cpc	r21, r1
     66c:	61 05       	cpc	r22, r1
     66e:	71 05       	cpc	r23, r1
     670:	a1 f3       	breq	.-24     	; 0x65a <dir_next+0x1e>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
     672:	c8 01       	movw	r24, r16
     674:	8f 70       	andi	r24, 0x0F	; 15
     676:	99 27       	eor	r25, r25
     678:	89 2b       	or	r24, r25
     67a:	09 f0       	breq	.+2      	; 0x67e <dir_next+0x42>
     67c:	41 c0       	rjmp	.+130    	; 0x700 <dir_next+0xc4>
		dj->sect++;			/* Next sector */
     67e:	4f 5f       	subi	r20, 0xFF	; 255
     680:	5f 4f       	sbci	r21, 0xFF	; 255
     682:	6f 4f       	sbci	r22, 0xFF	; 255
     684:	7f 4f       	sbci	r23, 0xFF	; 255
     686:	4c 87       	std	Y+12, r20	; 0x0c
     688:	5d 87       	std	Y+13, r21	; 0x0d
     68a:	6e 87       	std	Y+14, r22	; 0x0e
     68c:	7f 87       	std	Y+15, r23	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     68e:	68 85       	ldd	r22, Y+8	; 0x08
     690:	79 85       	ldd	r23, Y+9	; 0x09
     692:	8a 85       	ldd	r24, Y+10	; 0x0a
     694:	9b 85       	ldd	r25, Y+11	; 0x0b
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     696:	f7 01       	movw	r30, r14
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
     698:	61 15       	cp	r22, r1
     69a:	71 05       	cpc	r23, r1
     69c:	81 05       	cpc	r24, r1
     69e:	91 05       	cpc	r25, r1
     6a0:	31 f4       	brne	.+12     	; 0x6ae <dir_next+0x72>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     6a2:	84 81       	ldd	r24, Z+4	; 0x04
     6a4:	95 81       	ldd	r25, Z+5	; 0x05
     6a6:	08 17       	cp	r16, r24
     6a8:	19 07       	cpc	r17, r25
     6aa:	b8 f6       	brcc	.-82     	; 0x65a <dir_next+0x1e>
     6ac:	29 c0       	rjmp	.+82     	; 0x700 <dir_next+0xc4>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     6ae:	22 81       	ldd	r18, Z+2	; 0x02
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	a9 01       	movw	r20, r18
     6b4:	41 50       	subi	r20, 0x01	; 1
     6b6:	51 09       	sbc	r21, r1
     6b8:	98 01       	movw	r18, r16
     6ba:	e4 e0       	ldi	r30, 0x04	; 4
     6bc:	36 95       	lsr	r19
     6be:	27 95       	ror	r18
     6c0:	ea 95       	dec	r30
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <dir_next+0x80>
     6c4:	24 23       	and	r18, r20
     6c6:	35 23       	and	r19, r21
     6c8:	23 2b       	or	r18, r19
     6ca:	d1 f4       	brne	.+52     	; 0x700 <dir_next+0xc4>
				clst = get_fat(dj->clust);		/* Get next cluster */
     6cc:	df de       	rcall	.-578    	; 0x48c <get_fat>
				if (clst <= 1) return FR_DISK_ERR;
     6ce:	62 30       	cpi	r22, 0x02	; 2
     6d0:	71 05       	cpc	r23, r1
     6d2:	81 05       	cpc	r24, r1
     6d4:	91 05       	cpc	r25, r1
     6d6:	c8 f0       	brcs	.+50     	; 0x70a <dir_next+0xce>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
     6d8:	f7 01       	movw	r30, r14
     6da:	c6 80       	ldd	r12, Z+6	; 0x06
     6dc:	d7 80       	ldd	r13, Z+7	; 0x07
     6de:	e0 84       	ldd	r14, Z+8	; 0x08
     6e0:	f1 84       	ldd	r15, Z+9	; 0x09
     6e2:	6c 15       	cp	r22, r12
     6e4:	7d 05       	cpc	r23, r13
     6e6:	8e 05       	cpc	r24, r14
     6e8:	9f 05       	cpc	r25, r15
     6ea:	08 f0       	brcs	.+2      	; 0x6ee <dir_next+0xb2>
     6ec:	b6 cf       	rjmp	.-148    	; 0x65a <dir_next+0x1e>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     6ee:	68 87       	std	Y+8, r22	; 0x08
     6f0:	79 87       	std	Y+9, r23	; 0x09
     6f2:	8a 87       	std	Y+10, r24	; 0x0a
     6f4:	9b 87       	std	Y+11, r25	; 0x0b
				dj->sect = clust2sect(clst);
     6f6:	40 de       	rcall	.-896    	; 0x378 <clust2sect>
     6f8:	6c 87       	std	Y+12, r22	; 0x0c
     6fa:	7d 87       	std	Y+13, r23	; 0x0d
     6fc:	8e 87       	std	Y+14, r24	; 0x0e
     6fe:	9f 87       	std	Y+15, r25	; 0x0f
			}
		}
	}

	dj->index = i;
     700:	19 83       	std	Y+1, r17	; 0x01
     702:	08 83       	st	Y, r16

	return FR_OK;
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	02 c0       	rjmp	.+4      	; 0x70e <dir_next+0xd2>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	90 e0       	ldi	r25, 0x00	; 0
	}

	dj->index = i;

	return FR_OK;
}
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	e8 e0       	ldi	r30, 0x08	; 8
     714:	89 c8       	rjmp	.-3822   	; 0xfffff828 <__fuse+0xff7df828>

00000716 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
     716:	a0 e0       	ldi	r26, 0x00	; 0
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	e0 e9       	ldi	r30, 0x90	; 144
     71c:	f3 e0       	ldi	r31, 0x03	; 3
     71e:	68 c8       	rjmp	.-3888   	; 0xfffff7f0 <__fuse+0xff7df7f0>
     720:	ec 01       	movw	r28, r24
     722:	6a 01       	movw	r12, r20
     724:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
     726:	02 e0       	ldi	r16, 0x02	; 2
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	2e ef       	ldi	r18, 0xFE	; 254
     72c:	31 e0       	ldi	r19, 0x01	; 1
     72e:	e1 d5       	rcall	.+3010   	; 0x12f2 <disk_readp>
     730:	89 2b       	or	r24, r25
     732:	21 f5       	brne	.+72     	; 0x77c <check_fs+0x66>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
     734:	88 81       	ld	r24, Y
     736:	99 81       	ldd	r25, Y+1	; 0x01
     738:	85 35       	cpi	r24, 0x55	; 85
     73a:	9a 4a       	sbci	r25, 0xAA	; 170
     73c:	09 f5       	brne	.+66     	; 0x780 <check_fs+0x6a>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
     73e:	26 e3       	ldi	r18, 0x36	; 54
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	b7 01       	movw	r22, r14
     744:	a6 01       	movw	r20, r12
     746:	ce 01       	movw	r24, r28
     748:	d4 d5       	rcall	.+2984   	; 0x12f2 <disk_readp>
     74a:	89 2b       	or	r24, r25
     74c:	39 f4       	brne	.+14     	; 0x75c <check_fs+0x46>
     74e:	88 81       	ld	r24, Y
     750:	99 81       	ldd	r25, Y+1	; 0x01
     752:	86 34       	cpi	r24, 0x46	; 70
     754:	91 44       	sbci	r25, 0x41	; 65
     756:	11 f4       	brne	.+4      	; 0x75c <check_fs+0x46>
		return 0;
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	15 c0       	rjmp	.+42     	; 0x786 <check_fs+0x70>
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
     75c:	02 e0       	ldi	r16, 0x02	; 2
     75e:	10 e0       	ldi	r17, 0x00	; 0
     760:	22 e5       	ldi	r18, 0x52	; 82
     762:	30 e0       	ldi	r19, 0x00	; 0
     764:	b7 01       	movw	r22, r14
     766:	a6 01       	movw	r20, r12
     768:	ce 01       	movw	r24, r28
     76a:	c3 d5       	rcall	.+2950   	; 0x12f2 <disk_readp>
     76c:	89 2b       	or	r24, r25
     76e:	51 f4       	brne	.+20     	; 0x784 <check_fs+0x6e>
     770:	88 81       	ld	r24, Y
     772:	99 81       	ldd	r25, Y+1	; 0x01
     774:	86 34       	cpi	r24, 0x46	; 70
     776:	91 44       	sbci	r25, 0x41	; 65
     778:	29 f4       	brne	.+10     	; 0x784 <check_fs+0x6e>
     77a:	ee cf       	rjmp	.-36     	; 0x758 <check_fs+0x42>
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
		return 3;
     77c:	83 e0       	ldi	r24, 0x03	; 3
     77e:	03 c0       	rjmp	.+6      	; 0x786 <check_fs+0x70>
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
		return 2;
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	01 c0       	rjmp	.+2      	; 0x786 <check_fs+0x70>

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
		return 0;
	return 1;
     784:	81 e0       	ldi	r24, 0x01	; 1
}
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	e8 e0       	ldi	r30, 0x08	; 8
     78c:	4d c8       	rjmp	.-3942   	; 0xfffff828 <__fuse+0xff7df828>

0000078e <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
     78e:	a0 e0       	ldi	r26, 0x00	; 0
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	ec ec       	ldi	r30, 0xCC	; 204
     794:	f3 e0       	ldi	r31, 0x03	; 3
     796:	29 c8       	rjmp	.-4014   	; 0xfffff7ea <__fuse+0xff7df7ea>
     798:	ec 01       	movw	r28, r24
     79a:	6b 01       	movw	r12, r22
     79c:	24 2f       	mov	r18, r20
     79e:	95 2f       	mov	r25, r21
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
     7a0:	da 01       	movw	r26, r20
     7a2:	8d 91       	ld	r24, X+
     7a4:	ad 01       	movw	r20, r26
     7a6:	80 32       	cpi	r24, 0x20	; 32
     7a8:	c9 f3       	breq	.-14     	; 0x79c <follow_path+0xe>
     7aa:	e2 2e       	mov	r14, r18
     7ac:	f9 2e       	mov	r15, r25
	if (*path == '/') path++;			/* Strip heading separator */
     7ae:	8f 32       	cpi	r24, 0x2F	; 47
     7b0:	19 f4       	brne	.+6      	; 0x7b8 <follow_path+0x2a>
     7b2:	bf ef       	ldi	r27, 0xFF	; 255
     7b4:	eb 1a       	sub	r14, r27
     7b6:	fb 0a       	sbc	r15, r27
	dj->sclust = 0;						/* Set start directory (always root dir) */
     7b8:	1c 82       	std	Y+4, r1	; 0x04
     7ba:	1d 82       	std	Y+5, r1	; 0x05
     7bc:	1e 82       	std	Y+6, r1	; 0x06
     7be:	1f 82       	std	Y+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     7c0:	f7 01       	movw	r30, r14
     7c2:	80 81       	ld	r24, Z
     7c4:	81 32       	cpi	r24, 0x21	; 33
     7c6:	38 f0       	brcs	.+14     	; 0x7d6 <follow_path+0x48>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     7c8:	50 e2       	ldi	r21, 0x20	; 32
     7ca:	95 2e       	mov	r9, r21
     7cc:	56 01       	movw	r10, r12
     7ce:	fb e0       	ldi	r31, 0x0B	; 11
     7d0:	af 0e       	add	r10, r31
     7d2:	b1 1c       	adc	r11, r1
     7d4:	5e c0       	rjmp	.+188    	; 0x892 <follow_path+0x104>
	while (*path == ' ') path++;		/* Skip leading spaces */
	if (*path == '/') path++;			/* Strip heading separator */
	dj->sclust = 0;						/* Set start directory (always root dir) */

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
		res = dir_rewind(dj);
     7d6:	ce 01       	movw	r24, r28
     7d8:	0f de       	rcall	.-994    	; 0x3f8 <dir_rewind>
		dir[0] = 0;
     7da:	d6 01       	movw	r26, r12
     7dc:	1c 92       	st	X, r1
     7de:	c9 c0       	rjmp	.+402    	; 0x972 <follow_path+0x1e4>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	48 e0       	ldi	r20, 0x08	; 8
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     7e6:	51 e0       	ldi	r21, 0x01	; 1
     7e8:	51 0f       	add	r21, r17
     7ea:	97 01       	movw	r18, r14
     7ec:	21 0f       	add	r18, r17
     7ee:	31 1d       	adc	r19, r1
     7f0:	d9 01       	movw	r26, r18
     7f2:	8c 91       	ld	r24, X
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     7f4:	81 32       	cpi	r24, 0x21	; 33
     7f6:	08 f0       	brcs	.+2      	; 0x7fa <follow_path+0x6c>
     7f8:	57 c0       	rjmp	.+174    	; 0x8a8 <follow_path+0x11a>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
     7fa:	e5 0e       	add	r14, r21
     7fc:	f1 1c       	adc	r15, r1

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	81 32       	cpi	r24, 0x21	; 33
     802:	08 f0       	brcs	.+2      	; 0x806 <follow_path+0x78>
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	93 87       	std	Z+11, r25	; 0x0b
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
     808:	ce 01       	movw	r24, r28
     80a:	f6 dd       	rcall	.-1044   	; 0x3f8 <dir_rewind>
	if (res != FR_OK) return res;
     80c:	00 97       	sbiw	r24, 0x00	; 0
     80e:	09 f0       	breq	.+2      	; 0x812 <follow_path+0x84>
     810:	96 c0       	rjmp	.+300    	; 0x93e <follow_path+0x1b0>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     812:	28 81       	ld	r18, Y
     814:	39 81       	ldd	r19, Y+1	; 0x01
     816:	2f 70       	andi	r18, 0x0F	; 15
     818:	33 27       	eor	r19, r19
     81a:	45 e0       	ldi	r20, 0x05	; 5
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	4a 95       	dec	r20
     822:	e1 f7       	brne	.-8      	; 0x81c <follow_path+0x8e>
     824:	4c 85       	ldd	r20, Y+12	; 0x0c
     826:	5d 85       	ldd	r21, Y+13	; 0x0d
     828:	6e 85       	ldd	r22, Y+14	; 0x0e
     82a:	7f 85       	ldd	r23, Y+15	; 0x0f
     82c:	00 e2       	ldi	r16, 0x20	; 32
     82e:	10 e0       	ldi	r17, 0x00	; 0
     830:	c6 01       	movw	r24, r12
     832:	5f d5       	rcall	.+2750   	; 0x12f2 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     834:	89 2b       	or	r24, r25
     836:	09 f0       	breq	.+2      	; 0x83a <follow_path+0xac>
     838:	8d c0       	rjmp	.+282    	; 0x954 <follow_path+0x1c6>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     83a:	f6 01       	movw	r30, r12
     83c:	80 81       	ld	r24, Z
     83e:	88 23       	and	r24, r24
     840:	09 f4       	brne	.+2      	; 0x844 <follow_path+0xb6>
     842:	80 c0       	rjmp	.+256    	; 0x944 <follow_path+0x1b6>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     844:	43 85       	ldd	r20, Z+11	; 0x0b
     846:	43 fd       	sbrc	r20, 3
     848:	77 c0       	rjmp	.+238    	; 0x938 <follow_path+0x1aa>
     84a:	6a 81       	ldd	r22, Y+2	; 0x02
     84c:	7b 81       	ldd	r23, Y+3	; 0x03
     84e:	9b 01       	movw	r18, r22
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     850:	ea 15       	cp	r30, r10
     852:	fb 05       	cpc	r31, r11
     854:	09 f0       	breq	.+2      	; 0x858 <follow_path+0xca>
     856:	62 c0       	rjmp	.+196    	; 0x91c <follow_path+0x18e>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
     858:	fb 01       	movw	r30, r22
     85a:	83 85       	ldd	r24, Z+11	; 0x0b
     85c:	81 11       	cpse	r24, r1
     85e:	7d c0       	rjmp	.+250    	; 0x95a <follow_path+0x1cc>
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
     860:	44 ff       	sbrs	r20, 4
     862:	7e c0       	rjmp	.+252    	; 0x960 <follow_path+0x1d2>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
     864:	d6 01       	movw	r26, r12
     866:	54 96       	adiw	r26, 0x14	; 20
     868:	8d 91       	ld	r24, X+
     86a:	9c 91       	ld	r25, X
     86c:	55 97       	sbiw	r26, 0x15	; 21
     86e:	a0 e0       	ldi	r26, 0x00	; 0
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	dc 01       	movw	r26, r24
     874:	99 27       	eor	r25, r25
     876:	88 27       	eor	r24, r24
     878:	f6 01       	movw	r30, r12
     87a:	42 8d       	ldd	r20, Z+26	; 0x1a
     87c:	53 8d       	ldd	r21, Z+27	; 0x1b
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	84 2b       	or	r24, r20
     884:	95 2b       	or	r25, r21
     886:	a6 2b       	or	r26, r22
     888:	b7 2b       	or	r27, r23
     88a:	8c 83       	std	Y+4, r24	; 0x04
     88c:	9d 83       	std	Y+5, r25	; 0x05
     88e:	ae 83       	std	Y+6, r26	; 0x06
     890:	bf 83       	std	Y+7, r27	; 0x07
     892:	ea 81       	ldd	r30, Y+2	; 0x02
     894:	fb 81       	ldd	r31, Y+3	; 0x03
     896:	df 01       	movw	r26, r30
     898:	cf 01       	movw	r24, r30
     89a:	0b 96       	adiw	r24, 0x0b	; 11

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     89c:	a8 17       	cp	r26, r24
     89e:	b9 07       	cpc	r27, r25
     8a0:	09 f4       	brne	.+2      	; 0x8a4 <follow_path+0x116>
     8a2:	9e cf       	rjmp	.-196    	; 0x7e0 <follow_path+0x52>
     8a4:	9d 92       	st	X+, r9
     8a6:	fa cf       	rjmp	.-12     	; 0x89c <follow_path+0x10e>
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     8a8:	8f 32       	cpi	r24, 0x2F	; 47
     8aa:	09 f4       	brne	.+2      	; 0x8ae <follow_path+0x120>
     8ac:	a6 cf       	rjmp	.-180    	; 0x7fa <follow_path+0x6c>
		if (c == '.' || i >= ni) {
     8ae:	8e 32       	cpi	r24, 0x2E	; 46
     8b0:	09 f4       	brne	.+2      	; 0x8b4 <follow_path+0x126>
     8b2:	59 c0       	rjmp	.+178    	; 0x966 <follow_path+0x1d8>
     8b4:	94 17       	cp	r25, r20
     8b6:	08 f0       	brcs	.+2      	; 0x8ba <follow_path+0x12c>
     8b8:	a0 cf       	rjmp	.-192    	; 0x7fa <follow_path+0x6c>
     8ba:	29 2f       	mov	r18, r25
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	01 e0       	ldi	r16, 0x01	; 1
     8c0:	09 0f       	add	r16, r25
		}
#ifdef _EXCVT
		if (c >= 0x80)					/* To upper extended char (SBCS) */
			c = cvt[c - 0x80];
#endif
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
     8c2:	6f e7       	ldi	r22, 0x7F	; 127
     8c4:	68 0f       	add	r22, r24
     8c6:	6f 31       	cpi	r22, 0x1F	; 31
     8c8:	20 f0       	brcs	.+8      	; 0x8d2 <follow_path+0x144>
     8ca:	60 e2       	ldi	r22, 0x20	; 32
     8cc:	68 0f       	add	r22, r24
     8ce:	6d 31       	cpi	r22, 0x1D	; 29
     8d0:	d0 f4       	brcc	.+52     	; 0x906 <follow_path+0x178>
     8d2:	64 2f       	mov	r22, r20
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	61 50       	subi	r22, 0x01	; 1
     8d8:	71 09       	sbc	r23, r1
     8da:	26 17       	cp	r18, r22
     8dc:	37 07       	cpc	r19, r23
     8de:	9c f4       	brge	.+38     	; 0x906 <follow_path+0x178>
			d = p[si++];				/* Get 2nd byte */
     8e0:	b7 01       	movw	r22, r14
     8e2:	65 0f       	add	r22, r21
     8e4:	71 1d       	adc	r23, r1
     8e6:	db 01       	movw	r26, r22
     8e8:	5c 91       	ld	r21, X
			sfn[i++] = c;
     8ea:	2e 0f       	add	r18, r30
     8ec:	3f 1f       	adc	r19, r31
     8ee:	d9 01       	movw	r26, r18
     8f0:	8c 93       	st	X, r24
			sfn[i++] = d;
     8f2:	9e 5f       	subi	r25, 0xFE	; 254
     8f4:	9f 01       	movw	r18, r30
     8f6:	20 0f       	add	r18, r16
     8f8:	31 1d       	adc	r19, r1
     8fa:	d9 01       	movw	r26, r18
     8fc:	5c 93       	st	X, r21
#ifdef _EXCVT
		if (c >= 0x80)					/* To upper extended char (SBCS) */
			c = cvt[c - 0x80];
#endif
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
     8fe:	52 e0       	ldi	r21, 0x02	; 2
     900:	51 0f       	add	r21, r17

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     902:	15 2f       	mov	r17, r21
     904:	70 cf       	rjmp	.-288    	; 0x7e6 <follow_path+0x58>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     906:	9f e9       	ldi	r25, 0x9F	; 159
     908:	98 0f       	add	r25, r24
     90a:	9a 31       	cpi	r25, 0x1A	; 26
     90c:	08 f4       	brcc	.+2      	; 0x910 <follow_path+0x182>
     90e:	80 52       	subi	r24, 0x20	; 32
			sfn[i++] = c;
     910:	2e 0f       	add	r18, r30
     912:	3f 1f       	adc	r19, r31
     914:	d9 01       	movw	r26, r18
     916:	8c 93       	st	X, r24
     918:	90 2f       	mov	r25, r16
     91a:	f3 cf       	rjmp	.-26     	; 0x902 <follow_path+0x174>
/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
     91c:	81 91       	ld	r24, Z+
     91e:	d9 01       	movw	r26, r18
     920:	5d 91       	ld	r21, X+
     922:	9d 01       	movw	r18, r26
     924:	08 2e       	mov	r0, r24
     926:	00 0c       	add	r0, r0
     928:	99 0b       	sbc	r25, r25
     92a:	85 1b       	sub	r24, r21
     92c:	91 09       	sbc	r25, r1
     92e:	57 fd       	sbrc	r21, 7
     930:	93 95       	inc	r25
     932:	89 2b       	or	r24, r25
     934:	09 f4       	brne	.+2      	; 0x938 <follow_path+0x1aa>
     936:	8c cf       	rjmp	.-232    	; 0x850 <follow_path+0xc2>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
     938:	ce 01       	movw	r24, r28
     93a:	80 de       	rcall	.-768    	; 0x63c <dir_next>
     93c:	67 cf       	rjmp	.-306    	; 0x80c <follow_path+0x7e>
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
     93e:	83 30       	cpi	r24, 0x03	; 3
     940:	91 05       	cpc	r25, r1
     942:	b9 f4       	brne	.+46     	; 0x972 <follow_path+0x1e4>
     944:	ea 81       	ldd	r30, Y+2	; 0x02
     946:	fb 81       	ldd	r31, Y+3	; 0x03
     948:	83 85       	ldd	r24, Z+11	; 0x0b
     94a:	88 23       	and	r24, r24
     94c:	49 f0       	breq	.+18     	; 0x960 <follow_path+0x1d2>
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0f c0       	rjmp	.+30     	; 0x972 <follow_path+0x1e4>
	if (res != FR_OK) return res;

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	0c c0       	rjmp	.+24     	; 0x972 <follow_path+0x1e4>
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	09 c0       	rjmp	.+18     	; 0x972 <follow_path+0x1e4>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
     960:	84 e0       	ldi	r24, 0x04	; 4
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	06 c0       	rjmp	.+12     	; 0x972 <follow_path+0x1e4>
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
     966:	48 30       	cpi	r20, 0x08	; 8
     968:	09 f0       	breq	.+2      	; 0x96c <follow_path+0x1de>
     96a:	47 cf       	rjmp	.-370    	; 0x7fa <follow_path+0x6c>
			i = 8; ni = 11;
     96c:	98 e0       	ldi	r25, 0x08	; 8
     96e:	4b e0       	ldi	r20, 0x0B	; 11
     970:	c8 cf       	rjmp	.-112    	; 0x902 <follow_path+0x174>
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	eb e0       	ldi	r30, 0x0B	; 11
     978:	54 c7       	rjmp	.+3752   	; 0x1822 <__epilogue_restores__+0xe>

0000097a <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
     97a:	a4 e2       	ldi	r26, 0x24	; 36
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	e2 ec       	ldi	r30, 0xC2	; 194
     980:	f4 e0       	ldi	r31, 0x04	; 4
     982:	2c c7       	rjmp	.+3672   	; 0x17dc <__prologue_saves__>
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
     984:	10 92 75 00 	sts	0x0075, r1
     988:	10 92 74 00 	sts	0x0074, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	09 f4       	brne	.+2      	; 0x992 <pf_mount+0x18>
     990:	cc c0       	rjmp	.+408    	; 0xb2a <pf_mount+0x1b0>
     992:	1c 01       	movw	r2, r24

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
     994:	20 d4       	rcall	.+2112   	; 0x11d6 <disk_initialize>
     996:	80 fd       	sbrc	r24, 0
     998:	cb c0       	rjmp	.+406    	; 0xb30 <pf_mount+0x1b6>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	ba 01       	movw	r22, r20
     9a0:	ce 01       	movw	r24, r28
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	b8 de       	rcall	.-656    	; 0x716 <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
     9a6:	81 30       	cpi	r24, 0x01	; 1
     9a8:	f9 f4       	brne	.+62     	; 0x9e8 <pf_mount+0x6e>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
     9aa:	00 e1       	ldi	r16, 0x10	; 16
     9ac:	10 e0       	ldi	r17, 0x00	; 0
     9ae:	2e eb       	ldi	r18, 0xBE	; 190
     9b0:	31 e0       	ldi	r19, 0x01	; 1
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	ba 01       	movw	r22, r20
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	9a d4       	rcall	.+2356   	; 0x12f2 <disk_readp>
     9be:	89 2b       	or	r24, r25
     9c0:	19 f0       	breq	.+6      	; 0x9c8 <pf_mount+0x4e>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	b6 c0       	rjmp	.+364    	; 0xb34 <pf_mount+0x1ba>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
     9c8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ca:	81 11       	cpse	r24, r1
     9cc:	03 c0       	rjmp	.+6      	; 0x9d4 <pf_mount+0x5a>
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     9ce:	87 e0       	ldi	r24, 0x07	; 7
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	b0 c0       	rjmp	.+352    	; 0xb34 <pf_mount+0x1ba>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
     9d4:	49 84       	ldd	r4, Y+9	; 0x09
     9d6:	5a 84       	ldd	r5, Y+10	; 0x0a
     9d8:	6b 84       	ldd	r6, Y+11	; 0x0b
     9da:	7c 84       	ldd	r7, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
     9dc:	b3 01       	movw	r22, r6
     9de:	a2 01       	movw	r20, r4
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	98 de       	rcall	.-720    	; 0x716 <check_fs>
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <pf_mount+0x74>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
     9e8:	41 2c       	mov	r4, r1
     9ea:	51 2c       	mov	r5, r1
     9ec:	32 01       	movw	r6, r4
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
				fmt = check_fs(buf, bsect);	/* Check the partition */
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
     9ee:	83 30       	cpi	r24, 0x03	; 3
     9f0:	41 f3       	breq	.-48     	; 0x9c2 <pf_mount+0x48>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
     9f2:	81 11       	cpse	r24, r1
     9f4:	ec cf       	rjmp	.-40     	; 0x9ce <pf_mount+0x54>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
     9f6:	04 e2       	ldi	r16, 0x24	; 36
     9f8:	10 e0       	ldi	r17, 0x00	; 0
     9fa:	2d e0       	ldi	r18, 0x0D	; 13
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	b3 01       	movw	r22, r6
     a00:	a2 01       	movw	r20, r4
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	75 d4       	rcall	.+2282   	; 0x12f2 <disk_readp>
     a08:	89 2b       	or	r24, r25
     a0a:	d9 f6       	brne	.-74     	; 0x9c2 <pf_mount+0x48>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
     a0c:	6a 85       	ldd	r22, Y+10	; 0x0a
     a0e:	7b 85       	ldd	r23, Y+11	; 0x0b
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
     a14:	61 15       	cp	r22, r1
     a16:	71 05       	cpc	r23, r1
     a18:	81 05       	cpc	r24, r1
     a1a:	91 05       	cpc	r25, r1
     a1c:	21 f4       	brne	.+8      	; 0xa26 <pf_mount+0xac>
     a1e:	68 8d       	ldd	r22, Y+24	; 0x18
     a20:	79 8d       	ldd	r23, Y+25	; 0x19
     a22:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a24:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
     a26:	2c 81       	ldd	r18, Y+4	; 0x04
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	bb d6       	rcall	.+3446   	; 0x17a6 <__umulsidi3>
     a30:	49 01       	movw	r8, r18
     a32:	5a 01       	movw	r10, r20
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
     a34:	0a 81       	ldd	r16, Y+2	; 0x02
     a36:	1b 81       	ldd	r17, Y+3	; 0x03
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	73 01       	movw	r14, r6
     a3e:	62 01       	movw	r12, r4
     a40:	c0 0e       	add	r12, r16
     a42:	d1 1e       	adc	r13, r17
     a44:	e2 1e       	adc	r14, r18
     a46:	f3 1e       	adc	r15, r19
     a48:	f1 01       	movw	r30, r2
     a4a:	c2 86       	std	Z+10, r12	; 0x0a
     a4c:	d3 86       	std	Z+11, r13	; 0x0b
     a4e:	e4 86       	std	Z+12, r14	; 0x0c
     a50:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
     a52:	49 81       	ldd	r20, Y+1	; 0x01
     a54:	42 83       	std	Z+2, r20	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
     a56:	4d 80       	ldd	r4, Y+5	; 0x05
     a58:	5e 80       	ldd	r5, Y+6	; 0x06
     a5a:	55 82       	std	Z+5, r5	; 0x05
     a5c:	44 82       	std	Z+4, r4	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
     a5e:	8f 81       	ldd	r24, Y+7	; 0x07
     a60:	98 85       	ldd	r25, Y+8	; 0x08
     a62:	a0 e0       	ldi	r26, 0x00	; 0
     a64:	b0 e0       	ldi	r27, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	a1 05       	cpc	r26, r1
     a6a:	b1 05       	cpc	r27, r1
     a6c:	21 f4       	brne	.+8      	; 0xa76 <pf_mount+0xfc>
     a6e:	8c 89       	ldd	r24, Y+20	; 0x14
     a70:	9d 89       	ldd	r25, Y+21	; 0x15
     a72:	ae 89       	ldd	r26, Y+22	; 0x16
     a74:	bf 89       	ldd	r27, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
     a76:	54 e0       	ldi	r21, 0x04	; 4
     a78:	56 94       	lsr	r5
     a7a:	47 94       	ror	r4
     a7c:	5a 95       	dec	r21
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <pf_mount+0xfe>
     a80:	61 2c       	mov	r6, r1
     a82:	71 2c       	mov	r7, r1
     a84:	80 1b       	sub	r24, r16
     a86:	91 0b       	sbc	r25, r17
     a88:	a2 0b       	sbc	r26, r18
     a8a:	b3 0b       	sbc	r27, r19
     a8c:	88 19       	sub	r24, r8
     a8e:	99 09       	sbc	r25, r9
     a90:	aa 09       	sbc	r26, r10
     a92:	bb 09       	sbc	r27, r11
     a94:	bc 01       	movw	r22, r24
     a96:	cd 01       	movw	r24, r26
     a98:	64 19       	sub	r22, r4
     a9a:	75 09       	sbc	r23, r5
     a9c:	86 09       	sbc	r24, r6
     a9e:	97 09       	sbc	r25, r7
		) / fs->csize + 2;
     aa0:	24 2f       	mov	r18, r20
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	5a d6       	rcall	.+3252   	; 0x175e <__udivmodsi4>
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
     aaa:	da 01       	movw	r26, r20
     aac:	c9 01       	movw	r24, r18
     aae:	02 96       	adiw	r24, 0x02	; 2
     ab0:	a1 1d       	adc	r26, r1
     ab2:	b1 1d       	adc	r27, r1
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
     ab4:	f1 01       	movw	r30, r2
     ab6:	86 83       	std	Z+6, r24	; 0x06
     ab8:	97 83       	std	Z+7, r25	; 0x07
     aba:	a0 87       	std	Z+8, r26	; 0x08
     abc:	b1 87       	std	Z+9, r27	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
     abe:	87 3f       	cpi	r24, 0xF7	; 247
     ac0:	ff e0       	ldi	r31, 0x0F	; 15
     ac2:	9f 07       	cpc	r25, r31
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	38 f0       	brcs	.+14     	; 0xad8 <pf_mount+0x15e>
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
     aca:	87 3f       	cpi	r24, 0xF7	; 247
     acc:	9f 4f       	sbci	r25, 0xFF	; 255
     ace:	a1 05       	cpc	r26, r1
     ad0:	b1 05       	cpc	r27, r1
     ad2:	20 f0       	brcs	.+8      	; 0xadc <pf_mount+0x162>
#if _FS_FAT32
		fmt = FS_FAT32;
     ad4:	83 e0       	ldi	r24, 0x03	; 3
     ad6:	03 c0       	rjmp	.+6      	; 0xade <pf_mount+0x164>
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
#if _FS_FAT12
		fmt = FS_FAT12;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	01 c0       	rjmp	.+2      	; 0xade <pf_mount+0x164>
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
     adc:	82 e0       	ldi	r24, 0x02	; 2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
     ade:	f1 01       	movw	r30, r2
     ae0:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
     ae2:	83 30       	cpi	r24, 0x03	; 3
     ae4:	29 f4       	brne	.+10     	; 0xaf0 <pf_mount+0x176>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
     ae6:	88 a1       	ldd	r24, Y+32	; 0x20
     ae8:	99 a1       	ldd	r25, Y+33	; 0x21
     aea:	aa a1       	ldd	r26, Y+34	; 0x22
     aec:	bb a1       	ldd	r27, Y+35	; 0x23
     aee:	07 c0       	rjmp	.+14     	; 0xafe <pf_mount+0x184>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
     af0:	d5 01       	movw	r26, r10
     af2:	c4 01       	movw	r24, r8
     af4:	8c 0d       	add	r24, r12
     af6:	9d 1d       	adc	r25, r13
     af8:	ae 1d       	adc	r26, r14
     afa:	bf 1d       	adc	r27, r15
     afc:	f1 01       	movw	r30, r2
     afe:	86 87       	std	Z+14, r24	; 0x0e
     b00:	97 87       	std	Z+15, r25	; 0x0f
     b02:	a0 8b       	std	Z+16, r26	; 0x10
     b04:	b1 8b       	std	Z+17, r27	; 0x11
     b06:	4c 0c       	add	r4, r12
     b08:	5d 1c       	adc	r5, r13
     b0a:	6e 1c       	adc	r6, r14
     b0c:	7f 1c       	adc	r7, r15
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
     b0e:	84 0c       	add	r8, r4
     b10:	95 1c       	adc	r9, r5
     b12:	a6 1c       	adc	r10, r6
     b14:	b7 1c       	adc	r11, r7
     b16:	f1 01       	movw	r30, r2
     b18:	82 8a       	std	Z+18, r8	; 0x12
     b1a:	93 8a       	std	Z+19, r9	; 0x13
     b1c:	a4 8a       	std	Z+20, r10	; 0x14
     b1e:	b5 8a       	std	Z+21, r11	; 0x15

	fs->flag = 0;
     b20:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
     b22:	30 92 75 00 	sts	0x0075, r3
     b26:	20 92 74 00 	sts	0x0074, r2
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
	if (!fs) return FR_OK;				/* Unregister fs object */
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <pf_mount+0x1ba>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
		return FR_NOT_READY;
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	90 e0       	ldi	r25, 0x00	; 0

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
     b34:	a4 96       	adiw	r28, 0x24	; 36
     b36:	e2 e1       	ldi	r30, 0x12	; 18
     b38:	6d c6       	rjmp	.+3290   	; 0x1814 <__epilogue_restores__>

00000b3a <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
     b3a:	ac e3       	ldi	r26, 0x3C	; 60
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	e2 ea       	ldi	r30, 0xA2	; 162
     b40:	f5 e0       	ldi	r31, 0x05	; 5
     b42:	5a c6       	rjmp	.+3252   	; 0x17f8 <__prologue_saves__+0x1c>
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
     b44:	00 91 74 00 	lds	r16, 0x0074
     b48:	10 91 75 00 	lds	r17, 0x0075


	if (!fs)						/* Check file system */
     b4c:	01 15       	cp	r16, r1
     b4e:	11 05       	cpc	r17, r1
     b50:	c1 f1       	breq	.+112    	; 0xbc2 <pf_open+0x88>
     b52:	ac 01       	movw	r20, r24
		return FR_NOT_ENABLED;

	fs->flag = 0;
     b54:	f8 01       	movw	r30, r16
     b56:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
     b58:	ce 01       	movw	r24, r28
     b5a:	c1 96       	adiw	r24, 0x31	; 49
     b5c:	9c a3       	std	Y+36, r25	; 0x24
     b5e:	8b a3       	std	Y+35, r24	; 0x23
	res = follow_path(&dj, dir, path);	/* Follow the file path */
     b60:	be 01       	movw	r22, r28
     b62:	6f 5f       	subi	r22, 0xFF	; 255
     b64:	7f 4f       	sbci	r23, 0xFF	; 255
     b66:	40 97       	sbiw	r24, 0x10	; 16
     b68:	12 de       	rcall	.-988    	; 0x78e <follow_path>
	if (res != FR_OK) return res;		/* Follow failed */
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	71 f5       	brne	.+92     	; 0xbca <pf_open+0x90>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	88 23       	and	r24, r24
     b72:	49 f1       	breq	.+82     	; 0xbc6 <pf_open+0x8c>
     b74:	8c 85       	ldd	r24, Y+12	; 0x0c
     b76:	84 fd       	sbrc	r24, 4
     b78:	26 c0       	rjmp	.+76     	; 0xbc6 <pf_open+0x8c>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
     b7a:	8d 89       	ldd	r24, Y+21	; 0x15
     b7c:	9e 89       	ldd	r25, Y+22	; 0x16
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	dc 01       	movw	r26, r24
     b84:	99 27       	eor	r25, r25
     b86:	88 27       	eor	r24, r24
     b88:	4b 8d       	ldd	r20, Y+27	; 0x1b
     b8a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     b8c:	60 e0       	ldi	r22, 0x00	; 0
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	84 2b       	or	r24, r20
     b92:	95 2b       	or	r25, r21
     b94:	a6 2b       	or	r26, r22
     b96:	b7 2b       	or	r27, r23
     b98:	f8 01       	movw	r30, r16
     b9a:	86 8f       	std	Z+30, r24	; 0x1e
     b9c:	97 8f       	std	Z+31, r25	; 0x1f
     b9e:	a0 a3       	std	Z+32, r26	; 0x20
     ba0:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
     ba2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ba4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ba6:	af 8d       	ldd	r26, Y+31	; 0x1f
     ba8:	b8 a1       	ldd	r27, Y+32	; 0x20
     baa:	82 8f       	std	Z+26, r24	; 0x1a
     bac:	93 8f       	std	Z+27, r25	; 0x1b
     bae:	a4 8f       	std	Z+28, r26	; 0x1c
     bb0:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
     bb2:	16 8a       	std	Z+22, r1	; 0x16
     bb4:	17 8a       	std	Z+23, r1	; 0x17
     bb6:	10 8e       	std	Z+24, r1	; 0x18
     bb8:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	81 83       	std	Z+1, r24	; 0x01

	return FR_OK;
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	03 c0       	rjmp	.+6      	; 0xbc8 <pf_open+0x8e>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
		return FR_NOT_ENABLED;
     bc2:	86 e0       	ldi	r24, 0x06	; 6
     bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <pf_open+0x8e>
	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	90 e0       	ldi	r25, 0x00	; 0
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;

	return FR_OK;
}
     bca:	ec 96       	adiw	r28, 0x3c	; 60
     bcc:	e4 e0       	ldi	r30, 0x04	; 4
     bce:	30 c6       	rjmp	.+3168   	; 0x1830 <__epilogue_restores__+0x1c>

00000bd0 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	ed ee       	ldi	r30, 0xED	; 237
     bd6:	f5 e0       	ldi	r31, 0x05	; 5
     bd8:	03 c6       	rjmp	.+3078   	; 0x17e0 <__prologue_saves__+0x4>
     bda:	4c 01       	movw	r8, r24
     bdc:	6b 01       	movw	r12, r22
     bde:	5a 01       	movw	r10, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
     be0:	c0 91 74 00 	lds	r28, 0x0074
     be4:	d0 91 75 00 	lds	r29, 0x0075


	*br = 0;
     be8:	fa 01       	movw	r30, r20
     bea:	11 82       	std	Z+1, r1	; 0x01
     bec:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     bee:	20 97       	sbiw	r28, 0x00	; 0
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <pf_read+0x24>
     bf2:	a0 c0       	rjmp	.+320    	; 0xd34 <pf_read+0x164>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	80 ff       	sbrs	r24, 0
     bf8:	a0 c0       	rjmp	.+320    	; 0xd3a <pf_read+0x16a>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
     bfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bfc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bfe:	ac 8d       	ldd	r26, Y+28	; 0x1c
     c00:	bd 8d       	ldd	r27, Y+29	; 0x1d
     c02:	4e 89       	ldd	r20, Y+22	; 0x16
     c04:	5f 89       	ldd	r21, Y+23	; 0x17
     c06:	68 8d       	ldd	r22, Y+24	; 0x18
     c08:	79 8d       	ldd	r23, Y+25	; 0x19
     c0a:	84 1b       	sub	r24, r20
     c0c:	95 0b       	sbc	r25, r21
     c0e:	a6 0b       	sbc	r26, r22
     c10:	b7 0b       	sbc	r27, r23
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
     c12:	a6 01       	movw	r20, r12
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	84 17       	cp	r24, r20
     c1a:	95 07       	cpc	r25, r21
     c1c:	a6 07       	cpc	r26, r22
     c1e:	b7 07       	cpc	r27, r23
     c20:	08 f4       	brcc	.+2      	; 0xc24 <pf_read+0x54>
     c22:	6c 01       	movw	r12, r24
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
     c24:	34 01       	movw	r6, r8
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
     c26:	41 2c       	mov	r4, r1
     c28:	32 e0       	ldi	r19, 0x02	; 2
     c2a:	53 2e       	mov	r5, r19
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
     c2c:	c1 14       	cp	r12, r1
     c2e:	d1 04       	cpc	r13, r1
     c30:	09 f4       	brne	.+2      	; 0xc34 <pf_read+0x64>
     c32:	79 c0       	rjmp	.+242    	; 0xd26 <pf_read+0x156>
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
     c34:	8e 89       	ldd	r24, Y+22	; 0x16
     c36:	9f 89       	ldd	r25, Y+23	; 0x17
     c38:	a8 8d       	ldd	r26, Y+24	; 0x18
     c3a:	b9 8d       	ldd	r27, Y+25	; 0x19
     c3c:	ac 01       	movw	r20, r24
     c3e:	bd 01       	movw	r22, r26
     c40:	51 70       	andi	r21, 0x01	; 1
     c42:	66 27       	eor	r22, r22
     c44:	77 27       	eor	r23, r23
     c46:	45 2b       	or	r20, r21
     c48:	46 2b       	or	r20, r22
     c4a:	47 2b       	or	r20, r23
     c4c:	d1 f5       	brne	.+116    	; 0xcc2 <pf_read+0xf2>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
     c4e:	fa 80       	ldd	r15, Y+2	; 0x02
     c50:	fa 94       	dec	r15
     c52:	ac 01       	movw	r20, r24
     c54:	bd 01       	movw	r22, r26
     c56:	29 e0       	ldi	r18, 0x09	; 9
     c58:	76 95       	lsr	r23
     c5a:	67 95       	ror	r22
     c5c:	57 95       	ror	r21
     c5e:	47 95       	ror	r20
     c60:	2a 95       	dec	r18
     c62:	d1 f7       	brne	.-12     	; 0xc58 <pf_read+0x88>
     c64:	f4 22       	and	r15, r20
			if (!cs) {								/* On the cluster boundary? */
     c66:	c1 f4       	brne	.+48     	; 0xc98 <pf_read+0xc8>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
					fs->org_clust : get_fat(fs->curr_clust);
     c68:	89 2b       	or	r24, r25
     c6a:	8a 2b       	or	r24, r26
     c6c:	8b 2b       	or	r24, r27
     c6e:	29 f4       	brne	.+10     	; 0xc7a <pf_read+0xaa>
     c70:	6e 8d       	ldd	r22, Y+30	; 0x1e
     c72:	7f 8d       	ldd	r23, Y+31	; 0x1f
     c74:	88 a1       	ldd	r24, Y+32	; 0x20
     c76:	99 a1       	ldd	r25, Y+33	; 0x21
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <pf_read+0xb4>
     c7a:	6a a1       	ldd	r22, Y+34	; 0x22
     c7c:	7b a1       	ldd	r23, Y+35	; 0x23
     c7e:	8c a1       	ldd	r24, Y+36	; 0x24
     c80:	9d a1       	ldd	r25, Y+37	; 0x25
     c82:	04 dc       	rcall	.-2040   	; 0x48c <get_fat>
				if (clst <= 1) goto fr_abort;
     c84:	62 30       	cpi	r22, 0x02	; 2
     c86:	71 05       	cpc	r23, r1
     c88:	81 05       	cpc	r24, r1
     c8a:	91 05       	cpc	r25, r1
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <pf_read+0xc0>
     c8e:	4e c0       	rjmp	.+156    	; 0xd2c <pf_read+0x15c>
				fs->curr_clust = clst;				/* Update current cluster */
     c90:	6a a3       	std	Y+34, r22	; 0x22
     c92:	7b a3       	std	Y+35, r23	; 0x23
     c94:	8c a3       	std	Y+36, r24	; 0x24
     c96:	9d a3       	std	Y+37, r25	; 0x25
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
     c98:	6a a1       	ldd	r22, Y+34	; 0x22
     c9a:	7b a1       	ldd	r23, Y+35	; 0x23
     c9c:	8c a1       	ldd	r24, Y+36	; 0x24
     c9e:	9d a1       	ldd	r25, Y+37	; 0x25
     ca0:	6b db       	rcall	.-2346   	; 0x378 <clust2sect>
			if (!sect) goto fr_abort;
     ca2:	61 15       	cp	r22, r1
     ca4:	71 05       	cpc	r23, r1
     ca6:	81 05       	cpc	r24, r1
     ca8:	91 05       	cpc	r25, r1
     caa:	09 f4       	brne	.+2      	; 0xcae <pf_read+0xde>
     cac:	3f c0       	rjmp	.+126    	; 0xd2c <pf_read+0x15c>
			fs->dsect = sect + cs;
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	8f 0d       	add	r24, r15
     cb4:	91 1d       	adc	r25, r1
     cb6:	a1 1d       	adc	r26, r1
     cb8:	b1 1d       	adc	r27, r1
     cba:	8e a3       	std	Y+38, r24	; 0x26
     cbc:	9f a3       	std	Y+39, r25	; 0x27
     cbe:	a8 a7       	std	Y+40, r26	; 0x28
     cc0:	b9 a7       	std	Y+41, r27	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
     cc2:	2e 89       	ldd	r18, Y+22	; 0x16
     cc4:	3f 89       	ldd	r19, Y+23	; 0x17
     cc6:	31 70       	andi	r19, 0x01	; 1
     cc8:	c2 01       	movw	r24, r4
     cca:	82 1b       	sub	r24, r18
     ccc:	93 0b       	sbc	r25, r19
     cce:	76 01       	movw	r14, r12
     cd0:	8c 15       	cp	r24, r12
     cd2:	9d 05       	cpc	r25, r13
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <pf_read+0x108>
     cd6:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
     cd8:	4e a1       	ldd	r20, Y+38	; 0x26
     cda:	5f a1       	ldd	r21, Y+39	; 0x27
     cdc:	68 a5       	ldd	r22, Y+40	; 0x28
     cde:	79 a5       	ldd	r23, Y+41	; 0x29
     ce0:	81 14       	cp	r8, r1
     ce2:	91 04       	cpc	r9, r1
     ce4:	11 f0       	breq	.+4      	; 0xcea <pf_read+0x11a>
     ce6:	c3 01       	movw	r24, r6
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <pf_read+0x11e>
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	87 01       	movw	r16, r14
     cf0:	00 d3       	rcall	.+1536   	; 0x12f2 <disk_readp>
		if (dr) goto fr_abort;
     cf2:	89 2b       	or	r24, r25
     cf4:	d9 f4       	brne	.+54     	; 0xd2c <pf_read+0x15c>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
     cf6:	8e 89       	ldd	r24, Y+22	; 0x16
     cf8:	9f 89       	ldd	r25, Y+23	; 0x17
     cfa:	a8 8d       	ldd	r26, Y+24	; 0x18
     cfc:	b9 8d       	ldd	r27, Y+25	; 0x19
     cfe:	8e 0d       	add	r24, r14
     d00:	9f 1d       	adc	r25, r15
     d02:	a1 1d       	adc	r26, r1
     d04:	b1 1d       	adc	r27, r1
     d06:	8e 8b       	std	Y+22, r24	; 0x16
     d08:	9f 8b       	std	Y+23, r25	; 0x17
     d0a:	a8 8f       	std	Y+24, r26	; 0x18
     d0c:	b9 8f       	std	Y+25, r27	; 0x19
     d0e:	6e 0c       	add	r6, r14
     d10:	7f 1c       	adc	r7, r15
		btr -= rcnt; *br += rcnt;
     d12:	ce 18       	sub	r12, r14
     d14:	df 08       	sbc	r13, r15
     d16:	f5 01       	movw	r30, r10
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	e8 0e       	add	r14, r24
     d1e:	f9 1e       	adc	r15, r25
     d20:	f1 82       	std	Z+1, r15	; 0x01
     d22:	e0 82       	st	Z, r14
     d24:	83 cf       	rjmp	.-250    	; 0xc2c <pf_read+0x5c>
	}

	return FR_OK;
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	09 c0       	rjmp	.+18     	; 0xd3e <pf_read+0x16e>

fr_abort:
	fs->flag = 0;
     d2c:	19 82       	std	Y+1, r1	; 0x01
	return FR_DISK_ERR;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <pf_read+0x16e>
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     d34:	86 e0       	ldi	r24, 0x06	; 6
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <pf_read+0x16e>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;
     d3a:	85 e0       	ldi	r24, 0x05	; 5
     d3c:	90 e0       	ldi	r25, 0x00	; 0
	return FR_OK;

fr_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	e0 e1       	ldi	r30, 0x10	; 16
     d44:	69 c5       	rjmp	.+2770   	; 0x1818 <__epilogue_restores__+0x4>

00000d46 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     d46:	a4 e0       	ldi	r26, 0x04	; 4
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 ea       	ldi	r30, 0xA8	; 168
     d4c:	f6 e0       	ldi	r31, 0x06	; 6
     d4e:	48 c5       	rjmp	.+2704   	; 0x17e0 <__prologue_saves__+0x4>
     d50:	36 2f       	mov	r19, r22
     d52:	27 2f       	mov	r18, r23
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     d54:	00 91 74 00 	lds	r16, 0x0074
     d58:	10 91 75 00 	lds	r17, 0x0075


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     d5c:	01 15       	cp	r16, r1
     d5e:	11 05       	cpc	r17, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <pf_lseek+0x1e>
     d62:	e2 c0       	rjmp	.+452    	; 0xf28 <pf_lseek+0x1e2>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     d64:	d8 01       	movw	r26, r16
     d66:	11 96       	adiw	r26, 0x01	; 1
     d68:	4c 91       	ld	r20, X
     d6a:	11 97       	sbiw	r26, 0x01	; 1
     d6c:	40 ff       	sbrs	r20, 0
     d6e:	df c0       	rjmp	.+446    	; 0xf2e <pf_lseek+0x1e8>
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
     d70:	5a 96       	adiw	r26, 0x1a	; 26
     d72:	4d 91       	ld	r20, X+
     d74:	5d 91       	ld	r21, X+
     d76:	6d 91       	ld	r22, X+
     d78:	7c 91       	ld	r23, X
     d7a:	5d 97       	sbiw	r26, 0x1d	; 29
     d7c:	c3 2e       	mov	r12, r19
     d7e:	d2 2e       	mov	r13, r18
     d80:	7c 01       	movw	r14, r24
     d82:	4c 15       	cp	r20, r12
     d84:	5d 05       	cpc	r21, r13
     d86:	6e 05       	cpc	r22, r14
     d88:	7f 05       	cpc	r23, r15
     d8a:	10 f4       	brcc	.+4      	; 0xd90 <pf_lseek+0x4a>
     d8c:	6a 01       	movw	r12, r20
     d8e:	7b 01       	movw	r14, r22
	ifptr = fs->fptr;
     d90:	f8 01       	movw	r30, r16
     d92:	46 88       	ldd	r4, Z+22	; 0x16
     d94:	57 88       	ldd	r5, Z+23	; 0x17
     d96:	60 8c       	ldd	r6, Z+24	; 0x18
     d98:	71 8c       	ldd	r7, Z+25	; 0x19
	fs->fptr = 0;
     d9a:	16 8a       	std	Z+22, r1	; 0x16
     d9c:	17 8a       	std	Z+23, r1	; 0x17
     d9e:	10 8e       	std	Z+24, r1	; 0x18
     da0:	11 8e       	std	Z+25, r1	; 0x19
	if (ofs > 0) {
     da2:	c1 14       	cp	r12, r1
     da4:	d1 04       	cpc	r13, r1
     da6:	e1 04       	cpc	r14, r1
     da8:	f1 04       	cpc	r15, r1
     daa:	09 f4       	brne	.+2      	; 0xdae <pf_lseek+0x68>
     dac:	c3 c0       	rjmp	.+390    	; 0xf34 <pf_lseek+0x1ee>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     dae:	82 80       	ldd	r8, Z+2	; 0x02
     db0:	91 2c       	mov	r9, r1
     db2:	a1 2c       	mov	r10, r1
     db4:	b1 2c       	mov	r11, r1
     db6:	39 e0       	ldi	r19, 0x09	; 9
     db8:	88 0c       	add	r8, r8
     dba:	99 1c       	adc	r9, r9
     dbc:	aa 1c       	adc	r10, r10
     dbe:	bb 1c       	adc	r11, r11
     dc0:	3a 95       	dec	r19
     dc2:	d1 f7       	brne	.-12     	; 0xdb8 <pf_lseek+0x72>
		if (ifptr > 0 &&
     dc4:	41 14       	cp	r4, r1
     dc6:	51 04       	cpc	r5, r1
     dc8:	61 04       	cpc	r6, r1
     dca:	71 04       	cpc	r7, r1
     dcc:	e9 f1       	breq	.+122    	; 0xe48 <pf_lseek+0x102>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
     dce:	b1 e0       	ldi	r27, 0x01	; 1
     dd0:	4b 1a       	sub	r4, r27
     dd2:	51 08       	sbc	r5, r1
     dd4:	61 08       	sbc	r6, r1
     dd6:	71 08       	sbc	r7, r1
     dd8:	c7 01       	movw	r24, r14
     dda:	b6 01       	movw	r22, r12
     ddc:	61 50       	subi	r22, 0x01	; 1
     dde:	71 09       	sbc	r23, r1
     de0:	81 09       	sbc	r24, r1
     de2:	91 09       	sbc	r25, r1
     de4:	a5 01       	movw	r20, r10
     de6:	94 01       	movw	r18, r8
     de8:	ba d4       	rcall	.+2420   	; 0x175e <__udivmodsi4>
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	3a 83       	std	Y+2, r19	; 0x02
     dee:	4b 83       	std	Y+3, r20	; 0x03
     df0:	5c 83       	std	Y+4, r21	; 0x04
     df2:	c3 01       	movw	r24, r6
     df4:	b2 01       	movw	r22, r4
     df6:	a5 01       	movw	r20, r10
     df8:	94 01       	movw	r18, r8
     dfa:	b1 d4       	rcall	.+2402   	; 0x175e <__udivmodsi4>
	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
	fs->fptr = 0;
	if (ofs > 0) {
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
		if (ifptr > 0 &&
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	ab 81       	ldd	r26, Y+3	; 0x03
     e02:	bc 81       	ldd	r27, Y+4	; 0x04
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	a4 07       	cpc	r26, r20
     e0a:	b5 07       	cpc	r27, r21
     e0c:	e8 f0       	brcs	.+58     	; 0xe48 <pf_lseek+0x102>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     e0e:	88 27       	eor	r24, r24
     e10:	99 27       	eor	r25, r25
     e12:	dc 01       	movw	r26, r24
     e14:	88 19       	sub	r24, r8
     e16:	99 09       	sbc	r25, r9
     e18:	aa 09       	sbc	r26, r10
     e1a:	bb 09       	sbc	r27, r11
     e1c:	48 22       	and	r4, r24
     e1e:	59 22       	and	r5, r25
     e20:	6a 22       	and	r6, r26
     e22:	7b 22       	and	r7, r27
     e24:	d8 01       	movw	r26, r16
     e26:	56 96       	adiw	r26, 0x16	; 22
     e28:	4d 92       	st	X+, r4
     e2a:	5d 92       	st	X+, r5
     e2c:	6d 92       	st	X+, r6
     e2e:	7c 92       	st	X, r7
     e30:	59 97       	sbiw	r26, 0x19	; 25
			ofs -= fs->fptr;
     e32:	c4 18       	sub	r12, r4
     e34:	d5 08       	sbc	r13, r5
     e36:	e6 08       	sbc	r14, r6
     e38:	f7 08       	sbc	r15, r7
			clst = fs->curr_clust;
     e3a:	92 96       	adiw	r26, 0x22	; 34
     e3c:	6d 91       	ld	r22, X+
     e3e:	7d 91       	ld	r23, X+
     e40:	8d 91       	ld	r24, X+
     e42:	9c 91       	ld	r25, X
     e44:	95 97       	sbiw	r26, 0x25	; 37
     e46:	30 c0       	rjmp	.+96     	; 0xea8 <pf_lseek+0x162>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     e48:	f8 01       	movw	r30, r16
     e4a:	66 8d       	ldd	r22, Z+30	; 0x1e
     e4c:	77 8d       	ldd	r23, Z+31	; 0x1f
     e4e:	80 a1       	ldd	r24, Z+32	; 0x20
     e50:	91 a1       	ldd	r25, Z+33	; 0x21
			fs->curr_clust = clst;
     e52:	62 a3       	std	Z+34, r22	; 0x22
     e54:	73 a3       	std	Z+35, r23	; 0x23
     e56:	84 a3       	std	Z+36, r24	; 0x24
     e58:	95 a3       	std	Z+37, r25	; 0x25
     e5a:	26 c0       	rjmp	.+76     	; 0xea8 <pf_lseek+0x162>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     e5c:	17 db       	rcall	.-2514   	; 0x48c <get_fat>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
     e5e:	62 30       	cpi	r22, 0x02	; 2
     e60:	71 05       	cpc	r23, r1
     e62:	81 05       	cpc	r24, r1
     e64:	91 05       	cpc	r25, r1
     e66:	08 f4       	brcc	.+2      	; 0xe6a <pf_lseek+0x124>
     e68:	59 c0       	rjmp	.+178    	; 0xf1c <pf_lseek+0x1d6>
     e6a:	f8 01       	movw	r30, r16
     e6c:	46 80       	ldd	r4, Z+6	; 0x06
     e6e:	57 80       	ldd	r5, Z+7	; 0x07
     e70:	60 84       	ldd	r6, Z+8	; 0x08
     e72:	71 84       	ldd	r7, Z+9	; 0x09
     e74:	64 15       	cp	r22, r4
     e76:	75 05       	cpc	r23, r5
     e78:	86 05       	cpc	r24, r6
     e7a:	97 05       	cpc	r25, r7
     e7c:	08 f0       	brcs	.+2      	; 0xe80 <pf_lseek+0x13a>
     e7e:	4e c0       	rjmp	.+156    	; 0xf1c <pf_lseek+0x1d6>
			fs->curr_clust = clst;
     e80:	62 a3       	std	Z+34, r22	; 0x22
     e82:	73 a3       	std	Z+35, r23	; 0x23
     e84:	84 a3       	std	Z+36, r24	; 0x24
     e86:	95 a3       	std	Z+37, r25	; 0x25
			fs->fptr += bcs;
     e88:	46 88       	ldd	r4, Z+22	; 0x16
     e8a:	57 88       	ldd	r5, Z+23	; 0x17
     e8c:	60 8c       	ldd	r6, Z+24	; 0x18
     e8e:	71 8c       	ldd	r7, Z+25	; 0x19
     e90:	48 0c       	add	r4, r8
     e92:	59 1c       	adc	r5, r9
     e94:	6a 1c       	adc	r6, r10
     e96:	7b 1c       	adc	r7, r11
     e98:	46 8a       	std	Z+22, r4	; 0x16
     e9a:	57 8a       	std	Z+23, r5	; 0x17
     e9c:	60 8e       	std	Z+24, r6	; 0x18
     e9e:	71 8e       	std	Z+25, r7	; 0x19
			ofs -= bcs;
     ea0:	c8 18       	sub	r12, r8
     ea2:	d9 08       	sbc	r13, r9
     ea4:	ea 08       	sbc	r14, r10
     ea6:	fb 08       	sbc	r15, r11
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     ea8:	8c 14       	cp	r8, r12
     eaa:	9d 04       	cpc	r9, r13
     eac:	ae 04       	cpc	r10, r14
     eae:	bf 04       	cpc	r11, r15
     eb0:	a8 f2       	brcs	.-86     	; 0xe5c <pf_lseek+0x116>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     eb2:	d8 01       	movw	r26, r16
     eb4:	56 96       	adiw	r26, 0x16	; 22
     eb6:	8d 90       	ld	r8, X+
     eb8:	9d 90       	ld	r9, X+
     eba:	ad 90       	ld	r10, X+
     ebc:	bc 90       	ld	r11, X
     ebe:	59 97       	sbiw	r26, 0x19	; 25
     ec0:	c8 0c       	add	r12, r8
     ec2:	d9 1c       	adc	r13, r9
     ec4:	ea 1c       	adc	r14, r10
     ec6:	fb 1c       	adc	r15, r11
     ec8:	f8 01       	movw	r30, r16
     eca:	c6 8a       	std	Z+22, r12	; 0x16
     ecc:	d7 8a       	std	Z+23, r13	; 0x17
     ece:	e0 8e       	std	Z+24, r14	; 0x18
     ed0:	f1 8e       	std	Z+25, r15	; 0x19
		sect = clust2sect(clst);		/* Current sector */
     ed2:	52 da       	rcall	.-2908   	; 0x378 <clust2sect>
		if (!sect) goto fe_abort;
     ed4:	61 15       	cp	r22, r1
     ed6:	71 05       	cpc	r23, r1
     ed8:	81 05       	cpc	r24, r1
     eda:	91 05       	cpc	r25, r1
     edc:	f9 f0       	breq	.+62     	; 0xf1c <pf_lseek+0x1d6>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
     ede:	29 e0       	ldi	r18, 0x09	; 9
     ee0:	f6 94       	lsr	r15
     ee2:	e7 94       	ror	r14
     ee4:	d7 94       	ror	r13
     ee6:	c7 94       	ror	r12
     ee8:	2a 95       	dec	r18
     eea:	d1 f7       	brne	.-12     	; 0xee0 <pf_lseek+0x19a>
     eec:	d8 01       	movw	r26, r16
     eee:	12 96       	adiw	r26, 0x02	; 2
     ef0:	2c 91       	ld	r18, X
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	21 50       	subi	r18, 0x01	; 1
     ef6:	31 09       	sbc	r19, r1
     ef8:	49 01       	movw	r8, r18
     efa:	33 0f       	add	r19, r19
     efc:	aa 08       	sbc	r10, r10
     efe:	bb 08       	sbc	r11, r11
     f00:	c8 20       	and	r12, r8
     f02:	d9 20       	and	r13, r9
     f04:	ea 20       	and	r14, r10
     f06:	fb 20       	and	r15, r11
     f08:	c6 0e       	add	r12, r22
     f0a:	d7 1e       	adc	r13, r23
     f0c:	e8 1e       	adc	r14, r24
     f0e:	f9 1e       	adc	r15, r25
     f10:	f8 01       	movw	r30, r16
     f12:	c6 a2       	std	Z+38, r12	; 0x26
     f14:	d7 a2       	std	Z+39, r13	; 0x27
     f16:	e0 a6       	std	Z+40, r14	; 0x28
     f18:	f1 a6       	std	Z+41, r15	; 0x29
     f1a:	0c c0       	rjmp	.+24     	; 0xf34 <pf_lseek+0x1ee>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     f1c:	d8 01       	movw	r26, r16
     f1e:	11 96       	adiw	r26, 0x01	; 1
     f20:	1c 92       	st	X, r1
	return FR_DISK_ERR;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	08 c0       	rjmp	.+16     	; 0xf38 <pf_lseek+0x1f2>
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	05 c0       	rjmp	.+10     	; 0xf38 <pf_lseek+0x1f2>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
			return FR_NOT_OPENED;
     f2e:	85 e0       	ldi	r24, 0x05	; 5
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 c0       	rjmp	.+4      	; 0xf38 <pf_lseek+0x1f2>
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
	}

	return FR_OK;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0

fe_abort:
	fs->flag = 0;
	return FR_DISK_ERR;
}
     f38:	24 96       	adiw	r28, 0x04	; 4
     f3a:	e0 e1       	ldi	r30, 0x10	; 16
     f3c:	6d c4       	rjmp	.+2266   	; 0x1818 <__epilogue_restores__+0x4>

00000f3e <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
     f3e:	ac e2       	ldi	r26, 0x2C	; 44
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e4 ea       	ldi	r30, 0xA4	; 164
     f44:	f7 e0       	ldi	r31, 0x07	; 7
     f46:	58 c4       	rjmp	.+2224   	; 0x17f8 <__prologue_saves__+0x1c>
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
     f48:	20 91 74 00 	lds	r18, 0x0074
     f4c:	30 91 75 00 	lds	r19, 0x0075
     f50:	23 2b       	or	r18, r19
     f52:	89 f1       	breq	.+98     	; 0xfb6 <pf_opendir+0x78>
     f54:	ab 01       	movw	r20, r22
     f56:	8c 01       	movw	r16, r24
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
     f58:	ce 01       	movw	r24, r28
     f5a:	81 96       	adiw	r24, 0x21	; 33
     f5c:	f8 01       	movw	r30, r16
     f5e:	93 83       	std	Z+3, r25	; 0x03
     f60:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
     f62:	be 01       	movw	r22, r28
     f64:	6f 5f       	subi	r22, 0xFF	; 255
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	c8 01       	movw	r24, r16
     f6a:	11 dc       	rcall	.-2014   	; 0x78e <follow_path>
		if (res == FR_OK) {						/* Follow completed */
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	f9 f4       	brne	.+62     	; 0xfae <pf_opendir+0x70>
			if (dir[0]) {						/* It is not the root dir */
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	88 23       	and	r24, r24
     f74:	d1 f0       	breq	.+52     	; 0xfaa <pf_opendir+0x6c>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
     f76:	8c 85       	ldd	r24, Y+12	; 0x0c
     f78:	84 fd       	sbrc	r24, 4
     f7a:	03 c0       	rjmp	.+6      	; 0xf82 <pf_opendir+0x44>
					dj->sclust = LD_CLUST(dir);
				else							/* The object is not a directory */
					res = FR_NO_PATH;
     f7c:	84 e0       	ldi	r24, 0x04	; 4
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	1c c0       	rjmp	.+56     	; 0xfba <pf_opendir+0x7c>
		dj->fn = sp;
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
		if (res == FR_OK) {						/* Follow completed */
			if (dir[0]) {						/* It is not the root dir */
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
					dj->sclust = LD_CLUST(dir);
     f82:	8d 89       	ldd	r24, Y+21	; 0x15
     f84:	9e 89       	ldd	r25, Y+22	; 0x16
     f86:	a0 e0       	ldi	r26, 0x00	; 0
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	dc 01       	movw	r26, r24
     f8c:	99 27       	eor	r25, r25
     f8e:	88 27       	eor	r24, r24
     f90:	4b 8d       	ldd	r20, Y+27	; 0x1b
     f92:	5c 8d       	ldd	r21, Y+28	; 0x1c
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	84 2b       	or	r24, r20
     f9a:	95 2b       	or	r25, r21
     f9c:	a6 2b       	or	r26, r22
     f9e:	b7 2b       	or	r27, r23
     fa0:	f8 01       	movw	r30, r16
     fa2:	84 83       	std	Z+4, r24	; 0x04
     fa4:	95 83       	std	Z+5, r25	; 0x05
     fa6:	a6 83       	std	Z+6, r26	; 0x06
     fa8:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
     faa:	c8 01       	movw	r24, r16
     fac:	25 da       	rcall	.-2998   	; 0x3f8 <dir_rewind>
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	91 05       	cpc	r25, r1
     fb2:	19 f4       	brne	.+6      	; 0xfba <pf_opendir+0x7c>
     fb4:	e3 cf       	rjmp	.-58     	; 0xf7c <pf_opendir+0x3e>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
     fb6:	86 e0       	ldi	r24, 0x06	; 6
     fb8:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	return res;
}
     fba:	ac 96       	adiw	r28, 0x2c	; 44
     fbc:	e4 e0       	ldi	r30, 0x04	; 4
     fbe:	38 c4       	rjmp	.+2160   	; 0x1830 <__epilogue_restores__+0x1c>

00000fc0 <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     fc0:	ac e2       	ldi	r26, 0x2C	; 44
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 ee       	ldi	r30, 0xE5	; 229
     fc6:	f7 e0       	ldi	r31, 0x07	; 7
     fc8:	13 c4       	rjmp	.+2086   	; 0x17f0 <__prologue_saves__+0x14>
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
     fca:	20 91 74 00 	lds	r18, 0x0074
     fce:	30 91 75 00 	lds	r19, 0x0075
     fd2:	23 2b       	or	r18, r19
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <pf_readdir+0x18>
     fd6:	b6 c0       	rjmp	.+364    	; 0x1144 <pf_readdir+0x184>
     fd8:	6b 01       	movw	r12, r22
     fda:	7c 01       	movw	r14, r24
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
     fdc:	ce 01       	movw	r24, r28
     fde:	81 96       	adiw	r24, 0x21	; 33
     fe0:	d7 01       	movw	r26, r14
     fe2:	13 96       	adiw	r26, 0x03	; 3
     fe4:	9c 93       	st	X, r25
     fe6:	8e 93       	st	-X, r24
     fe8:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     fea:	67 2b       	or	r22, r23
     fec:	19 f4       	brne	.+6      	; 0xff4 <pf_readdir+0x34>
			res = dir_rewind(dj);
     fee:	c7 01       	movw	r24, r14
     ff0:	03 da       	rcall	.-3066   	; 0x3f8 <dir_rewind>
     ff2:	b8 c0       	rjmp	.+368    	; 0x1164 <pf_readdir+0x1a4>
     ff4:	23 e0       	ldi	r18, 0x03	; 3
     ff6:	30 e0       	ldi	r19, 0x00	; 0
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
     ff8:	d7 01       	movw	r26, r14
     ffa:	1c 96       	adiw	r26, 0x0c	; 12
     ffc:	4d 91       	ld	r20, X+
     ffe:	5d 91       	ld	r21, X+
    1000:	6d 91       	ld	r22, X+
    1002:	7c 91       	ld	r23, X
    1004:	1f 97       	sbiw	r26, 0x0f	; 15
    1006:	41 15       	cp	r20, r1
    1008:	51 05       	cpc	r21, r1
    100a:	61 05       	cpc	r22, r1
    100c:	71 05       	cpc	r23, r1
    100e:	19 f1       	breq	.+70     	; 0x1056 <pf_readdir+0x96>
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
    1010:	f7 01       	movw	r30, r14
    1012:	20 81       	ld	r18, Z
    1014:	31 81       	ldd	r19, Z+1	; 0x01
    1016:	2f 70       	andi	r18, 0x0F	; 15
    1018:	33 27       	eor	r19, r19
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	22 0f       	add	r18, r18
    101e:	33 1f       	adc	r19, r19
    1020:	8a 95       	dec	r24
    1022:	e1 f7       	brne	.-8      	; 0x101c <pf_readdir+0x5c>
    1024:	00 e2       	ldi	r16, 0x20	; 32
    1026:	10 e0       	ldi	r17, 0x00	; 0
    1028:	ce 01       	movw	r24, r28
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	62 d1       	rcall	.+708    	; 0x12f2 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    102e:	89 2b       	or	r24, r25
    1030:	09 f0       	breq	.+2      	; 0x1034 <pf_readdir+0x74>
    1032:	8b c0       	rjmp	.+278    	; 0x114a <pf_readdir+0x18a>
		c = dir[DIR_Name];
    1034:	89 81       	ldd	r24, Y+1	; 0x01
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1036:	88 23       	and	r24, r24
    1038:	09 f4       	brne	.+2      	; 0x103c <pf_readdir+0x7c>
    103a:	8a c0       	rjmp	.+276    	; 0x1150 <pf_readdir+0x190>
		a = dir[DIR_Attr] & AM_MASK;
    103c:	9c 85       	ldd	r25, Y+12	; 0x0c
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
    103e:	85 3e       	cpi	r24, 0xE5	; 229
    1040:	21 f0       	breq	.+8      	; 0x104a <pf_readdir+0x8a>
    1042:	8e 32       	cpi	r24, 0x2E	; 46
    1044:	11 f0       	breq	.+4      	; 0x104a <pf_readdir+0x8a>
    1046:	93 ff       	sbrs	r25, 3
    1048:	13 c0       	rjmp	.+38     	; 0x1070 <pf_readdir+0xb0>
			break;
		res = dir_next(dj);			/* Next entry */
    104a:	c7 01       	movw	r24, r14
    104c:	f7 da       	rcall	.-2578   	; 0x63c <dir_next>
    104e:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
    1050:	89 2b       	or	r24, r25
    1052:	91 f2       	breq	.-92     	; 0xff8 <pf_readdir+0x38>
    1054:	7f c0       	rjmp	.+254    	; 0x1154 <pf_readdir+0x194>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    1056:	c9 01       	movw	r24, r18
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
    1058:	21 15       	cp	r18, r1
    105a:	31 05       	cpc	r19, r1
    105c:	49 f0       	breq	.+18     	; 0x1070 <pf_readdir+0xb0>
    105e:	f7 01       	movw	r30, r14
    1060:	14 86       	std	Z+12, r1	; 0x0c
    1062:	15 86       	std	Z+13, r1	; 0x0d
    1064:	16 86       	std	Z+14, r1	; 0x0e
    1066:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
    1068:	23 30       	cpi	r18, 0x03	; 3
    106a:	31 05       	cpc	r19, r1
    106c:	09 f0       	breq	.+2      	; 0x1070 <pf_readdir+0xb0>
    106e:	74 c0       	rjmp	.+232    	; 0x1158 <pf_readdir+0x198>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    1070:	86 01       	movw	r16, r12
    1072:	07 5f       	subi	r16, 0xF7	; 247
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
    1076:	d7 01       	movw	r26, r14
    1078:	1c 96       	adiw	r26, 0x0c	; 12
    107a:	4d 91       	ld	r20, X+
    107c:	5d 91       	ld	r21, X+
    107e:	6d 91       	ld	r22, X+
    1080:	7c 91       	ld	r23, X
    1082:	1f 97       	sbiw	r26, 0x0f	; 15
    1084:	45 2b       	or	r20, r21
    1086:	46 2b       	or	r20, r22
    1088:	47 2b       	or	r20, r23
    108a:	09 f4       	brne	.+2      	; 0x108e <pf_readdir+0xce>
    108c:	4a c0       	rjmp	.+148    	; 0x1122 <pf_readdir+0x162>
    108e:	9e 01       	movw	r18, r28
    1090:	2f 5f       	subi	r18, 0xFF	; 255
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	f6 01       	movw	r30, r12
    1096:	71 96       	adiw	r30, 0x11	; 17
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
    1098:	d9 01       	movw	r26, r18
    109a:	8d 91       	ld	r24, X+
    109c:	9d 01       	movw	r18, r26
			if (c == ' ') break;
    109e:	80 32       	cpi	r24, 0x20	; 32
    10a0:	71 f0       	breq	.+28     	; 0x10be <pf_readdir+0xfe>
			if (c == 0x05) c = 0xE5;
    10a2:	85 30       	cpi	r24, 0x05	; 5
    10a4:	09 f4       	brne	.+2      	; 0x10a8 <pf_readdir+0xe8>
    10a6:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
    10a8:	0f 5f       	subi	r16, 0xFF	; 255
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	a8 01       	movw	r20, r16
    10ae:	41 50       	subi	r20, 0x01	; 1
    10b0:	51 09       	sbc	r21, r1
    10b2:	da 01       	movw	r26, r20
    10b4:	8c 93       	st	X, r24
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
    10b6:	0e 17       	cp	r16, r30
    10b8:	1f 07       	cpc	r17, r31
    10ba:	71 f7       	brne	.-36     	; 0x1098 <pf_readdir+0xd8>
    10bc:	01 c0       	rjmp	.+2      	; 0x10c0 <pf_readdir+0x100>
			c = dir[i];
			if (c == ' ') break;
    10be:	f8 01       	movw	r30, r16
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
    10c0:	89 85       	ldd	r24, Y+9	; 0x09
    10c2:	80 32       	cpi	r24, 0x20	; 32
    10c4:	99 f0       	breq	.+38     	; 0x10ec <pf_readdir+0x12c>
			*p++ = '.';
    10c6:	9e e2       	ldi	r25, 0x2E	; 46
    10c8:	90 83       	st	Z, r25
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
    10ca:	9f 01       	movw	r18, r30
    10cc:	2e 5f       	subi	r18, 0xFE	; 254
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	81 83       	std	Z+1, r24	; 0x01
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    10d2:	8a 85       	ldd	r24, Y+10	; 0x0a
				if (c == ' ') break;
    10d4:	80 32       	cpi	r24, 0x20	; 32
    10d6:	31 f0       	breq	.+12     	; 0x10e4 <pf_readdir+0x124>
				*p++ = c;
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	82 83       	std	Z+2, r24	; 0x02
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    10de:	8b 85       	ldd	r24, Y+11	; 0x0b
				if (c == ' ') break;
    10e0:	80 32       	cpi	r24, 0x20	; 32
    10e2:	11 f4       	brne	.+4      	; 0x10e8 <pf_readdir+0x128>

	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
			c = dir[i];
			if (c == ' ') break;
    10e4:	f9 01       	movw	r30, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <pf_readdir+0x12c>
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
    10e8:	83 83       	std	Z+3, r24	; 0x03
    10ea:	34 96       	adiw	r30, 0x04	; 4
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    10ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    10ee:	d6 01       	movw	r26, r12
    10f0:	18 96       	adiw	r26, 0x08	; 8
    10f2:	8c 93       	st	X, r24
    10f4:	18 97       	sbiw	r26, 0x08	; 8
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    10f6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    10f8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    10fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    10fc:	78 a1       	ldd	r23, Y+32	; 0x20
    10fe:	4d 93       	st	X+, r20
    1100:	5d 93       	st	X+, r21
    1102:	6d 93       	st	X+, r22
    1104:	7c 93       	st	X, r23
    1106:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    1108:	89 8d       	ldd	r24, Y+25	; 0x19
    110a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    110c:	15 96       	adiw	r26, 0x05	; 5
    110e:	9c 93       	st	X, r25
    1110:	8e 93       	st	-X, r24
    1112:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    1114:	8f 89       	ldd	r24, Y+23	; 0x17
    1116:	98 8d       	ldd	r25, Y+24	; 0x18
    1118:	17 96       	adiw	r26, 0x07	; 7
    111a:	9c 93       	st	X, r25
    111c:	8e 93       	st	-X, r24
    111e:	16 97       	sbiw	r26, 0x06	; 6
    1120:	8f 01       	movw	r16, r30
	}
	*p = 0;
    1122:	f8 01       	movw	r30, r16
    1124:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
    1126:	c7 01       	movw	r24, r14
    1128:	89 da       	rcall	.-2798   	; 0x63c <dir_next>
				if (res == FR_NO_FILE) {
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	d1 f4       	brne	.+52     	; 0x1164 <pf_readdir+0x1a4>
					dj->sect = 0;
    1130:	d7 01       	movw	r26, r14
    1132:	1c 96       	adiw	r26, 0x0c	; 12
    1134:	1d 92       	st	X+, r1
    1136:	1d 92       	st	X+, r1
    1138:	1d 92       	st	X+, r1
    113a:	1c 92       	st	X, r1
    113c:	1f 97       	sbiw	r26, 0x0f	; 15
					res = FR_OK;
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	10 c0       	rjmp	.+32     	; 0x1164 <pf_readdir+0x1a4>
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
    1144:	86 e0       	ldi	r24, 0x06	; 6
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <pf_readdir+0x1a4>

	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
    114a:	21 e0       	ldi	r18, 0x01	; 1
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <pf_readdir+0x194>
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1150:	23 e0       	ldi	r18, 0x03	; 3
    1152:	30 e0       	ldi	r19, 0x00	; 0
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
    1154:	c9 01       	movw	r24, r18
    1156:	83 cf       	rjmp	.-250    	; 0x105e <pf_readdir+0x9e>
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
    1158:	23 2b       	or	r18, r19
    115a:	21 f4       	brne	.+8      	; 0x1164 <pf_readdir+0x1a4>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
    115c:	86 01       	movw	r16, r12
    115e:	07 5f       	subi	r16, 0xF7	; 247
    1160:	1f 4f       	sbci	r17, 0xFF	; 255
    1162:	df cf       	rjmp	.-66     	; 0x1122 <pf_readdir+0x162>
			}
		}
	}

	return res;
}
    1164:	ac 96       	adiw	r28, 0x2c	; 44
    1166:	e8 e0       	ldi	r30, 0x08	; 8
    1168:	5f c3       	rjmp	.+1726   	; 0x1828 <__epilogue_restores__+0x14>

0000116a <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	c8 2f       	mov	r28, r24
    1176:	d4 2f       	mov	r29, r20
    1178:	15 2f       	mov	r17, r21
    117a:	06 2f       	mov	r16, r22
    117c:	f7 2e       	mov	r15, r23
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    117e:	87 ff       	sbrs	r24, 7
    1180:	08 c0       	rjmp	.+16     	; 0x1192 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	ba 01       	movw	r22, r20
    1188:	87 e7       	ldi	r24, 0x77	; 119
    118a:	ef df       	rcall	.-34     	; 0x116a <send_cmd>
		if (res > 1) return res;
    118c:	82 30       	cpi	r24, 0x02	; 2
    118e:	f8 f4       	brcc	.+62     	; 0x11ce <send_cmd+0x64>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    1190:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
    1192:	68 d7       	rcall	.+3792   	; 0x2064 <__data_load_end+0x774>
	rcv_spi();
    1194:	69 d7       	rcall	.+3794   	; 0x2068 <__data_load_end+0x778>
	select();
    1196:	64 d7       	rcall	.+3784   	; 0x2060 <__data_load_end+0x770>
	rcv_spi();
    1198:	67 d7       	rcall	.+3790   	; 0x2068 <__data_load_end+0x778>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    119a:	8c 2f       	mov	r24, r28
    119c:	79 d7       	rcall	.+3826   	; 0x2090 <__data_load_end+0x7a0>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    119e:	8f 2d       	mov	r24, r15
    11a0:	77 d7       	rcall	.+3822   	; 0x2090 <__data_load_end+0x7a0>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    11a2:	80 2f       	mov	r24, r16
    11a4:	75 d7       	rcall	.+3818   	; 0x2090 <__data_load_end+0x7a0>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    11a6:	81 2f       	mov	r24, r17
    11a8:	73 d7       	rcall	.+3814   	; 0x2090 <__data_load_end+0x7a0>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    11aa:	8d 2f       	mov	r24, r29
    11ac:	71 d7       	rcall	.+3810   	; 0x2090 <__data_load_end+0x7a0>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    11ae:	c0 34       	cpi	r28, 0x40	; 64
    11b0:	21 f0       	breq	.+8      	; 0x11ba <send_cmd+0x50>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    11b2:	c8 34       	cpi	r28, 0x48	; 72
    11b4:	21 f4       	brne	.+8      	; 0x11be <send_cmd+0x54>
    11b6:	87 e8       	ldi	r24, 0x87	; 135
    11b8:	03 c0       	rjmp	.+6      	; 0x11c0 <send_cmd+0x56>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    11ba:	85 e9       	ldi	r24, 0x95	; 149
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <send_cmd+0x56>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    11be:	81 e0       	ldi	r24, 0x01	; 1
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xmit_spi(n);
    11c0:	67 d7       	rcall	.+3790   	; 0x2090 <__data_load_end+0x7a0>
    11c2:	ca e0       	ldi	r28, 0x0A	; 10

	/* Receive command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    11c4:	51 d7       	rcall	.+3746   	; 0x2068 <__data_load_end+0x778>
	} while ((res & 0x80) && --n);
    11c6:	87 ff       	sbrs	r24, 7
    11c8:	02 c0       	rjmp	.+4      	; 0x11ce <send_cmd+0x64>
    11ca:	c1 50       	subi	r28, 0x01	; 1
    11cc:	d9 f7       	brne	.-10     	; 0x11c4 <send_cmd+0x5a>

	return res;			/* Return with the response value */
}
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	e5 e0       	ldi	r30, 0x05	; 5
    11d4:	2c c3       	rjmp	.+1624   	; 0x182e <__epilogue_restores__+0x1a>

000011d6 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    11d6:	a4 e0       	ldi	r26, 0x04	; 4
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e0 ef       	ldi	r30, 0xF0	; 240
    11dc:	f8 e0       	ldi	r31, 0x08	; 8
    11de:	09 c3       	rjmp	.+1554   	; 0x17f2 <__prologue_saves__+0x16>
	BYTE n, cmd, ty, ocr[4];
	WORD tmr;


	init_spi();		/* Initialize USI */
    11e0:	3a d7       	rcall	.+3700   	; 0x2056 <__data_load_end+0x766>
    11e2:	0a e0       	ldi	r16, 0x0A	; 10
    11e4:	10 e0       	ldi	r17, 0x00	; 0

	for (tmr = 10; tmr; tmr--) rcv_spi();	/* Dummy clocks */
    11e6:	40 d7       	rcall	.+3712   	; 0x2068 <__data_load_end+0x778>
    11e8:	01 50       	subi	r16, 0x01	; 1
    11ea:	11 09       	sbc	r17, r1
    11ec:	e1 f7       	brne	.-8      	; 0x11e6 <disk_initialize+0x10>
	select();
    11ee:	38 d7       	rcall	.+3696   	; 0x2060 <__data_load_end+0x770>
    11f0:	08 e5       	ldi	r16, 0x58	; 88
    11f2:	12 e0       	ldi	r17, 0x02	; 2
	for (tmr = 600; tmr; tmr--) rcv_spi();	/* Dummy clocks */
    11f4:	39 d7       	rcall	.+3698   	; 0x2068 <__data_load_end+0x778>
    11f6:	01 50       	subi	r16, 0x01	; 1
    11f8:	11 09       	sbc	r17, r1
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <disk_initialize+0x1e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	ba 01       	movw	r22, r20
    1202:	80 e4       	ldi	r24, 0x40	; 64
    1204:	b2 df       	rcall	.-156    	; 0x116a <send_cmd>
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	09 f0       	breq	.+2      	; 0x120c <disk_initialize+0x36>
    120a:	6e c0       	rjmp	.+220    	; 0x12e8 <disk_initialize+0x112>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    120c:	4a ea       	ldi	r20, 0xAA	; 170
    120e:	51 e0       	ldi	r21, 0x01	; 1
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	88 e4       	ldi	r24, 0x48	; 72
    1216:	a9 df       	rcall	.-174    	; 0x116a <send_cmd>
    1218:	81 30       	cpi	r24, 0x01	; 1
    121a:	31 f5       	brne	.+76     	; 0x1268 <disk_initialize+0x92>
    121c:	8e 01       	movw	r16, r28
    121e:	0f 5f       	subi	r16, 0xFF	; 255
    1220:	1f 4f       	sbci	r17, 0xFF	; 255
    1222:	78 01       	movw	r14, r16
    1224:	24 e0       	ldi	r18, 0x04	; 4
    1226:	d2 2e       	mov	r13, r18
    1228:	d0 0e       	add	r13, r16
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    122a:	1e d7       	rcall	.+3644   	; 0x2068 <__data_load_end+0x778>
    122c:	f7 01       	movw	r30, r14
    122e:	81 93       	st	Z+, r24
    1230:	7f 01       	movw	r14, r30
    1232:	de 12       	cpse	r13, r30
    1234:	fa cf       	rjmp	.-12     	; 0x122a <disk_initialize+0x54>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	09 f0       	breq	.+2      	; 0x123e <disk_initialize+0x68>
    123c:	55 c0       	rjmp	.+170    	; 0x12e8 <disk_initialize+0x112>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	8a 3a       	cpi	r24, 0xAA	; 170
    1242:	09 f0       	breq	.+2      	; 0x1246 <disk_initialize+0x70>
    1244:	51 c0       	rjmp	.+162    	; 0x12e8 <disk_initialize+0x112>
    1246:	98 ea       	ldi	r25, 0xA8	; 168
    1248:	e9 2e       	mov	r14, r25
    124a:	91 e6       	ldi	r25, 0x61	; 97
    124c:	f9 2e       	mov	r15, r25
				for (tmr = 25000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	70 e4       	ldi	r23, 0x40	; 64
    1256:	89 ee       	ldi	r24, 0xE9	; 233
    1258:	88 df       	rcall	.-240    	; 0x116a <send_cmd>
    125a:	88 23       	and	r24, r24
    125c:	09 f1       	breq	.+66     	; 0x12a0 <disk_initialize+0xca>
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	ef 1a       	sub	r14, r31
    1262:	f1 08       	sbc	r15, r1
    1264:	a1 f7       	brne	.-24     	; 0x124e <disk_initialize+0x78>
    1266:	40 c0       	rjmp	.+128    	; 0x12e8 <disk_initialize+0x112>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	ba 01       	movw	r22, r20
    126e:	89 ee       	ldi	r24, 0xE9	; 233
    1270:	7c df       	rcall	.-264    	; 0x116a <send_cmd>
    1272:	82 30       	cpi	r24, 0x02	; 2
    1274:	18 f0       	brcs	.+6      	; 0x127c <disk_initialize+0xa6>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1276:	11 e0       	ldi	r17, 0x01	; 1
    1278:	01 e4       	ldi	r16, 0x41	; 65
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <disk_initialize+0xaa>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
				}
			}
		} else {							/* SDv1 or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    127c:	12 e0       	ldi	r17, 0x02	; 2
    127e:	09 ee       	ldi	r16, 0xE9	; 233
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    1280:	88 ea       	ldi	r24, 0xA8	; 168
    1282:	e8 2e       	mov	r14, r24
    1284:	81 e6       	ldi	r24, 0x61	; 97
    1286:	f8 2e       	mov	r15, r24
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	50 e0       	ldi	r21, 0x00	; 0
    128c:	ba 01       	movw	r22, r20
    128e:	80 2f       	mov	r24, r16
    1290:	6c df       	rcall	.-296    	; 0x116a <send_cmd>
    1292:	88 23       	and	r24, r24
    1294:	09 f1       	breq	.+66     	; 0x12d8 <disk_initialize+0x102>
    1296:	f1 e0       	ldi	r31, 0x01	; 1
    1298:	ef 1a       	sub	r14, r31
    129a:	f1 08       	sbc	r15, r1
    129c:	a9 f7       	brne	.-22     	; 0x1288 <disk_initialize+0xb2>
    129e:	24 c0       	rjmp	.+72     	; 0x12e8 <disk_initialize+0x112>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 25000; tmr && send_cmd(ACMD41, 1UL << 30); tmr--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (tmr && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	ba 01       	movw	r22, r20
    12a6:	8a e7       	ldi	r24, 0x7A	; 122
    12a8:	60 df       	rcall	.-320    	; 0x116a <send_cmd>
    12aa:	81 11       	cpse	r24, r1
    12ac:	1d c0       	rjmp	.+58     	; 0x12e8 <disk_initialize+0x112>
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    12ae:	dc d6       	rcall	.+3512   	; 0x2068 <__data_load_end+0x778>
    12b0:	f8 01       	movw	r30, r16
    12b2:	81 93       	st	Z+, r24
    12b4:	8f 01       	movw	r16, r30
    12b6:	de 12       	cpse	r13, r30
    12b8:	fa cf       	rjmp	.-12     	; 0x12ae <disk_initialize+0xd8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	86 fd       	sbrc	r24, 6
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <disk_initialize+0xee>
    12c0:	14 e0       	ldi	r17, 0x04	; 4
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <disk_initialize+0xf0>
    12c4:	1c e0       	ldi	r17, 0x0C	; 12
			if (!tmr || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
				ty = 0;
			}
		}
	}
	CardType = ty;
    12c6:	10 93 cb 01 	sts	0x01CB, r17
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	deselect();
    12ca:	cc d6       	rcall	.+3480   	; 0x2064 <__data_load_end+0x774>
	rcv_spi();
    12cc:	cd d6       	rcall	.+3482   	; 0x2068 <__data_load_end+0x778>
		}
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	11 23       	and	r17, r17
    12d2:	61 f0       	breq	.+24     	; 0x12ec <disk_initialize+0x116>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	0a c0       	rjmp	.+20     	; 0x12ec <disk_initialize+0x116>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 25000; tmr && send_cmd(cmd, 0); tmr--) ;	/* Wait for leaving idle state */
			if (!tmr || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	52 e0       	ldi	r21, 0x02	; 2
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	80 e5       	ldi	r24, 0x50	; 80
    12e2:	43 df       	rcall	.-378    	; 0x116a <send_cmd>
    12e4:	88 23       	and	r24, r24
    12e6:	79 f3       	breq	.-34     	; 0x12c6 <disk_initialize+0xf0>
				ty = 0;
    12e8:	10 e0       	ldi	r17, 0x00	; 0
    12ea:	ed cf       	rjmp	.-38     	; 0x12c6 <disk_initialize+0xf0>
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
    12ec:	24 96       	adiw	r28, 0x04	; 4
    12ee:	e7 e0       	ldi	r30, 0x07	; 7
    12f0:	9c c2       	rjmp	.+1336   	; 0x182a <__epilogue_restores__+0x16>

000012f2 <disk_readp>:
	void *dest,		/* Pointer to the destination object to put data */
	DWORD lba,		/* Start sector number (LBA) */
	WORD ofs,		/* Byte offset in the sector (0..511) */
	WORD cnt		/* Byte count (1..512), b15:destination flag */
)
{
    12f2:	a0 e0       	ldi	r26, 0x00	; 0
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ee e7       	ldi	r30, 0x7E	; 126
    12f8:	f9 e0       	ldi	r31, 0x09	; 9
    12fa:	7a c2       	rjmp	.+1268   	; 0x17f0 <__prologue_saves__+0x14>
    12fc:	7c 01       	movw	r14, r24
    12fe:	69 01       	movw	r12, r18
	DRESULT res;
	BYTE rc;
	WORD tmr;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */
    1300:	80 91 cb 01 	lds	r24, 0x01CB
    1304:	83 fd       	sbrc	r24, 3
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <disk_readp+0x24>
    1308:	89 e0       	ldi	r24, 0x09	; 9
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	66 1f       	adc	r22, r22
    1310:	77 1f       	adc	r23, r23
    1312:	8a 95       	dec	r24
    1314:	d1 f7       	brne	.-12     	; 0x130a <disk_readp+0x18>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {	/* READ_SINGLE_BLOCK */
    1316:	81 e5       	ldi	r24, 0x51	; 81
    1318:	28 df       	rcall	.-432    	; 0x116a <send_cmd>
    131a:	88 23       	and	r24, r24
    131c:	19 f0       	breq	.+6      	; 0x1324 <disk_readp+0x32>
	WORD tmr;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */

	res = RES_ERROR;
    131e:	c1 e0       	ldi	r28, 0x01	; 1
    1320:	d0 e0       	ldi	r29, 0x00	; 0
    1322:	10 c0       	rjmp	.+32     	; 0x1344 <disk_readp+0x52>
    1324:	c0 e3       	ldi	r28, 0x30	; 48
    1326:	d5 e7       	ldi	r29, 0x75	; 117
	if (send_cmd(CMD17, lba) == 0) {	/* READ_SINGLE_BLOCK */
		tmr = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
    1328:	9f d6       	rcall	.+3390   	; 0x2068 <__data_load_end+0x778>
		} while (rc == 0xFF && --tmr);
    132a:	8f 3f       	cpi	r24, 0xFF	; 255
    132c:	19 f4       	brne	.+6      	; 0x1334 <disk_readp+0x42>
    132e:	21 97       	sbiw	r28, 0x01	; 1
    1330:	d9 f7       	brne	.-10     	; 0x1328 <disk_readp+0x36>
    1332:	f5 cf       	rjmp	.-22     	; 0x131e <disk_readp+0x2c>
		if (rc == 0xFE) {
    1334:	8e 3f       	cpi	r24, 0xFE	; 254
    1336:	99 f7       	brne	.-26     	; 0x131e <disk_readp+0x2c>
			read_blk_part(dest, ofs, cnt);	/* Read a part of the sector */
    1338:	a8 01       	movw	r20, r16
    133a:	b6 01       	movw	r22, r12
    133c:	c7 01       	movw	r24, r14
    133e:	b5 d6       	rcall	.+3434   	; 0x20aa <__data_load_end+0x7ba>
			res = RES_OK;
    1340:	c0 e0       	ldi	r28, 0x00	; 0
    1342:	d0 e0       	ldi	r29, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	deselect();
    1344:	8f d6       	rcall	.+3358   	; 0x2064 <__data_load_end+0x774>
	rcv_spi();
    1346:	90 d6       	rcall	.+3360   	; 0x2068 <__data_load_end+0x778>
	}

	release_spi();

	return res;
}
    1348:	ce 01       	movw	r24, r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	e8 e0       	ldi	r30, 0x08	; 8
    1350:	6b c2       	rjmp	.+1238   	; 0x1828 <__epilogue_restores__+0x14>

00001352 <main>:

/*-----------------------------------------------------------------------*/
/* Main                                                                  */

int main (void)
{
    1352:	a3 e0       	ldi	r26, 0x03	; 3
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ee ea       	ldi	r30, 0xAE	; 174
    1358:	f9 e0       	ldi	r31, 0x09	; 9
    135a:	40 c2       	rjmp	.+1152   	; 0x17dc <__prologue_saves__>
	FRESULT res;
	char *dir;
	BYTE org_osc = OSCCAL;
    135c:	91 b6       	in	r9, 0x31	; 49


	MCUSR = 0;
    135e:	14 be       	out	0x34, r1	; 52
	WDTCR = _BV(WDE) | 0b110;	/* Enable WDT reset in timeout of 1s */
    1360:	8e e0       	ldi	r24, 0x0E	; 14
    1362:	81 bd       	out	0x21, r24	; 33

	PORTB = 0b101001;		/* Initialize port: - - H L H L L P */
    1364:	89 e2       	ldi	r24, 0x29	; 41
    1366:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0b111110;
    1368:	8e e3       	ldi	r24, 0x3E	; 62
    136a:	87 bb       	out	0x17, r24	; 23

	sei();
    136c:	78 94       	sei
			if (b != 8 && b != 16) return 0;		/* Check resolution (8/16 bit) */
			GPIOR0 |= b;							/* Save resolution flag */
			if (b & 16) al <<= 1;
			f = LD_DWORD(&Buff[4]);					/* Check sampling freqency (8k-48k) */
			if (f < 8000 || f > 48000) return 4;
			OCR0A = (BYTE)(F_CPU / 8 / f) - 1;		/* Set sampling interval */
    136e:	40 e8       	ldi	r20, 0x80	; 128
    1370:	44 2e       	mov	r4, r20
    1372:	44 e8       	ldi	r20, 0x84	; 132
    1374:	54 2e       	mov	r5, r20
    1376:	4e e1       	ldi	r20, 0x1E	; 30
    1378:	64 2e       	mov	r6, r20
    137a:	71 2c       	mov	r7, r1
	DDRB  = 0b111110;

	sei();

	for (;;) {
		if (pf_mount(&Fs) == FR_OK) {	/* Initialize FS */
    137c:	81 ea       	ldi	r24, 0xA1	; 161
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	fc da       	rcall	.-2568   	; 0x97a <pf_mount>
    1382:	89 2b       	or	r24, r25
    1384:	49 f0       	breq	.+18     	; 0x1398 <main+0x46>


static
void delay500 (void)
{
	wdt_reset();
    1386:	a8 95       	wdr

	TCCR0B = 0; TCCR0A = 0;	/* Stop TC0 */
    1388:	13 be       	out	0x33, r1	; 51
    138a:	1a bc       	out	0x2a, r1	; 42

	if (TCCR1) {	/* Stop TC1 if enabled */
    138c:	80 b7       	in	r24, 0x30	; 48
    138e:	88 23       	and	r24, r24
    1390:	09 f4       	brne	.+2      	; 0x1394 <main+0x42>
    1392:	d1 c1       	rjmp	.+930    	; 0x1736 <main+0x3e4>
    1394:	80 e8       	ldi	r24, 0x80	; 128
    1396:	c2 c1       	rjmp	.+900    	; 0x171c <main+0x3ca>

	sei();

	for (;;) {
		if (pf_mount(&Fs) == FR_OK) {	/* Initialize FS */
			wdt_reset();
    1398:	a8 95       	wdr
			Buff[0] = 0;
    139a:	10 92 90 00 	sts	0x0090, r1
			if (!pf_open("osccal")) pf_read(Buff, 1, &rb);	/* Adjust frequency */
    139e:	80 e6       	ldi	r24, 0x60	; 96
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	cb db       	rcall	.-2154   	; 0xb3a <pf_open>
    13a4:	89 2b       	or	r24, r25
    13a6:	39 f4       	brne	.+14     	; 0x13b6 <main+0x64>
    13a8:	4e e8       	ldi	r20, 0x8E	; 142
    13aa:	50 e0       	ldi	r21, 0x00	; 0
    13ac:	61 e0       	ldi	r22, 0x01	; 1
    13ae:	70 e0       	ldi	r23, 0x00	; 0
    13b0:	80 e9       	ldi	r24, 0x90	; 144
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0d dc       	rcall	.-2022   	; 0xbd0 <pf_read>
			OSCCAL = org_osc + Buff[0];
    13b6:	80 91 90 00 	lds	r24, 0x0090
    13ba:	89 0d       	add	r24, r9
    13bc:	81 bf       	out	0x31, r24	; 49

			res = pf_opendir(&Dir, dir = "music");	/* Open sound file directory */
    13be:	67 e6       	ldi	r22, 0x67	; 103
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	80 e9       	ldi	r24, 0x90	; 144
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	bb dd       	rcall	.-1162   	; 0xf3e <pf_opendir>
    13c8:	ac 01       	movw	r20, r24
			if (res == FR_NO_PATH)
    13ca:	04 97       	sbiw	r24, 0x04	; 4
    13cc:	31 f4       	brne	.+12     	; 0x13da <main+0x88>
				res = pf_opendir(&Dir, dir = "");	/* Open root directory */
    13ce:	61 e7       	ldi	r22, 0x71	; 113
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	80 e9       	ldi	r24, 0x90	; 144
    13d4:	91 e0       	ldi	r25, 0x01	; 1
    13d6:	b3 dd       	rcall	.-1178   	; 0xf3e <pf_opendir>
    13d8:	ac 01       	movw	r20, r24
			sw <<= 1;					/* Break on button down */
		} while ((PINB & 1) || ++sw != 1);
	}

	while (FifoCt) ;			/* Wait for audio FIFO empty */
	OCR1A = 128; OCR1B = 128;	/* Return output to center level */
    13da:	00 e8       	ldi	r16, 0x80	; 128
			TCCR0B = 0b00000010;
			TIMSK = _BV(OCIE0A);
			ramp(1);
		}

		pf_read(0, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
    13dc:	a1 2c       	mov	r10, r1
    13de:	32 e0       	ldi	r19, 0x02	; 2
    13e0:	b3 2e       	mov	r11, r19

			res = pf_opendir(&Dir, dir = "music");	/* Open sound file directory */
			if (res == FR_NO_PATH)
				res = pf_opendir(&Dir, dir = "");	/* Open root directory */

			while (res == FR_OK) {				/* Repeat in the dir */
    13e2:	45 2b       	or	r20, r21
    13e4:	81 f6       	brne	.-96     	; 0x1386 <main+0x34>
				res = pf_readdir(&Dir, 0);			/* Rewind dir */
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	80 e9       	ldi	r24, 0x90	; 144
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	e8 dd       	rcall	.-1072   	; 0xfc0 <pf_readdir>
    13f0:	ac 01       	movw	r20, r24
		if (sz < 1024) return 255;	/* Cannot play this file */

		FifoCt = 0; FifoRi = 0; FifoWi = 0;	/* Reset audio FIFO */

		if (!TCCR1) {				/* Enable audio out if not enabled */
			PLLCSR = 0b00000110;	/* Select PLL clock for TC1.ck */
    13f2:	86 e0       	ldi	r24, 0x06	; 6
    13f4:	28 2e       	mov	r2, r24
			GTCCR =  0b01100000;	/* Enable OC1B as PWM */
    13f6:	90 e6       	ldi	r25, 0x60	; 96
    13f8:	39 2e       	mov	r3, r25
			TCCR1 = MODE ? 0b01100001 : 0b00000001;	/* Start TC1 and enable OC1A as PWM if needed */
    13fa:	21 e6       	ldi	r18, 0x61	; 97
    13fc:	82 2e       	mov	r8, r18
			TCCR0A = 0b00000010;	/* Statr TC0 as interval timer at 2MHz */
    13fe:	12 e0       	ldi	r17, 0x02	; 2
			if (res == FR_NO_PATH)
				res = pf_opendir(&Dir, dir = "");	/* Open root directory */

			while (res == FR_OK) {				/* Repeat in the dir */
				res = pf_readdir(&Dir, 0);			/* Rewind dir */
				while (res == FR_OK) {				/* Play all wav files in the dir */
    1400:	41 15       	cp	r20, r1
    1402:	51 05       	cpc	r21, r1
    1404:	71 f7       	brne	.-36     	; 0x13e2 <main+0x90>
					wdt_reset();
    1406:	a8 95       	wdr
					res = pf_readdir(&Dir, &Fno);		/* Get a dir entry */
    1408:	68 e7       	ldi	r22, 0x78	; 120
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	80 e9       	ldi	r24, 0x90	; 144
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	d7 dd       	rcall	.-1106   	; 0xfc0 <pf_readdir>
    1412:	ac 01       	movw	r20, r24
					if (res || !Fno.fname[0]) break;	/* Break on error or end of dir */
    1414:	89 2b       	or	r24, r25
    1416:	29 f7       	brne	.-54     	; 0x13e2 <main+0x90>
    1418:	80 91 81 00 	lds	r24, 0x0081
    141c:	88 23       	and	r24, r24
    141e:	09 f3       	breq	.-62     	; 0x13e2 <main+0x90>
					if (!(Fno.fattrib & (AM_DIR|AM_HID)) && strstr(Fno.fname, ".WAV"))
    1420:	80 91 80 00 	lds	r24, 0x0080
    1424:	82 71       	andi	r24, 0x12	; 18
    1426:	61 f7       	brne	.-40     	; 0x1400 <main+0xae>
    1428:	6d e6       	ldi	r22, 0x6D	; 109
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	81 e8       	ldi	r24, 0x81	; 129
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	49 83       	std	Y+1, r20	; 0x01
    1432:	5b 83       	std	Y+3, r21	; 0x03
    1434:	38 d2       	rcall	.+1136   	; 0x18a6 <strstr>
    1436:	49 81       	ldd	r20, Y+1	; 0x01
    1438:	5b 81       	ldd	r21, Y+3	; 0x03
    143a:	89 2b       	or	r24, r25
    143c:	09 f3       	breq	.-62     	; 0x1400 <main+0xae>
	FRESULT res;
	BYTE sw;
	WORD btr;


	wdt_reset();
    143e:	a8 95       	wdr

	//xsprintf((char*)Buff, PSTR("%s/%s"), dir, fn);
	res = pf_open((char*)Buff);		/* Open sound file */
    1440:	80 e9       	ldi	r24, 0x90	; 144
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	7a db       	rcall	.-2316   	; 0xb3a <pf_open>
    1446:	ac 01       	movw	r20, r24
	if (res == FR_OK) {
    1448:	89 2b       	or	r24, r25
    144a:	09 f0       	breq	.+2      	; 0x144e <main+0xfc>
    144c:	60 c1       	rjmp	.+704    	; 0x170e <main+0x3bc>
{
	DWORD sz, f;
	BYTE b, al = 0;


	if (pf_read(Buff, 12, &rb)) return 1;	/* Load file header (12 bytes) */
    144e:	4e e8       	ldi	r20, 0x8E	; 142
    1450:	50 e0       	ldi	r21, 0x00	; 0
    1452:	6c e0       	ldi	r22, 0x0C	; 12
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	80 e9       	ldi	r24, 0x90	; 144
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	ba db       	rcall	.-2188   	; 0xbd0 <pf_read>
    145c:	89 2b       	or	r24, r25
    145e:	09 f0       	breq	.+2      	; 0x1462 <main+0x110>
    1460:	7b c1       	rjmp	.+758    	; 0x1758 <main+0x406>

	if (rb != 12 || LD_DWORD(Buff+8) != FCC('W','A','V','E')) return 0;
    1462:	80 91 8e 00 	lds	r24, 0x008E
    1466:	90 91 8f 00 	lds	r25, 0x008F
    146a:	0c 97       	sbiw	r24, 0x0c	; 12
    146c:	09 f0       	breq	.+2      	; 0x1470 <main+0x11e>
    146e:	74 c1       	rjmp	.+744    	; 0x1758 <main+0x406>
    1470:	80 91 98 00 	lds	r24, 0x0098
    1474:	90 91 99 00 	lds	r25, 0x0099
    1478:	a0 91 9a 00 	lds	r26, 0x009A
    147c:	b0 91 9b 00 	lds	r27, 0x009B
    1480:	87 35       	cpi	r24, 0x57	; 87
    1482:	91 44       	sbci	r25, 0x41	; 65
    1484:	a6 45       	sbci	r26, 0x56	; 86
    1486:	b5 44       	sbci	r27, 0x45	; 69
    1488:	09 f0       	breq	.+2      	; 0x148c <main+0x13a>
    148a:	66 c1       	rjmp	.+716    	; 0x1758 <main+0x406>
    148c:	1a 82       	std	Y+2, r1	; 0x02

	for (;;) {
		wdt_reset();
    148e:	a8 95       	wdr
		pf_read(Buff, 8, &rb);			/* Get Chunk ID and size */
    1490:	4e e8       	ldi	r20, 0x8E	; 142
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	68 e0       	ldi	r22, 0x08	; 8
    1496:	70 e0       	ldi	r23, 0x00	; 0
    1498:	80 e9       	ldi	r24, 0x90	; 144
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	99 db       	rcall	.-2254   	; 0xbd0 <pf_read>
		if (rb != 8) return 0;
    149e:	80 91 8e 00 	lds	r24, 0x008E
    14a2:	90 91 8f 00 	lds	r25, 0x008F
    14a6:	08 97       	sbiw	r24, 0x08	; 8
    14a8:	09 f0       	breq	.+2      	; 0x14ac <main+0x15a>
    14aa:	56 c1       	rjmp	.+684    	; 0x1758 <main+0x406>
		sz = LD_DWORD(&Buff[4]);		/* Chunk size */
    14ac:	c0 90 94 00 	lds	r12, 0x0094
    14b0:	d0 90 95 00 	lds	r13, 0x0095
    14b4:	e0 90 96 00 	lds	r14, 0x0096
    14b8:	f0 90 97 00 	lds	r15, 0x0097

		switch (LD_DWORD(&Buff[0])) {	/* Switch by chunk ID */
    14bc:	80 91 90 00 	lds	r24, 0x0090
    14c0:	90 91 91 00 	lds	r25, 0x0091
    14c4:	a0 91 92 00 	lds	r26, 0x0092
    14c8:	b0 91 93 00 	lds	r27, 0x0093
    14cc:	8c 34       	cpi	r24, 0x4C	; 76
    14ce:	39 e4       	ldi	r19, 0x49	; 73
    14d0:	93 07       	cpc	r25, r19
    14d2:	33 e5       	ldi	r19, 0x53	; 83
    14d4:	a3 07       	cpc	r26, r19
    14d6:	34 e5       	ldi	r19, 0x54	; 84
    14d8:	b3 07       	cpc	r27, r19
    14da:	09 f4       	brne	.+2      	; 0x14de <main+0x18c>
    14dc:	c8 c0       	rjmp	.+400    	; 0x166e <main+0x31c>
    14de:	78 f4       	brcc	.+30     	; 0x14fe <main+0x1ac>
    14e0:	86 36       	cpi	r24, 0x66	; 102
    14e2:	ed e6       	ldi	r30, 0x6D	; 109
    14e4:	9e 07       	cpc	r25, r30
    14e6:	e4 e7       	ldi	r30, 0x74	; 116
    14e8:	ae 07       	cpc	r26, r30
    14ea:	e0 e2       	ldi	r30, 0x20	; 32
    14ec:	be 07       	cpc	r27, r30
    14ee:	b9 f0       	breq	.+46     	; 0x151e <main+0x1cc>
    14f0:	84 34       	cpi	r24, 0x44	; 68
    14f2:	99 44       	sbci	r25, 0x49	; 73
    14f4:	a3 45       	sbci	r26, 0x53	; 83
    14f6:	b0 45       	sbci	r27, 0x50	; 80
    14f8:	09 f0       	breq	.+2      	; 0x14fc <main+0x1aa>
    14fa:	2e c1       	rjmp	.+604    	; 0x1758 <main+0x406>
    14fc:	b8 c0       	rjmp	.+368    	; 0x166e <main+0x31c>
    14fe:	84 36       	cpi	r24, 0x64	; 100
    1500:	21 e6       	ldi	r18, 0x61	; 97
    1502:	92 07       	cpc	r25, r18
    1504:	24 e7       	ldi	r18, 0x74	; 116
    1506:	a2 07       	cpc	r26, r18
    1508:	21 e6       	ldi	r18, 0x61	; 97
    150a:	b2 07       	cpc	r27, r18
    150c:	09 f4       	brne	.+2      	; 0x1510 <main+0x1be>
    150e:	62 c0       	rjmp	.+196    	; 0x15d4 <main+0x282>
    1510:	86 36       	cpi	r24, 0x66	; 102
    1512:	91 46       	sbci	r25, 0x61	; 97
    1514:	a3 46       	sbci	r26, 0x63	; 99
    1516:	b4 47       	sbci	r27, 0x74	; 116
    1518:	09 f0       	breq	.+2      	; 0x151c <main+0x1ca>
    151a:	1e c1       	rjmp	.+572    	; 0x1758 <main+0x406>
    151c:	a8 c0       	rjmp	.+336    	; 0x166e <main+0x31c>
		case FCC('f','m','t',' ') :					/* 'fmt ' chunk */
			if (sz & 1) sz++;						/* Align chunk size */
    151e:	c0 fe       	sbrs	r12, 0
    1520:	05 c0       	rjmp	.+10     	; 0x152c <main+0x1da>
    1522:	6f ef       	ldi	r22, 0xFF	; 255
    1524:	c6 1a       	sub	r12, r22
    1526:	d6 0a       	sbc	r13, r22
    1528:	e6 0a       	sbc	r14, r22
    152a:	f6 0a       	sbc	r15, r22
			if (sz > 100 || sz < 16) return 0;		/* Check chunk size */
    152c:	d7 01       	movw	r26, r14
    152e:	c6 01       	movw	r24, r12
    1530:	40 97       	sbiw	r24, 0x10	; 16
    1532:	a1 09       	sbc	r26, r1
    1534:	b1 09       	sbc	r27, r1
    1536:	85 35       	cpi	r24, 0x55	; 85
    1538:	91 05       	cpc	r25, r1
    153a:	a1 05       	cpc	r26, r1
    153c:	b1 05       	cpc	r27, r1
    153e:	08 f0       	brcs	.+2      	; 0x1542 <main+0x1f0>
    1540:	0b c1       	rjmp	.+534    	; 0x1758 <main+0x406>
			pf_read(Buff, sz, &rb);					/* Get content */
    1542:	4e e8       	ldi	r20, 0x8E	; 142
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	b6 01       	movw	r22, r12
    1548:	80 e9       	ldi	r24, 0x90	; 144
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	41 db       	rcall	.-2430   	; 0xbd0 <pf_read>
			if (rb != sz) return 0;
    154e:	80 91 8e 00 	lds	r24, 0x008E
    1552:	90 91 8f 00 	lds	r25, 0x008F
    1556:	a0 e0       	ldi	r26, 0x00	; 0
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	8c 15       	cp	r24, r12
    155c:	9d 05       	cpc	r25, r13
    155e:	ae 05       	cpc	r26, r14
    1560:	bf 05       	cpc	r27, r15
    1562:	09 f0       	breq	.+2      	; 0x1566 <main+0x214>
    1564:	f9 c0       	rjmp	.+498    	; 0x1758 <main+0x406>
			if (Buff[0] != 1) return 0;				/* Check coding type (LPCM) */
    1566:	80 91 90 00 	lds	r24, 0x0090
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	09 f0       	breq	.+2      	; 0x1570 <main+0x21e>
    156e:	f4 c0       	rjmp	.+488    	; 0x1758 <main+0x406>
			b = Buff[2];
    1570:	80 91 92 00 	lds	r24, 0x0092
    1574:	8a 83       	std	Y+2, r24	; 0x02
			if (b != 1 && b != 2) return 0;			/* Check channels (1/2) */
    1576:	81 50       	subi	r24, 0x01	; 1
    1578:	82 30       	cpi	r24, 0x02	; 2
    157a:	08 f0       	brcs	.+2      	; 0x157e <main+0x22c>
    157c:	ed c0       	rjmp	.+474    	; 0x1758 <main+0x406>
			GPIOR0 = al = b;						/* Save channel flag */
    157e:	ea 81       	ldd	r30, Y+2	; 0x02
    1580:	e1 bb       	out	0x11, r30	; 17
			b = Buff[14];
    1582:	80 91 9e 00 	lds	r24, 0x009E
			if (b != 8 && b != 16) return 0;		/* Check resolution (8/16 bit) */
    1586:	88 30       	cpi	r24, 0x08	; 8
    1588:	19 f0       	breq	.+6      	; 0x1590 <main+0x23e>
    158a:	80 31       	cpi	r24, 0x10	; 16
    158c:	09 f0       	breq	.+2      	; 0x1590 <main+0x23e>
    158e:	e4 c0       	rjmp	.+456    	; 0x1758 <main+0x406>
			GPIOR0 |= b;							/* Save resolution flag */
    1590:	91 b3       	in	r25, 0x11	; 17
    1592:	98 2b       	or	r25, r24
    1594:	91 bb       	out	0x11, r25	; 17
			if (b & 16) al <<= 1;
    1596:	84 ff       	sbrs	r24, 4
    1598:	03 c0       	rjmp	.+6      	; 0x15a0 <main+0x24e>
    159a:	fa 81       	ldd	r31, Y+2	; 0x02
    159c:	ff 0f       	add	r31, r31
    159e:	fa 83       	std	Y+2, r31	; 0x02
			f = LD_DWORD(&Buff[4]);					/* Check sampling freqency (8k-48k) */
    15a0:	20 91 94 00 	lds	r18, 0x0094
    15a4:	30 91 95 00 	lds	r19, 0x0095
    15a8:	40 91 96 00 	lds	r20, 0x0096
    15ac:	50 91 97 00 	lds	r21, 0x0097
			if (f < 8000 || f > 48000) return 4;
    15b0:	da 01       	movw	r26, r20
    15b2:	c9 01       	movw	r24, r18
    15b4:	80 54       	subi	r24, 0x40	; 64
    15b6:	9f 41       	sbci	r25, 0x1F	; 31
    15b8:	a1 09       	sbc	r26, r1
    15ba:	b1 09       	sbc	r27, r1
    15bc:	81 34       	cpi	r24, 0x41	; 65
    15be:	9c 49       	sbci	r25, 0x9C	; 156
    15c0:	a1 05       	cpc	r26, r1
    15c2:	b1 05       	cpc	r27, r1
    15c4:	08 f0       	brcs	.+2      	; 0x15c8 <main+0x276>
    15c6:	c8 c0       	rjmp	.+400    	; 0x1758 <main+0x406>
			OCR0A = (BYTE)(F_CPU / 8 / f) - 1;		/* Set sampling interval */
    15c8:	c3 01       	movw	r24, r6
    15ca:	b2 01       	movw	r22, r4
    15cc:	c8 d0       	rcall	.+400    	; 0x175e <__udivmodsi4>
    15ce:	21 50       	subi	r18, 0x01	; 1
    15d0:	29 bd       	out	0x29, r18	; 41
    15d2:	5d cf       	rjmp	.-326    	; 0x148e <main+0x13c>
			break;

		case FCC('d','a','t','a') :		/* 'data' chunk */
			if (!al) return 0;							/* Check if format is valid */
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	88 23       	and	r24, r24
    15d8:	09 f4       	brne	.+2      	; 0x15dc <main+0x28a>
    15da:	be c0       	rjmp	.+380    	; 0x1758 <main+0x406>
			if (sz < 1024 || (sz & (al - 1))) return 0;	/* Check size */
    15dc:	c1 14       	cp	r12, r1
    15de:	e4 e0       	ldi	r30, 0x04	; 4
    15e0:	de 06       	cpc	r13, r30
    15e2:	e1 04       	cpc	r14, r1
    15e4:	f1 04       	cpc	r15, r1
    15e6:	08 f4       	brcc	.+2      	; 0x15ea <main+0x298>
    15e8:	b7 c0       	rjmp	.+366    	; 0x1758 <main+0x406>
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	ac 01       	movw	r20, r24
    15f0:	99 0f       	add	r25, r25
    15f2:	66 0b       	sbc	r22, r22
    15f4:	77 0b       	sbc	r23, r23
    15f6:	db 01       	movw	r26, r22
    15f8:	ca 01       	movw	r24, r20
    15fa:	8c 21       	and	r24, r12
    15fc:	9d 21       	and	r25, r13
    15fe:	ae 21       	and	r26, r14
    1600:	bf 21       	and	r27, r15
    1602:	89 2b       	or	r24, r25
    1604:	8a 2b       	or	r24, r26
    1606:	8b 2b       	or	r24, r27
    1608:	09 f0       	breq	.+2      	; 0x160c <main+0x2ba>
    160a:	a6 c0       	rjmp	.+332    	; 0x1758 <main+0x406>
			if (Fs.fptr & (al - 1)) return 0;			/* Check word alignment */
    160c:	80 91 b7 01 	lds	r24, 0x01B7
    1610:	90 91 b8 01 	lds	r25, 0x01B8
    1614:	a0 91 b9 01 	lds	r26, 0x01B9
    1618:	b0 91 ba 01 	lds	r27, 0x01BA
    161c:	84 23       	and	r24, r20
    161e:	95 23       	and	r25, r21
    1620:	a6 23       	and	r26, r22
    1622:	b7 23       	and	r27, r23
    1624:	89 2b       	or	r24, r25
    1626:	8a 2b       	or	r24, r26
    1628:	8b 2b       	or	r24, r27
    162a:	09 f0       	breq	.+2      	; 0x162e <main+0x2dc>
    162c:	95 c0       	rjmp	.+298    	; 0x1758 <main+0x406>
	res = pf_open((char*)Buff);		/* Open sound file */
	if (res == FR_OK) {
		sz = load_header();			/* Check file format and ready to play */
		if (sz < 1024) return 255;	/* Cannot play this file */

		FifoCt = 0; FifoRi = 0; FifoWi = 0;	/* Reset audio FIFO */
    162e:	10 92 a0 01 	sts	0x01A0, r1
    1632:	10 92 77 00 	sts	0x0077, r1
    1636:	10 92 76 00 	sts	0x0076, r1

		if (!TCCR1) {				/* Enable audio out if not enabled */
    163a:	80 b7       	in	r24, 0x30	; 48
    163c:	88 23       	and	r24, r24
    163e:	71 f1       	breq	.+92     	; 0x169c <main+0x34a>
			TCCR0B = 0b00000010;
			TIMSK = _BV(OCIE0A);
			ramp(1);
		}

		pf_read(0, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
    1640:	80 91 b7 01 	lds	r24, 0x01B7
    1644:	90 91 b8 01 	lds	r25, 0x01B8
    1648:	91 70       	andi	r25, 0x01	; 1
    164a:	b5 01       	movw	r22, r10
    164c:	68 1b       	sub	r22, r24
    164e:	79 0b       	sbc	r23, r25
    1650:	4e e8       	ldi	r20, 0x8E	; 142
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	bb da       	rcall	.-2698   	; 0xbd0 <pf_read>
		sz -= rb;
    165a:	80 91 8e 00 	lds	r24, 0x008E
    165e:	90 91 8f 00 	lds	r25, 0x008F
    1662:	c8 1a       	sub	r12, r24
    1664:	d9 0a       	sbc	r13, r25
    1666:	e1 08       	sbc	r14, r1
    1668:	f1 08       	sbc	r15, r1
		sw = 1;	/* Button status flag */
    166a:	21 e0       	ldi	r18, 0x01	; 1
    166c:	43 c0       	rjmp	.+134    	; 0x16f4 <main+0x3a2>
			return sz;									/* Start to play */

		case FCC('D','I','S','P') :		/* 'DISP' chunk */
		case FCC('L','I','S','T') :		/* 'LIST' chunk */
		case FCC('f','a','c','t') :		/* 'fact' chunk */
			if (sz & 1) sz++;				/* Align chunk size */
    166e:	c0 fe       	sbrs	r12, 0
    1670:	05 c0       	rjmp	.+10     	; 0x167c <main+0x32a>
    1672:	ff ef       	ldi	r31, 0xFF	; 255
    1674:	cf 1a       	sub	r12, r31
    1676:	df 0a       	sbc	r13, r31
    1678:	ef 0a       	sbc	r14, r31
    167a:	ff 0a       	sbc	r15, r31
			pf_lseek(Fs.fptr + sz);			/* Skip this chunk */
    167c:	80 91 b7 01 	lds	r24, 0x01B7
    1680:	90 91 b8 01 	lds	r25, 0x01B8
    1684:	a0 91 b9 01 	lds	r26, 0x01B9
    1688:	b0 91 ba 01 	lds	r27, 0x01BA
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	6c 0d       	add	r22, r12
    1692:	7d 1d       	adc	r23, r13
    1694:	8e 1d       	adc	r24, r14
    1696:	9f 1d       	adc	r25, r15
    1698:	56 db       	rcall	.-2388   	; 0xd46 <pf_lseek>
    169a:	f9 ce       	rjmp	.-526    	; 0x148e <main+0x13c>
		if (sz < 1024) return 255;	/* Cannot play this file */

		FifoCt = 0; FifoRi = 0; FifoWi = 0;	/* Reset audio FIFO */

		if (!TCCR1) {				/* Enable audio out if not enabled */
			PLLCSR = 0b00000110;	/* Select PLL clock for TC1.ck */
    169c:	27 bc       	out	0x27, r2	; 39
			GTCCR =  0b01100000;	/* Enable OC1B as PWM */
    169e:	3c bc       	out	0x2c, r3	; 44
			TCCR1 = MODE ? 0b01100001 : 0b00000001;	/* Start TC1 and enable OC1A as PWM if needed */
    16a0:	80 be       	out	0x30, r8	; 48
			TCCR0A = 0b00000010;	/* Statr TC0 as interval timer at 2MHz */
    16a2:	1a bd       	out	0x2a, r17	; 42
			TCCR0B = 0b00000010;
    16a4:	13 bf       	out	0x33, r17	; 51
			TIMSK = _BV(OCIE0A);
    16a6:	20 e1       	ldi	r18, 0x10	; 16
    16a8:	29 bf       	out	0x39, r18	; 57
    16aa:	80 e0       	ldi	r24, 0x00	; 0
		v = 128; d = (BYTE)-1;
	}

	n = 128;
	do {
		v += d;
    16ac:	8f 5f       	subi	r24, 0xFF	; 255
		OCR1A = v; OCR1B = v;
    16ae:	8e bd       	out	0x2e, r24	; 46
    16b0:	8b bd       	out	0x2b, r24	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16b2:	ef e8       	ldi	r30, 0x8F	; 143
    16b4:	f1 e0       	ldi	r31, 0x01	; 1
    16b6:	31 97       	sbiw	r30, 0x01	; 1
    16b8:	f1 f7       	brne	.-4      	; 0x16b6 <main+0x364>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <main+0x36a>
    16bc:	00 00       	nop
		delay_us(100);
	} while (--n);
    16be:	80 38       	cpi	r24, 0x80	; 128
    16c0:	a9 f7       	brne	.-22     	; 0x16ac <main+0x35a>
    16c2:	be cf       	rjmp	.-132    	; 0x1640 <main+0x2ee>
		sz -= rb;
		sw = 1;	/* Button status flag */
		do {	/* Data transfer loop */
			wdt_reset();

			btr = (sz > 1024) ? 1024 : (WORD)sz;/* A chunk of audio data */
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	74 e0       	ldi	r23, 0x04	; 4
			res = pf_read(0, btr, &rb);	/* Forward the data into audio FIFO */
    16c8:	4e e8       	ldi	r20, 0x8E	; 142
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	29 83       	std	Y+1, r18	; 0x01
    16d2:	7e da       	rcall	.-2820   	; 0xbd0 <pf_read>
    16d4:	ac 01       	movw	r20, r24
			if (rb != 1024) break;		/* Break on error or end of data */
    16d6:	80 91 8e 00 	lds	r24, 0x008E
    16da:	90 91 8f 00 	lds	r25, 0x008F
    16de:	29 81       	ldd	r18, Y+1	; 0x01
    16e0:	81 15       	cp	r24, r1
    16e2:	94 40       	sbci	r25, 0x04	; 4
    16e4:	a1 f4       	brne	.+40     	; 0x170e <main+0x3bc>
			sz -= rb;					/* Decrease data counter */
    16e6:	64 e0       	ldi	r22, 0x04	; 4
    16e8:	d6 1a       	sub	r13, r22
    16ea:	e1 08       	sbc	r14, r1
    16ec:	f1 08       	sbc	r15, r1

			sw <<= 1;					/* Break on button down */
    16ee:	22 0f       	add	r18, r18
		} while ((PINB & 1) || ++sw != 1);
    16f0:	b0 9b       	sbis	0x16, 0	; 22
    16f2:	0a c0       	rjmp	.+20     	; 0x1708 <main+0x3b6>

		pf_read(0, 512 - (Fs.fptr % 512), &rb);	/* Snip sector unaligned part */
		sz -= rb;
		sw = 1;	/* Button status flag */
		do {	/* Data transfer loop */
			wdt_reset();
    16f4:	a8 95       	wdr

			btr = (sz > 1024) ? 1024 : (WORD)sz;/* A chunk of audio data */
    16f6:	f1 e0       	ldi	r31, 0x01	; 1
    16f8:	cf 16       	cp	r12, r31
    16fa:	f4 e0       	ldi	r31, 0x04	; 4
    16fc:	df 06       	cpc	r13, r31
    16fe:	e1 04       	cpc	r14, r1
    1700:	f1 04       	cpc	r15, r1
    1702:	00 f7       	brcc	.-64     	; 0x16c4 <main+0x372>
    1704:	b6 01       	movw	r22, r12
    1706:	e0 cf       	rjmp	.-64     	; 0x16c8 <main+0x376>
			res = pf_read(0, btr, &rb);	/* Forward the data into audio FIFO */
			if (rb != 1024) break;		/* Break on error or end of data */
			sz -= rb;					/* Decrease data counter */

			sw <<= 1;					/* Break on button down */
		} while ((PINB & 1) || ++sw != 1);
    1708:	2f 5f       	subi	r18, 0xFF	; 255
    170a:	21 30       	cpi	r18, 0x01	; 1
    170c:	99 f7       	brne	.-26     	; 0x16f4 <main+0x3a2>
	}

	while (FifoCt) ;			/* Wait for audio FIFO empty */
    170e:	80 91 a0 01 	lds	r24, 0x01A0
    1712:	81 11       	cpse	r24, r1
    1714:	fc cf       	rjmp	.-8      	; 0x170e <main+0x3bc>
	OCR1A = 128; OCR1B = 128;	/* Return output to center level */
    1716:	0e bd       	out	0x2e, r16	; 46
    1718:	0b bd       	out	0x2b, r16	; 43
    171a:	72 ce       	rjmp	.-796    	; 0x1400 <main+0xae>
		v = 128; d = (BYTE)-1;
	}

	n = 128;
	do {
		v += d;
    171c:	81 50       	subi	r24, 0x01	; 1
		OCR1A = v; OCR1B = v;
    171e:	8e bd       	out	0x2e, r24	; 46
    1720:	8b bd       	out	0x2b, r24	; 43
    1722:	ef e8       	ldi	r30, 0x8F	; 143
    1724:	f1 e0       	ldi	r31, 0x01	; 1
    1726:	31 97       	sbiw	r30, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <main+0x3d4>
    172a:	00 c0       	rjmp	.+0      	; 0x172c <main+0x3da>
    172c:	00 00       	nop
		delay_us(100);
	} while (--n);
    172e:	81 11       	cpse	r24, r1
    1730:	f5 cf       	rjmp	.-22     	; 0x171c <main+0x3ca>

	TCCR0B = 0; TCCR0A = 0;	/* Stop TC0 */

	if (TCCR1) {	/* Stop TC1 if enabled */
		ramp(0);
		TCCR1 = 0; GTCCR = 0;
    1732:	10 be       	out	0x30, r1	; 48
    1734:	1c bc       	out	0x2c, r1	; 44
	}

	WDTCR = _BV(WDE) | _BV(WDIE) | 0b101;	/* Set WDT to interrupt mode in timeout of 0.5s */
    1736:	8d e4       	ldi	r24, 0x4D	; 77
    1738:	81 bd       	out	0x21, r24	; 33
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);	/* Enter power down mode */
    173a:	85 b7       	in	r24, 0x35	; 53
    173c:	87 7e       	andi	r24, 0xE7	; 231
    173e:	80 61       	ori	r24, 0x10	; 16
    1740:	85 bf       	out	0x35, r24	; 53
	sleep_mode();
    1742:	85 b7       	in	r24, 0x35	; 53
    1744:	80 62       	ori	r24, 0x20	; 32
    1746:	85 bf       	out	0x35, r24	; 53
    1748:	88 95       	sleep
    174a:	85 b7       	in	r24, 0x35	; 53
    174c:	8f 7d       	andi	r24, 0xDF	; 223
    174e:	85 bf       	out	0x35, r24	; 53

	wdt_reset();
    1750:	a8 95       	wdr
	WDTCR = _BV(WDE) | 0b110;				/* Set WDT to reset mode in timeout of 1s */
    1752:	8e e0       	ldi	r24, 0x0E	; 14
    1754:	81 bd       	out	0x21, r24	; 33
    1756:	12 ce       	rjmp	.-988    	; 0x137c <main+0x2a>

	//xsprintf((char*)Buff, PSTR("%s/%s"), dir, fn);
	res = pf_open((char*)Buff);		/* Open sound file */
	if (res == FR_OK) {
		sz = load_header();			/* Check file format and ready to play */
		if (sz < 1024) return 255;	/* Cannot play this file */
    1758:	4f ef       	ldi	r20, 0xFF	; 255
    175a:	50 e0       	ldi	r21, 0x00	; 0
    175c:	51 ce       	rjmp	.-862    	; 0x1400 <main+0xae>

0000175e <__udivmodsi4>:
    175e:	a1 e2       	ldi	r26, 0x21	; 33
    1760:	1a 2e       	mov	r1, r26
    1762:	aa 1b       	sub	r26, r26
    1764:	bb 1b       	sub	r27, r27
    1766:	fd 01       	movw	r30, r26
    1768:	0d c0       	rjmp	.+26     	; 0x1784 <__udivmodsi4_ep>

0000176a <__udivmodsi4_loop>:
    176a:	aa 1f       	adc	r26, r26
    176c:	bb 1f       	adc	r27, r27
    176e:	ee 1f       	adc	r30, r30
    1770:	ff 1f       	adc	r31, r31
    1772:	a2 17       	cp	r26, r18
    1774:	b3 07       	cpc	r27, r19
    1776:	e4 07       	cpc	r30, r20
    1778:	f5 07       	cpc	r31, r21
    177a:	20 f0       	brcs	.+8      	; 0x1784 <__udivmodsi4_ep>
    177c:	a2 1b       	sub	r26, r18
    177e:	b3 0b       	sbc	r27, r19
    1780:	e4 0b       	sbc	r30, r20
    1782:	f5 0b       	sbc	r31, r21

00001784 <__udivmodsi4_ep>:
    1784:	66 1f       	adc	r22, r22
    1786:	77 1f       	adc	r23, r23
    1788:	88 1f       	adc	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	1a 94       	dec	r1
    178e:	69 f7       	brne	.-38     	; 0x176a <__udivmodsi4_loop>
    1790:	60 95       	com	r22
    1792:	70 95       	com	r23
    1794:	80 95       	com	r24
    1796:	90 95       	com	r25
    1798:	9b 01       	movw	r18, r22
    179a:	ac 01       	movw	r20, r24
    179c:	bd 01       	movw	r22, r26
    179e:	cf 01       	movw	r24, r30
    17a0:	08 95       	ret

000017a2 <__mulsidi3>:
    17a2:	68 94       	set
    17a4:	00 13       	cpse	r16, r16

000017a6 <__umulsidi3>:
    17a6:	e8 94       	clt
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e9 ed       	ldi	r30, 0xD9	; 217
    17ae:	fb e0       	ldi	r31, 0x0B	; 11
    17b0:	1d c0       	rjmp	.+58     	; 0x17ec <__prologue_saves__+0x10>
    17b2:	ef ef       	ldi	r30, 0xFF	; 255
    17b4:	e7 f9       	bld	r30, 7
    17b6:	59 01       	movw	r10, r18
    17b8:	6a 01       	movw	r12, r20
    17ba:	5e 23       	and	r21, r30
    17bc:	55 0f       	add	r21, r21
    17be:	ee 08       	sbc	r14, r14
    17c0:	fe 2c       	mov	r15, r14
    17c2:	87 01       	movw	r16, r14
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	9e 23       	and	r25, r30
    17ca:	99 0f       	add	r25, r25
    17cc:	66 0b       	sbc	r22, r22
    17ce:	76 2f       	mov	r23, r22
    17d0:	cb 01       	movw	r24, r22
    17d2:	3b d0       	rcall	.+118    	; 0x184a <__muldi3>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	ea e0       	ldi	r30, 0x0A	; 10
    17da:	24 c0       	rjmp	.+72     	; 0x1824 <__epilogue_restores__+0x10>

000017dc <__prologue_saves__>:
    17dc:	2f 92       	push	r2
    17de:	3f 92       	push	r3
    17e0:	4f 92       	push	r4
    17e2:	5f 92       	push	r5
    17e4:	6f 92       	push	r6
    17e6:	7f 92       	push	r7
    17e8:	8f 92       	push	r8
    17ea:	9f 92       	push	r9
    17ec:	af 92       	push	r10
    17ee:	bf 92       	push	r11
    17f0:	cf 92       	push	r12
    17f2:	df 92       	push	r13
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	ca 1b       	sub	r28, r26
    1806:	db 0b       	sbc	r29, r27
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	09 94       	ijmp

00001814 <__epilogue_restores__>:
    1814:	2a 88       	ldd	r2, Y+18	; 0x12
    1816:	39 88       	ldd	r3, Y+17	; 0x11
    1818:	48 88       	ldd	r4, Y+16	; 0x10
    181a:	5f 84       	ldd	r5, Y+15	; 0x0f
    181c:	6e 84       	ldd	r6, Y+14	; 0x0e
    181e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1820:	8c 84       	ldd	r8, Y+12	; 0x0c
    1822:	9b 84       	ldd	r9, Y+11	; 0x0b
    1824:	aa 84       	ldd	r10, Y+10	; 0x0a
    1826:	b9 84       	ldd	r11, Y+9	; 0x09
    1828:	c8 84       	ldd	r12, Y+8	; 0x08
    182a:	df 80       	ldd	r13, Y+7	; 0x07
    182c:	ee 80       	ldd	r14, Y+6	; 0x06
    182e:	fd 80       	ldd	r15, Y+5	; 0x05
    1830:	0c 81       	ldd	r16, Y+4	; 0x04
    1832:	1b 81       	ldd	r17, Y+3	; 0x03
    1834:	aa 81       	ldd	r26, Y+2	; 0x02
    1836:	b9 81       	ldd	r27, Y+1	; 0x01
    1838:	ce 0f       	add	r28, r30
    183a:	d1 1d       	adc	r29, r1
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	ed 01       	movw	r28, r26
    1848:	08 95       	ret

0000184a <__muldi3>:
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	9f 92       	push	r9
    1850:	a0 e4       	ldi	r26, 0x40	; 64
    1852:	9a 2e       	mov	r9, r26
    1854:	00 24       	eor	r0, r0
    1856:	d0 01       	movw	r26, r0
    1858:	e0 01       	movw	r28, r0
    185a:	f0 01       	movw	r30, r0
    185c:	16 95       	lsr	r17
    185e:	07 95       	ror	r16
    1860:	f7 94       	ror	r15
    1862:	e7 94       	ror	r14
    1864:	d7 94       	ror	r13
    1866:	c7 94       	ror	r12
    1868:	b7 94       	ror	r11
    186a:	a7 94       	ror	r10
    186c:	48 f4       	brcc	.+18     	; 0x1880 <__muldi3+0x36>
    186e:	10 68       	ori	r17, 0x80	; 128
    1870:	a2 0f       	add	r26, r18
    1872:	b3 1f       	adc	r27, r19
    1874:	c4 1f       	adc	r28, r20
    1876:	d5 1f       	adc	r29, r21
    1878:	e6 1f       	adc	r30, r22
    187a:	f7 1f       	adc	r31, r23
    187c:	08 1e       	adc	r0, r24
    187e:	19 1e       	adc	r1, r25
    1880:	22 0f       	add	r18, r18
    1882:	33 1f       	adc	r19, r19
    1884:	44 1f       	adc	r20, r20
    1886:	55 1f       	adc	r21, r21
    1888:	66 1f       	adc	r22, r22
    188a:	77 1f       	adc	r23, r23
    188c:	88 1f       	adc	r24, r24
    188e:	99 1f       	adc	r25, r25
    1890:	9a 94       	dec	r9
    1892:	21 f7       	brne	.-56     	; 0x185c <__muldi3+0x12>
    1894:	9d 01       	movw	r18, r26
    1896:	ae 01       	movw	r20, r28
    1898:	bf 01       	movw	r22, r30
    189a:	c0 01       	movw	r24, r0
    189c:	11 24       	eor	r1, r1
    189e:	9f 90       	pop	r9
    18a0:	cf 91       	pop	r28
    18a2:	df 91       	pop	r29
    18a4:	08 95       	ret

000018a6 <strstr>:
    18a6:	fb 01       	movw	r30, r22
    18a8:	51 91       	ld	r21, Z+
    18aa:	55 23       	and	r21, r21
    18ac:	a9 f0       	breq	.+42     	; 0x18d8 <strstr+0x32>
    18ae:	bf 01       	movw	r22, r30
    18b0:	dc 01       	movw	r26, r24
    18b2:	4d 91       	ld	r20, X+
    18b4:	45 17       	cp	r20, r21
    18b6:	41 11       	cpse	r20, r1
    18b8:	e1 f7       	brne	.-8      	; 0x18b2 <strstr+0xc>
    18ba:	59 f4       	brne	.+22     	; 0x18d2 <strstr+0x2c>
    18bc:	cd 01       	movw	r24, r26
    18be:	01 90       	ld	r0, Z+
    18c0:	00 20       	and	r0, r0
    18c2:	49 f0       	breq	.+18     	; 0x18d6 <strstr+0x30>
    18c4:	4d 91       	ld	r20, X+
    18c6:	40 15       	cp	r20, r0
    18c8:	41 11       	cpse	r20, r1
    18ca:	c9 f3       	breq	.-14     	; 0x18be <strstr+0x18>
    18cc:	fb 01       	movw	r30, r22
    18ce:	41 11       	cpse	r20, r1
    18d0:	ef cf       	rjmp	.-34     	; 0x18b0 <strstr+0xa>
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	08 95       	ret

000018da <_exit>:
    18da:	f8 94       	cli

000018dc <__stop_program>:
    18dc:	ff cf       	rjmp	.-2      	; 0x18dc <__stop_program>
